<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
    ====================================================================
      StdCtrls
    ====================================================================
    -->
    <module name="StdCtrls">
      <short>Standard controls used on Lazarus forms</short>
      <descr/>

      <!-- unresolved external references -->
      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="Types"/>
      <element name="LCLStrConsts"/>
      <element name="LCLType"/>
      <element name="LCLProc"/>
      <element name="LCLIntf"/>
      <element name="LMessages"/>
      <element name="LResources"/>
      <element name="Graphics"/>
      <element name="ActnList"/>
      <element name="Controls"/>
      <element name="Forms"/>
      <element name="Menus"/>
      <element name="Themes"/>
      <element name="TextStrings"/>
      <element name="ExtendedStrings"/>
      <element name="LazUTF8"/>
      <element name="LazMethodList"/>
      <element name="LazLoggerBase"/>
      <element name="LazUtilities"/>

      <element name="TEditCharCase">
        <short>Determines the case for text in an edit box or a combo-box control</short>
        <descr>
          <p>
            <var>TEditCharCase</var> is an enumerated type with values that determine the case used for text in controls like <var>TCustomComboBox</var> and <var>TCustomEdit</var>. TEditCharCase is the type used to implement the <var>CharCase</var> property in both TCustomComboBox and TCustomEdit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.CharCase"/>
          <link id="TCustomEdit.CharCase"/>
        </seealso>
      </element>
      <element name="TEditCharCase.ecNormal">
        <short>Normal mode (no case conversion)</short>
      </element>
      <element name="TEditCharCase.ecUppercase">
        <short>Converts every character entered to upper case</short>
      </element>
      <element name="TEditCharCase.ecLowerCase">
        <short>Converts every character entered to lower case</short>
      </element>

      <element name="TEchoMode">
        <short>How text in the edit box is displayed</short>
        <descr>
          <p>
            <var>TEchoMode</var> is an enumerated type with values that control whether text in a control is displayed with or without obfuscation. TEchoMode is the type used to implement the <var>EchoMode</var> property in <var>TCustomEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.EchoMode"/>
        </seealso>
      </element>
      <element name="TEchoMode.emNormal">
        <short>Characters are shown unmodified</short>
      </element>
      <element name="TEchoMode.emNone">
        <short>All characters are shown as spaces</short>
        <descr/>
      </element>
      <element name="TEchoMode.emPassword">
        <short>All characters shown as the value in PasswordChar</short>
      </element>

      <element name="TScrollStyle">
        <short>Indicates the visibility for scrollbars on a control</short>
        <descr>
          <p>
            <var>TScrollStyle</var> is an enumerated type with values that indicates the visibility for one or more scrollbars displayed for an associated edit control. TScrollStyle is the type used to implement the <var>ScrollBars</var> property in <var>TCustomMemo</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.ScrollBars"/>
        </seealso>
      </element>
      <element name="TScrollStyle.ssNone">
        <short>No scrollbars are displayed</short>
      </element>
      <element name="TScrollStyle.ssHorizontal">
        <short>A horizontal scrollbar is shown</short>
      </element>
      <element name="TScrollStyle.ssVertical">
        <short>A vertical scrollbar is shown</short>
      </element>
      <element name="TScrollStyle.ssBoth">
        <short>Both horizontal and vertical scrollbars are shown</short>
      </element>
      <element name="TScrollStyle.ssAutoHorizontal">
        <short>A horizontal scrollbar is shown only when needed</short>
      </element>
      <element name="TScrollStyle.ssAutoVertical">
        <short>A vertical scrollbar is shown only when needed</short>
      </element>
      <element name="TScrollStyle.ssAutoBoth">
        <short>Both scrollbars are shown only when needed</short>
      </element>

      <element name="TScrollCode">
        <short>The scroll action type, as reported by the widget</short>
        <descr>
          <p>
            <var>TScrollCode</var> is an enumerated type with values that represent scroll actions received from the widgetset class for a scrollbar. The positions and values  in the enumeration correspond to the constants defined in the <file>LCLType</file> unit, and include:
          </p>
          <ul>
            <li>SB_LINEUP</li>
            <li>SB_LINEDOWN</li>
            <li>SB_PAGEUP</li>
            <li>SB_PAGEDOWN</li>
            <li>SB_THUMBPOSITION</li>
            <li>SB_THUMBTRACK</li>
            <li>SB_TOP</li>
            <li>SB_BOTTOM</li>
            <li>SB_ENDSCROLL</li>
          </ul>
          <p>
            Values in TScrollCode are passed as an argument to the <var>Scroll</var> method in <var>TCustomScrollBar</var>, and subsequently to the <var>TScrollEvent</var> event handler in the <var>OnScroll</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TScrollEvent"/>
          <link id="TCustomScrollBar.Scroll"/>
          <link id="TCustomScrollBar.OnScroll"/>
        </seealso>
      </element>
      <element name="TScrollCode.scLineUp">
        <short>Scroll one line up (column left)</short>
      </element>
      <element name="TScrollCode.scLineDown">
        <short>Scroll one line down (column right)</short>
      </element>
      <element name="TScrollCode.scPageUp">
        <short>Scroll one page up (left)</short>
      </element>
      <element name="TScrollCode.scPageDown">
        <short>Scroll one page down (right)</short>
      </element>
      <element name="TScrollCode.scPosition">
        <short>Scroll to the specified position</short>
      </element>
      <element name="TScrollCode.scTrack">
        <short>Scroll tracking to the specified position</short>
      </element>
      <element name="TScrollCode.scTop">
        <short>Scroll to the top (left) end</short>
      </element>
      <element name="TScrollCode.scBottom">
        <short>Scroll to the bottom (right) end</short>
      </element>
      <element name="TScrollCode.scEndScroll">
        <short>Scrolling finished</short>
      </element>

      <element name="TScrollEvent">
        <short>Defines an event handler type for scrollbar events</short>
        <descr>
          <p>
            <var>TScrollEvent</var> is an object procedure which defines an event handler signalled when a scroll event occurs in the scrollbar widgetset class. The event handler is called before the new <var>Position</var> is set for the control. The value in Position can be adjusted to implement custom scrollbar behavior.
          </p>
          <p>
            TScrollEvent is the type used to implement the <var>OnScroll</var> event handler in <var>TCustomScrollBar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.OnScroll"/>
          <link id="TCustomScrollBar.Scroll"/>
        </seealso>
      </element>
      <element name="TScrollEvent.Sender">
        <short>The scrollbar for the event notification</short>
      </element>
      <element name="TScrollEvent.ScrollCode">
        <short>The scroll action for the notification</short>
      </element>
      <element name="TScrollEvent.ScrollPos">
        <short>New position for the scrollbar</short>
        <descr>
          <p>
            The suggested new scroll position. Change this value to implement custom scroll behavior.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomScrollBar" link="#LCL.Controls.TWinControl">
        <short>The base class for <var>TScrollBar</var></short>
        <descr>
          <var>TCustomScrollBar</var> is a <var>TWinControl</var> descendant which defines the base class for a scrollbar, such as <var>TScrollBar</var>. TCustomScrollBar can be used for horizontal or vertical scrollbars displayed for a form or scrolling window control.
          <p>
          </p>
          <p>
            A scrollbar allows the content in a client area to be scrolled when it extends beyond the window bounds. TCustomScrollBar provides the properties, methods, and events needed to interface with the widgetset class for the platform or operating system.
          </p>
          <p>
            Use the <var>Kind</var> property to specify the orientation for the scrollbar.
          </p>
          <p>
            Use <var>Min</var>, <var>Max</var>, <var>SmallChange</var>, <var>LargeChange</var>, <var>PageSize</var> and <var>Position</var> properties to control the scrolling behavior for the scrollbar.
          </p>
          <p>
            Use the <var>OnChange</var> and <var>OnScroll</var> event handlers to respond to programmatic changes to the scrollbar, or messages received from the widgetset class.
          </p>
          <p>
            See <link id="#lcl.forms.TControlScrollBar">TControlScrollBar</link> for information about scrollbars used for windowed controls.
          </p>
        </descr>
        <seealso>
          <link id="TScrollBar"/>
          <link id="#lcl.controls.TWinControl"/>
          <link id="#lcl.controls.TScrollingWinControl"/>
          <link id="#lcl.forms.TControlScrollBar"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.FKind"/>
      <element name="TCustomScrollBar.FPosition"/>
      <element name="TCustomScrollBar.FMin"/>
      <element name="TCustomScrollBar.FMax"/>
      <element name="TCustomScrollBar.FPageSize"/>
      <element name="TCustomScrollBar.FRTLFactor"/>
      <element name="TCustomScrollBar.FSmallChange"/>
      <element name="TCustomScrollBar.FLargeChange"/>
      <element name="TCustomScrollBar.FOnChange"/>
      <element name="TCustomScrollBar.FOnScroll"/>

      <element name="TCustomScrollBar.DoScroll">
        <short>Performs actions needed to translate and apply scrollbar notification messages</short>
      </element>
      <element name="TCustomScrollBar.DoScroll.Message">
        <short>Message examined and applied in the method</short>
      </element>

      <element name="TCustomScrollBar.NotRightToLeft">
        <short>Always returns </short>
      </element>
      <element name="TCustomScrollBar.NotRightToLeft.Result">
        <short>Always returns True</short>
      </element>

      <element name="TCustomScrollBar.SetKind">
        <short>Sets the value for the Kind property</short>
        <descr/>
        <seealso>
           <link id="TCustomScrollBar.Kind"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.SetKind.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomScrollBar.SetMax">
        <short>Sets the value for the Max property</short>
        <descr/>
        <seealso>
          <link id="TCustomScrollBar.Max"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.SetMax.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomScrollBar.SetMin">
        <short>Sets the value for the Min property</short>
        <descr/>
        <seealso>
          <link id="TCustomScrollBar.Min"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.SetMin.Value">
        <short>New value for the property</short>
      </element>


      <element name="TCustomScrollBar.SetPosition" link="TCustomScrollBar.Position"/>
      <element name="TCustomScrollBar.SetPosition.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomScrollBar.SetPageSize" link="TCustomScrollBar.PageSize"/>
      <element name="TCustomScrollBar.SetPageSize.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomScrollBar.CNHScroll">
        <short>Handles the LM_HSCROLL message for the control</short>
      </element>
      <element name="TCustomScrollBar.CNHScroll.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomScrollBar.CNVScroll">
        <short>Handles the LM_VSCROLL message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomScrollBar.CNVScroll.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomScrollBar.CNCtlColorScrollBar">
        <short>Handles the CN_CTLCOLORSCROLLBAR message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomScrollBar.CNCtlColorScrollBar.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomScrollBar.WMEraseBkgnd">
        <short>Handles the LM_ERASEBKGND message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomScrollBar.WMEraseBkgnd.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomScrollBar.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass">
        <short>Registers the widgetset class created for new instances of the control</short>
        <descr>
          <p>
            <var>WSRegisterClass</var> is an overridden procedure used to register the widgetset class instance created for new instances of the control. WSRegisterClass calls the inherited method, and calls <var>RegisterCustomScrollBar</var> for the widgetset.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.GetControlClassDefaultSize">
        <short>Gets the default size for new instances of the class</short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomScrollBar.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short>Initializes the creation parameters for the class instance</short>
        <descr>
          <p>
            <var>CreateParams</var> is an overridden method used initialize the creation parameters for the class instance. CreateParams calls the inherited method, and ensures that the <var>Params</var> argument is updated to include the value from the <var>Kind</var> property in the style information for the <var>TCreateParams</var> instance. This ensures that the correct orientation for the scrollbar is used in the creation parameters.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.Kind"/>
          <link id="TScrollBarKind"/>
          <link id="TCustomScrollBar.CreateWnd"/>
          <link id="#LCL.LCLType.TCreateParams"/>
        </seealso>
        <notes><note>What is FRTLFactor?</note></notes>
      </element>
      <element name="TCustomScrollBar.CreateParams.Params">
        <short>The creation parameters and flags for the instance</short>
      </element>

      <element name="TCustomScrollBar.CreateWnd">
        <short>
          <var>CreateWnd</var> - calls inherited <var>CreateWnd</var> then initializes various Scroll Info properties
        </short>
        <descr>
          <p>
            <printshort id="TCustomScrollBar.CreateWnd"/>
          </p>
          <p>
            The inherited method creates the interface object, sets parameters and assigns the handle. Then the size of scrollbar, maximum and minimum values, page size and position of scrollbar are set.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.Change">
        <short>Invokes the OnChange event handler for the control</short>
        <descr>
          <p>
            <var>Change</var> is a procedure used to perform the <var>Changed</var> method in the ancestor class, and to signal the <var>OnChange</var> event handler (when assigned) for the control. Change is called when <var>SetParams</var> is used to update the <var>Position</var>, <var>Min</var>, <var>Max</var>, or <var>PageSize</var> values in the scrollbar.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.OnChange"/>
          <link id="TCustomScrollBar.SetParams"/>
          <link id="TCustomScrollBar.Position"/>
          <link id="TCustomScrollBar.Min"/>
          <link id="TCustomScrollBar.Max"/>
          <link id="TCustomScrollBar.PageSize"/>
          <link id="#LCL.Controls.TControl.Changed"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.Scroll">
        <short>Signals the OnScroll event handler</short>
        <descr>
          <p>
            <var>Scroll</var> is a method used to signal the <var>OnScroll</var> event handler (when assigned) for the control.
          </p>
          <p>
            <var>ScrollCode</var> contains the scrollbar command constant for the scroll operation. <var>ScrollPos</var> contains the new position for the scrollbar when the operation is completed.
          </p>
          <p>
            Scroll is called from the implementation of the private DoScroll method, which handles scrollbar control messages and sets the values for the arguments to the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.OnScroll"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.Scroll.ScrollCode">
        <short>
          Scroll command code for the operation; up or down a line, a page, to the top or bottom, etc.
        </short>
      </element>
      <element name="TCustomScrollBar.Scroll.ScrollPos">
        <short>The new position for the scrollbar</short>
      </element>

      <element name="TCustomScrollBar.CalculatePreferredSize" link="#LCL.Controls.TWinControl.CalculatePreferredSize">
        <short/>
        <descr>
          <p>
            <var>CalculatePreferredSize</var> is overridden in TCustomScrollBar. The inherited method is called, and the value in PreferredHeight or PerferredWidth is updated, based on the value in <var>Kind</var>, to use the corresponding value from <var>GetSystemMetrics</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.Kind"/>
          <link id="#LCL.Controls.TWinControl.CalculatePreferredSize"/>
          <link id="#LCL.InterfaceBase.GetSystemMetrics"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomScrollBar.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomScrollBar.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomScrollBar.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry.
          </p>
          <p>
            Create ensures that the component style is updated to <var>csScrollBar</var> and sets the initial bounds for the control to the values returned from <var>GetControlClassDefaultSize</var>. Create sets the default values for properties, like:
          </p>
          <dl>
            <dt>TabStop</dt>
            <dd>Set to True.</dd>
            <dt>ControlStyle </dt>
            <dd>
              Includes the values: [csFramed, csDoubleClicks, csOpaque]. Excludes the values: [csAcceptsControls, csDoubleClicks, csCaptureMouse, csSetCaption].
            </dd>
            <dt>Kind</dt>
            <dd>Set to sbHorizontal.</dd>
            <dt>Position</dt>
            <dd>Set to 0.</dd>
            <dt>Min</dt>
            <dd>Set to 0.</dd>
            <dt>Max</dt>
            <dd>Set to 100.</dd>
            <dt>SmallChange</dt>
            <dd>Set to 1.</dd>
            <dt>LargeChange</dt>
            <dd>Set to 1.</dd>
          </dl>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomScrollBar.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomScrollBar.SetParams">
        <short>Updates the Min and Max values, the size of the page, and the position in the scrollbar</short>
        <descr>
          <p>
            <var>SetParams</var> is an overloaded procedure used to update the values in the <var>TScrollInfo</var> structure passed to the widgetset class. Values passed in parameters are stored in the TScrollInfo instance, and used to validate the new settings for the scrollbar.
          </p>
          <p>
            SetParams raises an <var>EInvalidOperation</var> exception if the value in AMax is smaller than the value in AMin.
          </p>
          <p>
            The value in <var>APosition</var> is normalized to ensure that it is in the range specified by <var>AMin</var> and <var>AMax</var>.
          </p>
          <p>
            <var>APageSize</var> is set to 0 (zero) if it contains a negative value.
          </p>
          <p>
            When any of the parameter values differ from the current values in the class instance, the class instance is updated. <var>SetScrollInfo</var> is called to apply the changed values when a handle has been allocated for the control. <var>SetScrollPos</var> is called when APosition contains a value different than the one in the class instance. The <var>Change</var> method is called to process the updated values in the control and signal the <var>OnChange</var> event handler (when assigned). The <var>SetParams</var> method in the widgetset class is called to synchronize the changes.
          </p>
          <p>
            SetParams is called when a new value is assigned to the <var>Position</var>, <var>Min</var>, <var>Max</var>, or <var>PageSize</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.Position"/>
          <link id="TCustomScrollBar.Min"/>
          <link id="TCustomScrollBar.Max"/>
          <link id="TCustomScrollBar.PageSize"/>
          <link id="TCustomScrollBar.Change"/>
          <link id="TCustomScrollBar.OnChange"/>
          <link id="TScrollInfo"/>
        </seealso>
      </element>
      <element name="TCustomScrollBar.SetParams.APosition">
        <short>Value applied to the scrollbar position</short>
      </element>
      <element name="TCustomScrollBar.SetParams.AMin">
        <short>Value applied to the scrollbar minimum value</short>
      </element>
      <element name="TCustomScrollBar.SetParams.AMax">
        <short>Value applied to the scrollbar maximum value</short>
      </element>
      <element name="TCustomScrollBar.SetParams.APageSize">
        <short>Value applied to the scrollbar page size</short>
      </element>

      <element name="TCustomScrollBar.Kind">
        <short>Contains the scrollbar orientation, horizontal or vertical</short>
        <descr>
          <p>
            <var>Kind</var> is a <var>TScrollBarKind</var> property which indicates the orientation for the scrollbar.
          </p>
          <p>
            Setting a new value for the property causes the <var>Constraints</var> for the control to be updated with values from the widgetset class. The widgetset class is also notified of the new value for the property. <var>SetBounds</var> is called to refresh the <var>Width</var> and <var>Height</var> for the control.
          </p>
          <p>
            The default value for the property is <var>sbHorizontal</var>.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TControl.Constraints"/>
          <link id="#LCL.Controls.TControl.Width"/>
          <link id="#LCL.Controls.TControl.Height"/>
          <link id="#LCL.Controls.TWinControl.SetBounds"/>
          <link id="TScrollBarKind"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.LargeChange">
        <short>The distance to scroll on an click beneath the slider</short>
        <descr>
          <p>
            A large change is produced by clicks on the blank area above or below the slider; it is rather analogous to the Page Down or Page Up functions of the Keyboard, and is typically set up to move the slider and the control contents by a full page (window size).
          </p>
          <p>
            Use SmallChange for the value applied when the Up or Down arrows are clicked, or when one of the cursor keys is pressed to navigate in the associated control.
          </p>
        </descr>
      </element>

      <element name="TCustomScrollBar.Max">
        <short>The maximum value for the bottom or rightmost position depending on orientation</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomScrollBar.Min">
        <short>The minimum value for the top or leftmost position depending on orientation</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomScrollBar.PageSize">
        <short>The size of the slider relative to the total scroll range</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomScrollBar.Position">
        <short>The position of the slider in the scrollbar</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomScrollBar.SmallChange">
        <short>
          The distance to scroll when the up or down button is clicked
        </short>
        <descr>
          <p>
            A small change occurs when the up or down buttons are clicked, or by up/down keyboard commands. It is typically used for scrolling by a few pixels, or by a single row or column of text.
          </p>
          <p>
            Use LargeChange for the value applied when clicking the thumb in the scrollbar,  or when using the Home or End keys to navigate in the associated control.
          </p>
        </descr>
      </element>

      <element name="TCustomScrollBar.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>

      <element name="TCustomScrollBar.OnChange">
        <short>Event handler signalled when the value in Position, Min, Max, or PageSize is changed</short>
        <descr>
          <p>
            <var>OnChange</var> is a <var>TNotifyEvent</var> property which contains an event handler signalled when scroll information is updated in the control. OnChange is signalled (when assigned) from the Change method, and occurs when the value in Position, Min, Max, or PageSize is changed using SetParams.
          </p>
          <p>
            Use the OnScroll event handler to respond to events signalled for control messages dispatched to the Scroll method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.Position"/>
          <link id="TCustomScrollBar.Min"/>
          <link id="TCustomScrollBar.Max"/>
          <link id="TCustomScrollBar.PageSize"/>
          <link id="TCustomScrollBar.Change"/>
          <link id="TCustomScrollBar.SetParams"/>
          <link id="TCustomScrollBar.OnScroll"/>
        </seealso>
      </element>

      <element name="TCustomScrollBar.OnScroll">
        <short>Event handler signalled when scrollbar messages are applied</short>
        <descr>
          <p>
            <var>OnScroll</var> is a <var>TScrollEvent</var> property which provides an event handler signalled when the position for the scrollbar has been changed.
          </p>
          <p>
            <var>Sender</var> contains the scrollbar for the event.
          </p>
          <p>
            <var>ScrollCode</var> contains the scroll command constant for the operation.
          </p>
          <p>
            <var>ScrollPos</var> contains the new position for the scrollbar when the operation  is completed. The event handler can be used to override the value in ScrollPos before it is applied to the Position property in the class instance.
          </p>
          <p>
            OnScroll is signalled (when assigned) from the <var>Scroll</var> method, and occurs when control messages, like CNHScroll and CNVScroll,  are processed and applied.
          </p>
          <p>
            Use the <var>OnChange</var> event to respond to programmatic changes to property values in the scrollbar.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.Position"/>
          <link id="TCustomScrollBar.Scroll"/>
          <link id="TCustomScrollBar.OnChange"/>
          <link id="TScrollEvent"/>
        </seealso>
      </element>

      <element name="TScrollBar">
        <short>
          A control that allows the user to scroll the content of an associated control by moving a slider
        </short>
        <descr>
          <p>
            A control that allows the user to scroll the content of a window, by moving a slider.
          </p>
          <p>
            It appears as a long rectangular track bar, within which a smaller contrasting block or slider can move up and down (or from side to side in a horizontal ScrollBar). It has small triangular indicators or pointers on one or both ends of the bar, depending on the widgetset.
          </p>
          <p>
            Clicking with the mouse on one of the pointers moves the slider a small distance (<var>SmallChange</var>) in the specified direction. Clicking with the mouse in the blank area of the scrollbar above or below the slider makes the slider move by a larger increment (<var>LargeChange</var>).
          </p>
          <p>
            The slider can also be moved by clicking on it with the mouse, and holding down the button while moving the mouse. The slider then follows the mouse until the button is released.
          </p>
          <p>
            If the mouse has a scrollwheel, the slider also can be moved by rotating the wheel.
          </p>
          <p>
            The arrow keys or the Page Up/Page Down keys on the keyboard can be used to move the slider, too.
          </p>
          <p>
            The location of the slider along the track is held in the <var>Position</var> property. It's the programmer's responsibility to ensure that the content of the window is scrolled to the new Position of the scrollbar.
          </p>
        </descr>
        <seealso>
          <link id="TCustomScrollBar.OnChange"/>
          <link id="HowToUseStdCtrls"/>
        </seealso>
      </element>

      <element name="TScrollBar.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TScrollBar.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TScrollBar.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TScrollBar.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TScrollBar.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TScrollBar.Ctl3D" link="#LCL.Controls.TControl.Ctl3D"/>
      <element name="TScrollBar.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TScrollBar.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TScrollBar.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TScrollBar.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TScrollBar.Kind" link="#LCL.StdCtrls.TCustomScrollBar.Kind"/>
      <element name="TScrollBar.LargeChange" link="#LCL.StdCtrls.TCustomScrollBar.LargeChange"/>
      <element name="TScrollBar.Max" link="#LCL.StdCtrls.TCustomScrollBar.Max"/>
      <element name="TScrollBar.Min" link="#LCL.StdCtrls.TCustomScrollBar.Min"/>
      <element name="TScrollBar.OnChange" link="#LCL.StdCtrls.TCustomScrollBar.OnChange"/>
      <element name="TScrollBar.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TScrollBar.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TScrollBar.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TScrollBar.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TScrollBar.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TScrollBar.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TScrollBar.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TScrollBar.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TScrollBar.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TScrollBar.OnScroll" link="#LCL.StdCtrls.TCustomScrollBar.OnScroll"/>
      <element name="TScrollBar.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TScrollBar.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TScrollBar.PageSize" link="#LCL.StdCtrls.TCustomScrollBar.PageSize"/>
      <element name="TScrollBar.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TScrollBar.ParentCtl3D" link="#LCL.Controls.TWinControl.ParentCtl3D"/>
      <element name="TScrollBar.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TScrollBar.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TScrollBar.Position" link="#LCL.StdCtrls.TCustomScrollBar.Position"/>
      <element name="TScrollBar.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TScrollBar.SmallChange" link="#LCL.StdCtrls.TCustomScrollBar.SmallChange"/>
      <element name="TScrollBar.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TScrollBar.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TScrollBar.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TCustomGroupBox">
        <short>
          The base class for <var>TGroupBox</var>, <var>TRadioGroup</var> and <var>TCheckGroup</var>
        </short>
        <descr>
          <p>
            <var>TCustomGroupBox</var> is a visual component used to organize related controls into a group. It acts a container. TCustomGroupBox is the base class for <var>TGroupBox</var>, <var>TRadioGroup</var> and <var>TCheckGroup</var>. Do not create instances of TCustomGroupBox; use one of the descendent classes.
          </p>
        </descr>
        <seealso>
          <link id="TGroupBox"/>
          <link id="TRadioGroup"/>
          <link id="TCheckGroup"/>
        </seealso>
      </element>

      <element name="TCustomGroupBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomGroupBox.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize"/>
      <element name="TCustomGroupBox.GetControlClassDefaultSize.Result">
        <short>Default size for new instances of the class</short>
      </element>

      <element name="TCustomGroupBox.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short/>
        <descr>
          <p>
            <var>CreateParams</var> is overridden in <var>TCustomGroupBox</var> to ensure that the <var>Style</var> information in <var>Params</var> is updated to include the value <var>BS_GROUPBOX</var>.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateParams"/>
          <link id="#LCL.LCLType.TCreateParams.Style"/>
          <link id="#LCL.LCLType.BS_GROUPBOX"/>
        </seealso>
      </element>
      <element name="TCustomGroupBox.CreateParams.Params">
        <short/>
      </element>

      <element name="TCustomGroupBox.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. It calls the inherited constructor on entry to the method. Create ensures that the component style is set to the value <var>csGroupBox</var>, and includes the value <var>csAcceptsControls</var> in the <var>ControlStyle</var> property. Create calls <var>SetInitialBounds</var> to resize the control using the values returned from <var>GetControlClassDefaultSize</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGroupBox.GetControlClassDefaultSize"/>
          <link id="#LCL.Controls.TControl.ControlStyle"/>
          <link id="#LCL.Controls.TControl.SetInitialBounds"/>
        </seealso>
      </element>
      <element name="TCustomGroupBox.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TGroupBox">
        <short>
          A container that allows a number of objects to be grouped physically and conceptually on a form
        </short>
        <descr>
          <p>
            <var>TGroupBox</var> is a <var>TCustomGroupBox</var> descendant which implements a visual component used to organize related controls into a group. It acts as a container for controls added to the component, and is assigned as the parent for each control.
          </p>
          <p>
            TGroupBox sets the visibility for properties defined in ancestor classes.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TCustomGroupBox"/>
        </seealso>
      </element>

      <element name="TGroupBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TGroupBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TGroupBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TGroupBox.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TGroupBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>

      <element name="TGroupBox.Caption" link="#LCL.Controls.TControl.Caption">
        <short>The text displayed in the border around the box</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TGroupBox.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TGroupBox.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TGroupBox.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TGroupBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TGroupBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TGroupBox.Ctl3D" link="#LCL.Controls.TControl.Ctl3D"/>
      <element name="TGroupBox.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TGroupBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TGroupBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TGroupBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TGroupBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TGroupBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TGroupBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TGroupBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TGroupBox.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TGroupBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TGroupBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TGroupBox.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TGroupBox.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TGroupBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TGroupBox.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TGroupBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TGroupBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TGroupBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TGroupBox.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TGroupBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TGroupBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TGroupBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TGroupBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TGroupBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TGroupBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TGroupBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TGroupBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TGroupBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TGroupBox.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TGroupBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TGroupBox.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TGroupBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TGroupBox.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TGroupBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TGroupBox.ParentCtl3D" link="#LCL.Controls.TWinControl.ParentCtl3D"/>
      <element name="TGroupBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TGroupBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TGroupBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TGroupBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TGroupBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TGroupBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TGroupBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TEmulatedTextHintStatus">
        <short>Status values for an emulated TextHint display in a control</short>
        <descr>
          <p>
            <var>TEmulatedTextHintStatus</var> is an enumerated type with values which indicate the status for an emulated TextHint display in a control. TEmulatedTextHintStatus is the type used for the <var>EmulatedTextHintStatus</var> property in both <var>TCustomComboBox</var> and <var>TCustomEdit</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.EmulatedTextHintStatus"/>
          <link id="TCustomComboBox.EmulatedTextHintStatus"/>
        </seealso>
      </element>
      <element name="TEmulatedTextHintStatus.thsHidden">
        <short>An emulated TextHint not currently displayed for the control.</short>
      </element>
      <element name="TEmulatedTextHintStatus.thsShowing">
        <short>
          An emulated TextHint is currently being shown for the control. The value for control has been temporarily set to the value in TextHint.
        </short>
      </element>
      <element name="TEmulatedTextHintStatus.thsChanging">
        <short>
          The emulated TextHint is being displayed. Occurs while the HintFont is being created, and the hint text value and password character are passed to the widgetset class. Changes to thsShowing when the actions have been completed.
          </short>
      </element>

      <element name="TComboBoxAutoCompleteTextOption">
        <short>
          Defines the behavior of the <var>AutoComplete</var> feature in a combo-box control
        </short>
        <descr>
          <p>
            <var>TComboBoxAutoCompleteTextOption</var> is an enumerated type with values which control the auto-completion features and behaviors in combo-box controls. Values from the enumeration are stored in the <var>TComboBoxAutoCompleteText</var> type used in the <var>AutoCompleteText</var> property in <var>TCustomComboBox</var> and descendent classes.
          </p>
        </descr>
        <seealso>
          <link id="TComboBoxAutoCompleteText"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
        </seealso>
      </element>
      <element name="TComboBoxAutoCompleteTextOption.cbactEnabled">
        <short>Enable Auto-Completion features.</short>
      </element>
      <element name="TComboBoxAutoCompleteTextOption.cbactEndOfLineComplete">
        <short>Perform Auto-Complete only when cursor is at the end of the string.</short>
      </element>
      <element name="TComboBoxAutoCompleteTextOption.cbactRetainPrefixCase">
        <short>
          Retains the case of characters user has typed. This option has no effect if cbactEndOfLineComplete is not set.
        </short>
      </element>
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchCaseSensitive">
        <short>Search for the completion string with case sensitivity.</short>
      </element>
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchAscending">
        <short>
          Search completion strings in ascending order when set. Otherwise, search in descending order.
        </short>
      </element>

      <element name="TComboBoxAutoCompleteText" link="TComboBoxAutoCompleteTextOption">
        <short>Set of <var>TComboBoxAutoCompleteTextOption</var> values</short>
        <descr>
          <p>
            <var>TComboBoxAutoCompleteText</var> is a set type used to store zero (0) or more values from the <var>TComboBoxAutoCompleteTextOption</var> enumeration. TComboBoxAutoCompleteText is the type used to implement the <var>AutoCompleteText</var> property in <var>TCustomComboBox</var> and descendent classes. It is also the type used for the <var>DefaultComboBoxAutoCompleteText</var> constant which defines the default values used in combo-box controls.
          </p>
        </descr>
        <seealso>
          <link id="TComboBoxAutoCompleteTextOption"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="DefaultComboBoxAutoCompleteText"/>
        </seealso>
      </element>

      <element name="DefaultComboBoxAutoCompleteText">
        <short>Default values for the AutoCompleteText property in combo-box controls</short>
        <descr>
          <p>
            <var>DefaultComboBoxAutoCompleteText</var> is a constant which contains the set of default values used in the <var>AutoCompleteText</var> property in combo-box controls. DefaultComboBoxAutoCompleteText is assigned to the property in the constructor for the class instance.
          </p>
          <p>
            DefaultComboBoxAutoCompleteText contains the following values from the <var>TComboBoxAutoCompleteTextOption</var> enumeration:
          </p>
          <ul>
            <li>cbactEndOfLineComplete</li>
            <li>cbactSearchAscending</li>
          </ul>
        </descr>
        <seealso>
          <link id="TComboBoxAutoCompleteTextOption"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="TCustomComboBox.Create"/>
        </seealso>
      </element>

      <element name="TComboBoxStyle">
        <short>The display style available for combo-box controls</short>
        <descr>
          <p>
            <var>TComboBoxStyle</var> is an enumerated type with values which control the display style for combo-box controls. TComboBoxStyle is the type used for the <var>Style</var> property in <var>TCustomComboBox</var> and descendent classes.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
        </seealso>
      </element>
      <element name="TComboBoxStyle.csDropDown">
        <short>
          The combo-box has an edit control and a button to open and close the drop-down list. This is the default value used for the control.
        </short>
      </element>
      <element name="TComboBoxStyle.csSimple">
        <short>
          The combo-box has an edit control and a list box which is always visible.
        </short>
      </element>
      <element name="TComboBoxStyle.csDropDownList">
        <short>
          The combo-box has a drop-down list for selecting an entry. The selected value is displayed like a label and is not editable.
        </short>
      </element>
      <element name="TComboBoxStyle.csOwnerDrawFixed">
        <short>
          Similar to csDropDownList, but is owner-drawn with a fixed height for items in the list.
        </short>
      </element>
      <element name="TComboBoxStyle.csOwnerDrawVariable">
        <short>
          The drop-down list elements are owner-drawn and can have a variable height for items in the list.
        </short>
      </element>

      <element name="TComboBoxStyleHelper">
        <short>Helper for the TComboBoxStyle type</short>
        <descr>
          <p>
            <var>TComboBoxStyleHelper</var> is a type helper for <var>TComboBoxStyle</var>. TComboBoxStyleHelper provides convenience methods used to examine, adjust, or translate values in the TComboBoxStyle enumeration.
          </p>
          <p>
            For example:
          </p>
          <code>
  // does the style include an edit box?
  if AComboBox.Style.HasEditBox then DoSomething;

  // does the style use owner-draw?
  if AComboBox.Style.IsOwnerDrawn then DoSomething;

  // does the style use variable height items?
  if AComboBox.Style.IsVariable then DoSomething;

  // toggle the edit box off for the current style
  AComboBox.Style := AComboBox.Style.SetEditBox(False);
          </code>
        </descr>
        <seealso>
          <link id="TComboBoxStyle"/>
          <link id="TCustomComboBox.Style"/>
        </seealso>
      </element>

      <element name="TComboBoxStyleHelper.HasEditBox">
        <short>Determines if the style includes an edit box</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TComboBoxStyleHelper.HasEditBox.Result">
        <short>True if an selected item value is editable</short>
      </element>

      <element name="TComboBoxStyleHelper.SetEditBox">
        <short>Enables or disables an edit box according to the current style</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TComboBoxStyleHelper.SetEditBox.Result">
        <short>Style values after adding or removing the edit box</short>
      </element>
      <element name="TComboBoxStyleHelper.SetEditBox.AHasEditBox">
        <short>True enables the edit box; False disables the edit box</short>
      </element>

      <element name="TComboBoxStyleHelper.IsOwnerDrawn">
        <short>Indicates if the combo-box control is owner-drawn</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TComboBoxStyleHelper.IsOwnerDrawn.Result">
        <short>True if the style includes an owner-drawn option</short>
      </element>

      <element name="TComboBoxStyleHelper.IsVariable">
        <short>Indicates if list items can have a variable height in the combo-box control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TComboBoxStyleHelper.IsVariable.Result">
        <short>True when the option is included for variable height list items</short>
      </element>

      <element name="TOwnerDrawState" link="#LCL.LCLType.TOwnerDrawState"/>

      <element name="TDrawItemEvent">
        <short>
          Specifies an event handler used to paint a single item in an owner-drawn list box or combo-box
        </short>
        <descr>
          <p>
            <var>TDrawItemEvent</var> is an object procedure type which specifies an event handler signalled to paint an single item in a owner-drawn list box or combo-box control. Arguments passed to the event handler identify the control, the index for the list item, the canvas coordinates, and the drawing state for the operation. The event handler is responsible for rendering the list item to its control in its entirety when the control uses owner-drawn style settings.
          </p>
          <p>
            TDrawItemEvent is the type used to implement the <var>OnDrawItem</var> property in <var>TCustomComboBox</var> and <var>TCustomListBox</var>. An application must implement and assign an object procedure using the signature for the handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnDrawItem"/>
          <link id="TCustomListBox.OnDrawItem"/>
        </seealso>
      </element>
      <element name="TDrawItemEvent.Control">
        <short>The control for the owner-drawn operation</short>
      </element>
      <element name="TDrawItemEvent.Index">
        <short>Index of the list item to draw</short>
      </element>
      <element name="TDrawItemEvent.ARect">
        <short>The Canvas rectangle for the list item</short>
      </element>
      <element name="TDrawItemEvent.State">
        <short>Flags describing the drawing state for the list item</short>
      </element>

      <element name="TMeasureItemEvent">
        <short>
          Specifies an event handler used to get the Height for a single item in an owner-drawn list box or combo-box
        </short>
        <descr>
          <p>
            <var>TMeasureItemEvent</var> is an object procedure type which specifies an event handler signalled to get the height for a single item in an owner-drawn list box or combo-box control. Arguments passed to the handler include the control for the event notification, the index position for the item measured in the handler, and the derived height for the item.
          </p>
          <p>
            TMeasureItemEvent is the type used for the <var>OnMeasureItem</var> property in <var>TCustomComboBox</var> and <var>TCustomListBox</var>. An application must implement and assign a procedure using the signature for the handler to respond to the event notification. The handler should account for variable height items when enabled in settings for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnMeasureItem"/>
          <link id="TCustomListBox.OnMeasureItem"/>
        </seealso>
      </element>
      <element name="TMeasureItemEvent.Control">
        <short>The list box or combo-box control</short>
      </element>
      <element name="TMeasureItemEvent.Index">
        <short>Index of the list item to measure</short>
      </element>
      <element name="TMeasureItemEvent.AHeight">
        <short>Height of the list item in pixels</short>
      </element>

      <element name="TCustomComboBox">
        <short>The base class for combo-box components</short>
        <descr>
          <p>
            <var>TCustomComboBox</var> is a <var>TWinControl</var> descendant which implements the base class for combo-box components in the LCL (Lazarus Component Library).
          </p>
          <p>
            A combo-box is visually represented as an edit control and a scrollable list of items which can be selected. The list can be always visible, or opened when needed using a drop-down indicator. In addition, the items in the control be drawn using using the built-in mechanisms for the widgetset class or using an owner-drawn style.
          </p>
          <p>
            Despite similarities in appearance to <var>TCustomEdit</var> and <var>TCustomList</var>, the class inherits no properties from these classes (Delphi compatible).
          </p>
          <p>
            Use the <var>Style</var> property to control the display style and drawing mechanism enabled for Items in the control.
          </p>
          <p>
            Use properties like <var>AutoComplete</var>, <var>AutoCompleteText</var>, and <var>AutoDropDown</var> to control the behavior of the edit field or drop-down list in the control.
          </p>
          <p>
            Use <var>Items</var> to access existing list items defined the control. Use <var>AddItem</var> or <var>AddHistoryItem</var> to add entries to the list items in the control. Use <var>OnGetItems</var> to dynamically populate the Items in the control when the drop-down list is displayed.
          </p>
          <p>
            Do not create instances of TCustomComboBox. Use one of the descendent classes, like <var>TComboBox</var> or <var>TComboBoxEx</var>.
          </p>
        </descr>
      </element>

      <element name="TCustomComboBox.FArrowKeysTraverseList"/>
      <element name="TCustomComboBox.FAutoCompleteText"/>
      <element name="TCustomComboBox.FAutoSelect"/>
      <element name="TCustomComboBox.FAutoSelected"/>
      <element name="TCustomComboBox.FAutoDropDown"/>
      <element name="TCustomComboBox.FCanvas"/>
      <element name="TCustomComboBox.FCharCase"/>
      <element name="TCustomComboBox.FDropDownCount"/>
      <element name="TCustomComboBox.FDroppedDown"/>
      <element name="TCustomComboBox.FDroppingDown"/>
      <element name="TCustomComboBox.FEditingDone"/>
      <element name="TCustomComboBox.FEmulatedTextHintStatus"/>
      <element name="TCustomComboBox.FItemHeight"/>
      <element name="TCustomComboBox.FItemIndex"/>
      <element name="TCustomComboBox.FItemWidth"/>
      <element name="TCustomComboBox.FItems"/>
      <element name="TCustomComboBox.FMaxLength"/>
      <element name="TCustomComboBox.FOnChange"/>
      <element name="TCustomComboBox.FOnCloseUp"/>
      <element name="TCustomComboBox.FOnDrawItem"/>
      <element name="TCustomComboBox.FOnDropDown"/>
      <element name="TCustomComboBox.FOnGetItems"/>
      <element name="TCustomComboBox.FOnMeasureItem"/>
      <element name="TCustomComboBox.FOnSelect"/>
      <element name="TCustomComboBox.FReadOnly"/>

      <element name="TCustomComboBox.FReturnArrowState">
        <short>Used internally, to return the state of arrow keys from temporary change</short>
      </element>

      <element name="TCustomComboBox.FSelLength"/>
      <element name="TCustomComboBox.FSelStart"/>
      <element name="TCustomComboBox.FSorted"/>
      <element name="TCustomComboBox.FStyle"/>
      <element name="TCustomComboBox.FTextHint"/>

      <element name="TCustomComboBox.GetAutoComplete">
        <short>Gets the value for the AutoComplete property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.AutoComplete"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetAutoComplete.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetDroppedDown">
        <short>Gets the value for the DroppedDown property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.DroppedDown"/>
         </seealso>
      </element>
      <element name="TCustomComboBox.GetDroppedDown.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetItemWidth">
        <short>Gets the value for the ItemWidth property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.ItemWidth"/>
         </seealso>
      </element>
      <element name="TCustomComboBox.GetItemWidth.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.SetAutoComplete">
        <short>Sets the value for the AutoComplete property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.AutoComplete"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetAutoComplete.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetArrowKeysTraverseList">
        <short>Sets the value for the ArrowKeysTraverseList property</short>
        <descr/>
        <seealso>
          <link id="TCustomComboBox.ArrowKeysTraverseList"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetArrowKeysTraverseList.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetItemWidth">
        <short>Sets the value for the ItemWidth property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.ItemWidth"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetItemWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetCharCase">
        <short>Sets the value for the CharCase property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.CharCase"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetCharCase.eccCharCase">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetReadOnly">
        <short>Sets the value for the ReadOnly property</short>
        <descr/>
        <seealso>
          <link id="TCustomComboBox.ReadOnly"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetReadOnly.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetTextHint">
        <short>Sets the value for the TextHint property</short>
        <descr/>
        <seealso>
          <link id="TCustomComboBox.TextHint"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetTextHint.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.ShowEmulatedTextHintIfYouCan">
        <short>Tries to display an emulated TextHint for the control</short>
        <descr>
          <p>
            <var>ShowEmulatedTextHintIfYouCan</var> is a method which attempts to display an emulated <var>TextHint</var> for the control. ShowEmulatedTextHintIfYouCan calls <var>CanShowEmulatedTextHint</var> to determine if the control requires an emulated TextHint display, and is in a state which allows it. If CanShowEmulatedTextHint returns <b>True</b>, the <var>ShowEmulatedTextHint</var> method is called to display the TextHint.
          </p>
          <p>
            ShowEmulatedTextHintIfYouCan is called from the implementation of the <var>InitializeWnd</var> and <var>WMKillFocus</var> methods, and when a new value is assigned to the TextHint property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.TextHint"/>
          <link id="TCustomComboBox.CanShowEmulatedTextHint"/>
          <link id="TCustomComboBox.ShowEmulatedTextHint"/>
          <link id="TCustomComboBox.WMKillFocus"/>
          <link id="TCustomComboBox.InitializeWnd"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ShowEmulatedTextHint">
        <short>Displays an emulated TextHint for the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomComboBox.HideEmulatedTextHint">
        <short>Hides an emulated TextHint display for the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomComboBox.UpdateSorted">
        <short>Performs actions needed when the Sorted property is changed</short>
        <descr/>
        <seealso>
          <link id="TCustomComboBox.Sorted"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.LMDrawListItem">
        <short>Handler for custom drawing items; calls DrawItem</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.LMDrawListItem.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.LMMeasureItem">
        <short>Determines the height of an item, using MeasureItem in variable owner-draw mode</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.LMMeasureItem.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.LMSelChange">
        <short>Handles selection change messages for the control</short>
        <descr>
          Signals the OnSelect event handler.
        </descr>
        <seealso/>
      </element>
      <element name="TCustomComboBox.LMSelChange.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.CNCommand">
        <short>Invokes the OnDropDown or OnCloseUp handlers</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.CNCommand.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.WMChar">
        <short>Prevents ordinary characters from triggering accelerator keys</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.WMChar.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.WMKillFocus">
        <short>Implements a handler for the LM_KILLFOCUS message</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.WMKillFocus.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.WMSetFocus">
        <short>Implements a handler for the LM_SETFOCUS message</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.WMSetFocus.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomComboBox.CanShowEmulatedTextHint">
        <short>Determines if an emulated TextHint can be displayed for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.CanShowEmulatedTextHint.Result">
        <short>True when emulated TextHints are used, and the control state allows the hint display</short>
      </element>

      <element name="TCustomComboBox.CreateParams" link="#LCL.Controls.TWinControl.CreateParams">
        <short>Updates the specified createion parameters to include additional flags for the control</short>
        <descr>
          <p>
            <var>CreateParams</var> is an overridden method in <var>TCustomComboBox</var>, and calls the inherited method on entry. CreateParams ensures that the style information in <var>Params</var> is updated to include constants needed to represent values in the <var>Style</var> property for the control. The following constants are also included:
          </p>
          <ul>
            <li>WS_VSCROLL</li>
            <li>CBS_AUTOHSCROLL</li>
            <li>CBS_HASSTRINGS</li>
          </ul>
          <p>
            When <var>Sorted</var> is set to <b>True</b>, the value CBS_SORT is also included in the style information in Params.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.Sorted"/>
          <link id="#LCL.Controls.TWinControl.CreateParams"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.CreateParams.Params">
        <short>Creaetion parameters updated in the method</short>
      </element>

      <element name="TCustomComboBox.InitializeWnd" link="#LCL.Controls.TWinControl.InitializeWnd">
        <short>
          Synchronizes the control and its widgetset class instance
        </short>
        <descr>
          <p>
            <var>InitializeWnd</var> is overridden in <b>TCustomComboBox</b> to ensure that the widgetset class and the current class instance are synchronized. InitializeWnd calls the inherited method on entry.
          </p>
          <p>
            InitializeWnd gets the string values for list items stored in the widgetset class instance (when present), and applies them to the <var>Items</var> property. Other property values are forwarded <b>to</b> the widgetset class instance, including:
          </p>
          <ul>
            <li>ArrowKeysTraverseList</li>
            <li>DropDownCount</li>
            <li>ItemIndex</li>
            <li>MaxLength</li>
            <li>ReadOnly</li>
            <li>Style</li>
          </ul>
          <p>
            Values in <var>SelStart</var> and <var>SelLength</var> are re-applied to update the edit box in the control to reflect any changes to property values.
          </p>
          <p>
            InitializeWnd is called from CreateWnd after the Window handle has been allocated, and before any child handles are allocated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.ReadOnly"/>
          <link id="TCustomComboBox.MaxLength"/>
          <link id="TCustomComboBox.DropDownCount"/>
          <link id="TCustomComboBox.ArrowKeysTraverseList"/>
          <link id="#LCL.Controls.TWinControl.InitializeWnd"/>
          <link id="#LCL.Controls.TWinControl.CreateWnd"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd">
        <short>Destroys the handle for the control (and its children)</short>
        <descr>
          <p>
            <var>DestroyWnd</var> is an overridden method in TCustomComboBox used to destroy the handle for the windowed control. This occurs when the control is freed, and when the handle is re-created in the widgetset class. DestroyWnd ensures that values for the ItemIndex and Items properties are retrieved from the widgetset class before it is destroyed or re-created. The value in Sorted is applied to the Items retrieved from the widgetset class.
          </p>
          <p>
            DestroyWnd calls the inherited method prior to exit.
          </p>
        </descr>
        <errors>
          DestroyWnd calls <var>RaiseGDBException</var> to raise a catchable debugger exception if a handle has not been allocated for the control.
        </errors>
        <seealso>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.Sorted"/>
          <link id="#LCL.Controls.TWinControl.DestroyWnd"/>
          <link id="#LCL.LCLProc.RaiseGDBException"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DoEnter" link="#LCL.Controls.TWinControl.DoEnter">
        <short>Updated the control when the Enter key is applied</short>
        <descr>
          <p>
            <var>DoEnter</var> is an overridden method used to update the edit and list box when the <b>Enter</b> or <b>Return</b> key is handled in messages to the control. The inherited method is called to signal the <var>OnEnter</var> event handler (when assigned).
          </p>
          <p>
            DoEnter uses the value in <var>Style</var> to determine if an edit box is enabled for the control. If an edit box is <b>not</b> used, no additional actions are performed in the method.
          </p>
          <p>
            When <var>AutoSelect</var> is enabled, the <var>SelectAll</var> method is called to select the text in the edit box and to locate the entry in the <var>Items</var> for the control. <var>AutoSelected</var> is updated to indicate if <var>SelText</var> matches the value in Text.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelect"/>
          <link id="TCustomComboBox.AutoSelected"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.SelectAll"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.Text"/>
          <link id="#LCL.Controls.TWinControl.DoEnter"/>
          <link id="#LCL.Controls.TWinControl.OnEnter"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DoExit">
        <short>Updates the control when the CM_EXIT control message is handled</short>
        <descr>
          <p>
            <var>DoExit</var> is an overridden method in <var>TCustomComboBox</var> used to perform actions needed when the <b>CM_EXIT</b> control message is handled for the control. DoExit sets the value in <var>AutoSelected</var> to <b>False</b>, and calls the inherited method to signal the <var>OnExit</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelected"/>
          <link id="#LCL.Controls.TWinControl.DoExit"/>
          <link id="#LCL.Controls.TWinControl.OnExit"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DrawItem">
        <short>Draws a list item, using the OnDrawItem handler (when assigned)</short>
        <descr>
          <p>
            <var>DrawItem</var> is a procedure used to draw a list item defined in the <var>Items</var> property. DrawItem is called when the <var>LM_DrawListItem</var> message is handled for the control. Arguments passed to the method include the position in Items for the value drawn, the canvas rectangle where the drawing occurs, and the drawing state for the list item.
          </p>
          <p>
            DrawItem signals the <link id="TCustomComboBox.OnDrawItem">OnDrawItem</link> handler (when assigned) to perform the drawing operation. Otherwise, default painting is performed by filling the background for the Canvas rectangle (if needed) and calling the InternalDrawItem routine.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnDrawItem"/>
          <link id="TDrawItemEvent"/>
          <link id="TOwnerDrawState"/>
          <link id="#RTL.Types.TRect"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.DrawItem.Index">
        <short>The position for the item drawn in the method</short>
      </element>
      <element name="TCustomComboBox.DrawItem.ARect">
        <short>The area to paint on the Canvas</short>
      </element>
      <element name="TCustomComboBox.DrawItem.State">
        <short>The drawing state for the item (selected...)</short>
      </element>

      <element name="TCustomComboBox.KeyUpAfterInterface">
        <short/>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>
      <element name="TCustomComboBox.KeyUpAfterInterface.Key">
        <short/>
      </element>
      <element name="TCustomComboBox.KeyUpAfterInterface.Shift">
        <short/>
      </element>

      <element name="TCustomComboBox.MeasureItem">
        <short>Gets the height for an item in the drop-down list</short>
        <descr>
          <p>
            <var>MeasureItem</var> is a procedure used to get the height for an item in the drop-down list for the control.
          </p>
          <p>
            MeasureItem is called when the <b>LM_MeasureItem</b> message is handled for the control. The value in <var>ItemHeight</var> has already been updated in the message handler, and is used for a list box <var>Style</var> that has a fixed item height. MeasureItem is called from the message handler when the Style uses a variable item height. The derived item height is stored in the <var>ItemHeight</var> property when it is a non-zero positive value.
          </p>
          <p>
            MeasureItem signals the <var>OnMeasureItem</var> event handler (when assigned) to calculate the height for the specified item. The value in the <var>Index</var> argument determines the string value in <var>Items</var> used for the calculation. <var>TheHeight</var> is updated with the derived height for the list box item. An application must implement the OnMeasureItem event handler to calculate the height for variable height items in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnMeasureItem"/>
          <link id="TCustomComboBox.ItemWidth"/>
          <link id="TCustomComboBox.ItemHeight"/>
          <link id="TCustomComboBox.Style"/>
          <link id="#LCL.LMessages.TLMMeasureItem"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.MeasureItem.Index">
        <short>The index of the item whose height is required</short>
      </element>
      <element name="TCustomComboBox.MeasureItem.TheHeight">
        <short>The height of the item, in pixels, calculated in the OnMeasureItem handler</short>
      </element>

      <element name="TCustomComboBox.GetControlClassDefaultSize"/>
      <element name="TCustomComboBox.GetControlClassDefaultSize.Result">
        <short>Default size (bounds) for the new class instance</short>
      </element>

      <element name="TCustomComboBox.LMChanged">
        <short>Handles the LM_CHANGED message for the control</short>
        <descr>
          <p>
            <var>LMChanged</var> is a procedure used to handle a <b>LM_CHANGED</b> message received for the control. LMChanged occurs when the widgetset class calls the LCLSendChangeMsg routine for the control. LMChanged calls the <var>Change</var> method to perform the control message and to signal the <var>OnChange</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Change"/>
          <link id="TCustomComboBox.OnChange"/>
          <link id="#LCL.Controls.TControl.Perform"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.LMChanged.Msg">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomComboBox.CMWantSpecialKey">
        <short/>
        <descr/>
        <seealso/>
        <notes><note>??? Calls an inherited method that doeas not exist.</note></notes>
      </element>
      <element name="TCustomComboBox.CMWantSpecialKey.Message">
        <short/>
      </element>

      <element name="TCustomComboBox.Change">
        <short>Invokes the OnChange handler, signalling a change in the edit box</short>
        <descr>
          <p>
            <var>Change</var> is a procedure used to perform actions needed when the value for the control is changed. Change is called from the <var>LMChanged</var> method used to process the change notification message. Change calls the <var>Changed</var> method, inherited from TControl, to <var>Perform</var> the control message. The <var>OnChange</var> event handler is signalled (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.LMChanged"/>
          <link id="TCustomComboBox.OnChange"/>
          <link id="#LCL.Controls.TControl.Changed"/>
          <link id="#LCL.Controls.TControl.Perform"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.Select">
        <short>Signals the <var>OnSelect</var> event handler when ItemIndex is changed</short>
        <descr>
          <p>
            <var>Select</var> is a procedure called when the item selection in the drop-down list for the control has changed. This can happen when text is entered and auto-completion is enabled, or when a new value is selected from the drop-down list.
          </p>
          <p>
            Select signals the <var>OnSelect</var> event handler (when assigned). For Delphi compatibility, the event handler is <b>not</b> signalled when <var>ItemIndex</var> contains <b>-1</b> (<var>Text</var> is not located in the <var>Items</var> for the control).
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnSelect"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.AutoComplete"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelLength"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DropDown">
        <short>Signals the <var>OnDropDown</var> event handler</short>
        <descr>
          <p>
            <var>DropDown</var> is a procedure called whenever the drop-down list is displayed. DropDown is called when a <b>CN_Command</b> message with a <b>CBN_DROPDOWN</b> notification code is handled for the control. DropDown signals the <var>OnDropDown</var> event handler (when assigned).
          </p>
          <p>
            Use <var>DroppedDown</var> to determine if the drop-down list has been displayed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.CloseUp"/>
          <link id="TCustomComboBox.DroppedDown"/>
          <link id="TCustomComboBox.OnDropDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.GetItems" link="TCustomComboBox.OnGetItems">
        <short>Signals the <var>OnGetItems</var> event handler</short>
        <descr>
          <p>
            <var>GetItems</var> is a procedure used to dynamically populate the values stored in the <var>Items</var> property. GetItems signals the <var>OnGetItems</var> event handler (when assigned) to perform actions needed to fill the Items property. GetItems is called from the <var>IntfGetItems</var> method executed when the widgetset class makes its drop-down list visible.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.OnGetItems"/>
          <link id="TCustomComboBox.IntfGetItems"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.SetItems">
        <short>Sets the value for the Items property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.Items"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetItems.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.CloseUp">
        <short>Called when the drop-down list is closed</short>
        <descr>
          <p>
            <var>CloseUp</var> is a method called whenever the drop-down list for the control is closed. CloseUp is called when a <b>CN_Command</b> message with a <b>CBN_CLOSEUP</b> notification code is received in the control.
          </p>
          <p>
            CloseUp does not perform any actions in the method at design-time, when the component is being loaded using LCL streaming, or when the control is freed.
          </p>
          <p>
            CloseUp signals the <var>OnEditingDone</var> event handler when an edit box is enabled in the <var>Style</var> property in the control. The <var>OnCloseUp</var> event handler is signalled (when assigned).
          </p>
          <p>
            When <var>AutoSelect</var> is enabled, the <var>SelectAll</var> method is called and the <var>AutoSelected</var> property is updated.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnEditingDone"/>
          <link id="TCustomComboBox.OnCloseUp"/>
          <link id="TCustomComboBox.DroppedDown"/>
          <link id="TCustomComboBox.DropDown"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.SelectAll"/>
          <link id="TCustomComboBox.AutoSelect"/>
          <link id="TCustomComboBox.AutoSelected"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AdjustDropDown">
        <short>Adjusts the extent for the drop-down list</short>
        <descr>
          <p>
            <var>AdjustDropDown</var> is used to adjust the bounds for the drop-list list in the control. AdjustDropDown is called when the drop-list becomes visible, and when the value in the <var>ItemWidth</var> property is changed.
          </p>
          <p>
            AdjustDropDown does not perform any actions in the method if a handle has not been assigned for the control.
          </p>
          <p>
            AdjustDropDown ensures that the value in <var>DropDownCount</var> is applied (when needed) to the drop-down list for the control. The minimum height and width for the list is calculated using the ItemWidth and <var>ItemHeight</var> properties. The dimensions are passed to the widgetset class using the SetComboMinDropDownSize routine in the LCL interface.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.ItemWidth"/>
          <link id="TCustomComboBox.ItemHeight"/>
          <link id="TCustomComboBox.Count"/>
          <link id="TCustomComboBox.DropDownCount"/>
          <link id="TCustomComboBox.DropDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DoAutoAdjustLayout" link="#lcl.controls.TControl.DoAutoAdjustLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.DoAutoAdjustLayout.AMode">
        <short/>
      </element>
      <element name="TCustomComboBox.DoAutoAdjustLayout.AXProportion">
        <short/>
      </element>
      <element name="TCustomComboBox.DoAutoAdjustLayout.AYProportion">
        <short/>
      </element>

      <element name="TCustomComboBox.GetItemCount">
        <short>Returns the number of items defined in the drop-down list</short>
        <descr>
          <p>
            <var>GetItemCount</var> is an <var>Integer</var> function used to get the number of values stored in the <var>Items</var> for the control. It is a convenience method, and is equivalent to reading the value for the <var>Count</var> property in <var>Items</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetItemCount.Result">
        <short>The number of Items defined in the control</short>
      </element>

      <element name="TCustomComboBox.GetItemHeight">
        <short>Gets the value for the ItemHeight property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.ItemHeight"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetItemHeight.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetSelLength">
        <short>Gets the value for the SelLength property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.SelLength"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetSelLength.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetSelStart">
        <short>Gets the value for the SelStart property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.SelStart"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetSelStart.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetSelText">
        <short>Gets the value for the SelText property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.SelText"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetSelText.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetItemIndex">
        <short>Gets the value for the ItemIndex property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.ItemIndex"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetItemIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.GetMaxLength">
        <short>Gets the value for the MaxLength property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.MaxLength"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.GetMaxLength.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomComboBox.SetDropDownCount">
        <short>Sets the value for the DropDownCount property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.DropDownCount"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetDropDownCount.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetDroppedDown">
        <short>Sets the value for the DroppedDown property</short>
        <descr/>
        <seealso>
           <link id="TCustomComboBox.DroppedDown"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SetDroppedDown.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetItemHeight" link="TCustomComboBox.ItemHeight">
        <short>Sets the value for the ItemHeight property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetItemHeight.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetItemIndex" link="TCustomComboBox.ItemIndex">
        <short>Sets the value for the ItemIndex property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetItemIndex.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetMaxLength" link="TCustomComboBox.MaxLength">
        <short>Sets the value for the MaxLength property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetMaxLength.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetSelLength" link="TCustomComboBox.SelLength">
        <short>Sets the value for the SelLength property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetSelLength.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetSelStart" link="TCustomComboBox.SelStart">
        <short>Sets the value for the SelStart property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetSelStart.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetSelText" link="TCustomComboBox.SelText">
        <short>Sets the value for the SelText property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetSelText.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetSorted" link="TCustomComboBox.Sorted">
        <short>Sets the value for the Sorted property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetSorted.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.SetStyle" link="TCustomComboBox.Style">
        <short>Sets the value for the Style property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.SetStyle.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomComboBox.RealGetText">
        <short>Gets the text/caption for the control</short>
        <descr>
          <p>
            <var>RealGetText</var> is an overridden method in <var>TCustomComboBox</var> which provides additional debugging support in the method. RealGetText ensures that a handle has been allocated for the control and the value in Text is available in the widgetset class prior to calling the inherited method.
          </p>
          <p>
            The return value contains the Caption assigned to the control, or an empty string ('') when the  control handle is not available.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.RealGetText"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.RealGetText.Result">
        <short>Caption for the control, or an empty string</short>
      </element>

      <element name="TCustomComboBox.RealSetText">
        <short>Adjusts ItemIndex for the new value in the edit box</short>
        <descr>
          <p>
            If the text <var>AValue</var> occurs in the list of strings, then the value in <var>Itemindex</var> is updated. Otherwise,  the default action which is to store text as a string rather than performing read-write to a <var>PChar</var> buffer.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TControl.RealSetText"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.RealSetText.AValue">
        <short>The new value in the edit box</short>
      </element>

      <element name="TCustomComboBox.KeyDown" link="#LCL.Controls.TWinControl.KeyDown">
        <short>Filters keys used to traverse the list</short>
        <descr>
          <p>
            <var>KeyDown</var> is an overridden method in <var>TCustomComboBox</var>. KeyDown ensures that keys like Escape, Tab, and Return are handled in the manner needed for the <var>Style</var> in the control. If the values in <var>Key</var> and <var>Shift</var> are not specifically handled in the method, the inherited KeyDown method is called.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.AutoDropDown"/>
          <link id="TCustomComboBox.ArrowKeysTraverseList"/>
          <link id="#LCL.Controls.TWinControl.KeyDown"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.KeyDown.Key">
        <short>The pressed key</short>
      </element>
      <element name="TCustomComboBox.KeyDown.Shift">
        <short>The state of the modifier keys and mouse buttons</short>
      </element>

      <element name="TCustomComboBox.KeyUp" link="#LCL.Controls.TWinControl.KeyUp">
        <short>Handles AutoComplete and AutoSelect for the control</short>
        <descr>
          <p>
            <var>KeyUp</var> is an overridden method in TCustomComboBox, and calls the inherited method on entry.
          </p>
          <p>
            KeyUp ensures that the <b>VK_RETURN</b> key code causes <var>SelectAll</var> to be called when <var>AutoCompletion</var> or <var>AutoSelect</var> is enabled for the control. <var>AutoSelected</var> is set to <b>True</b> when the values in <var>SelText</var> and <var>Text</var> are the same.
          </p>
          <p>
            In addition, alphanumeric key codes are used to perform AutoComplete text location using the options enabled in the <var>AutoCompleteText</var> property. The values in Text, <var>SelStart</var>, and <var>SelLength</var> are updated (when needed) and the <var>Select</var> method is called to reflect the operation.
          </p>
          <p>
            KeyUp is called when <var>TLMKeyUp</var> control messages are processed in the handlers for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelect"/>
          <link id="TCustomComboBox.AutoSelected"/>
          <link id="TCustomComboBox.AutoComplete"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelLength"/>
          <link id="TCustomComboBox.Select"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.KeyUp.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomComboBox.KeyUp.Shift">
        <short>Shift, Alt, or Ctrl modifier for the key code</short>
      </element>

      <element name="TCustomComboBox.UTF8KeyPress" link="TCustomComboBox.KeyPress">
        <short>
          <var>UTF8KeyPress</var> converts character case if required then calls the inherited method
        </short>
        <descr>
          <p>
            <var>UTF8KeyPress</var> is an overridden method, and calls the inherited method on entry. The inherited method emulates a UTF-8-encoded keypress. The UTF8 encoding should be used when there is the possibility that input/output will occur in any language that requires multiple bytes to represent each character, i.e. all languages except English.
          </p>
          <p>
            UTF8KeyPress uses the value in <var>CharCase</var> to determine if the character case for <var>UTF8Key</var> is converted:
          </p>
          <dl>
            <dt>ecNormalCase</dt>
            <dd>No conversion is required.</dd>
            <dt>ecLowerCase</dt>
            <dd>Calls UTF8LowerCase to convert the value in UTF8Key.</dd>
            <dt>ecUpperCase</dt>
            <dd>Calls UTF8UpperCase to convert the value in UTF8Key.</dd>
          </dl>
        </descr>
        <seealso>
          <link id="TCustomComboBox.CharCase"/>
          <link id="#LazUtils.LazUtf8.UTF8LowerCase"/>
          <link id="#LazUtils.LazUtf8.UTF8UpperCase"/>
          <link id="#LCL.Controls.TWinControl.UTF8KeyPress"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.UTF8KeyPress.UTF8Key">
        <short>UTF-8-encoded character examined in the method</short>
      </element>

      <element name="TCustomComboBox.MouseUp">
        <short>Highlights the selected text in the control when the left mouse button is released</short>
        <descr>
          <p>
            <var>MouseUp</var> is an overridden method, and calls the inherited method on entry. MouseUp ensures that the selected text in the control is highlighted when the Left mouse button is released and <var>AutoSelect</var> is enabled. MouseUp calls <var>SelectAll</var> to select the value in the <var>Text</var> property in the edit box for the control. The value in <var>AutoSelected</var> is set to <b>True</b>.
          </p>
          <p>
            No selection is performed in the method when AutoSelect is set to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelect"/>
          <link id="TCustomComboBox.AutoSelected"/>
          <link id="TCustomComboBox.SelectAll"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelLength"/>
          <link id="#LCL.Controls.TControl.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.MouseUp.Button">
        <short>Mouse button for the notification</short>
      </element>
      <element name="TCustomComboBox.MouseUp.Shift">
        <short>Shift, Alt, or Ctrl modifier for the notification</short>
      </element>
      <element name="TCustomComboBox.MouseUp.X">
        <short>Horizontal coordinate for the mouse pointer</short>
      </element>
      <element name="TCustomComboBox.MouseUp.Y">
        <short>Vertical coordinate for the mouse pointer</short>
      </element>

      <element name="TCustomComboBox.SelectItem">
        <short>Selects the list item with the specified text</short>
        <descr>
          <p>
            <var>SelectItem</var> is a <var>Boolean</var> function used to select the list item in the control with the value specified in <var>AnItem</var>. The return value is <b>True</b> when the <var>Items</var> property contains an entry with the value in <var>AnItem</var>.
          </p>
          <p>
            The value in <var>ItemIndex</var> is updated with the ordinal position in Items for the specified value, or <b>-1</b> when AnItem does not exist in Items. When the value in ItemIndex is changed, the <var>Click</var> and <var>Select</var> methods are called to refresh the control display and to signal the <var>OnClick</var> and <var>OnSelect</var> event handlers.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.Select"/>
          <link id="TCustomComboBox.OnSelect"/>
          <link id="#LCL.Controls.TControl.Click"/>
          <link id="#LCL.Controls.TControl.OnClick"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.SelectItem.Result">
        <short>True when a matching item was found and selected</short>
      </element>
      <element name="TCustomComboBox.SelectItem.AnItem">
        <short>The text to find in Items</short>
      </element>

      <element name="TCustomComboBox.ShouldAutoAdjust">
        <short>Indicates if the width and/or height for the control can be adjusted by a layout policy</short>
        <descr>
          <p>
            <var>ShouldAutoAdjust</var> is an overridden method in <var>TCustomComboBox</var>. It sets the values in the <var>AWidth</var> and <var>AHeight</var> parameters to indicate if the control can adjust the bound(s) when a layout policy is appiled to the control. True indicates the value for the property can be adjusted.
          </p>
          <p>
            ShouldAutoAdjust is used in the implementation of the <var>DoAutoAdjustLayout</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.ShouldAutoAdjust"/>
          <link id="TCustomComboBox.DoAutoAdjustLayout"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.ShouldAutoAdjust.AWidth">
        <short>Always set to True in the method</short>
      </element>
      <element name="TCustomComboBox.ShouldAutoAdjust.AHeight">
        <short>True when AutoSize is not enabled for the control</short>
      </element>

      <element name="TCustomComboBox.ItemHeight">
        <short>The default height of an item in the drop-down for the control</short>
        <descr>
          <p>
            <var>ItemHeight</var> is an Integer property which contains the height (in pixels) used when drawing an item in the drop-down list.
          </p>
          <p>
            The value for the property is retrieved from the widgetset class when not already assigned in the class instance, or when using an owner-drawn <var>Style</var>. Setting a new value for ItemHeight calls the <var>SetItemHeight</var> method in the widgetset class for owner-drawn Styles.
          </p>
          <p>
            The property value is updated when the <var>LM_MeasureItem</var> message is handled for the control. When variable height items are enabled in Style, the <var>OnMeasureItem</var> event handler must be implemented to calculate the height for individual value in <var>Items</var>.
          </p>
          <p>
            <var>ItemHeight</var>, <var>ItemWidth</var>, <var>ItemCount</var>, and <var>DropDownCount</var> are used in the <var>AdjustDropDown</var> method to determine the dimensions for the drop-down list in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnMeasureItem"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemCount"/>
          <link id="TCustomComboBox.ItemWidth"/>
          <link id="TCustomComboBox.DropDownCount"/>
          <link id="TCustomComboBox.AdjustDropDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ItemWidth">
        <short>The minimum width of the items in the drop-down list</short>
        <descr>
          <p>
            <var>ItemWidth</var> is an <var>Integer</var> property which contains the minimum number of pixels used when displaying the static or drop-down list for the control. The default value for the property is 0 (zero).
          </p>
          <p>
            Setting a new value for the property causes the <var>AdjustDropDown</var> method to be called to adjust the dimensions for the list to the values in <var>ItemHeight</var>, <var>ItemWidth</var>, and <var>DropDownCount</var>.
          </p>
          <p>
            Use <var>ItemHeight</var> to specify the number of pixels required for items displayed in the drop-down list for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.DropDownCount"/>
          <link id="TCustomComboBox.ItemHeight"/>
          <link id="TCustomComboBox.AdjustDropDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.MaxLength">
        <short>The maximum length for text entered in the edit box for the control</short>
        <descr>
          <p>
            <var>MaxLength</var> is an <var>Integer</var> property which contains the maximum length for a value entered in the <var>Text</var> for the control. It controls the number of characters allowed in the edit box, but does not limit the length of the value that can be directly assigned to Text. MaxLength is passed to and read from the widgetset class when a handle has been assigned for the control.
          </p>
          <p>
            The default value for the property is <b>0</b> (zero), and indicates that a maximum length has not been specified in the property. Setting the value for the property does not alter the existing value in Text.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Text"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnChange">
        <short>Event handler signalled for user changes to the text in the edit box</short>
        <descr>
          <p>
            <var>OnChange</var> is a <var>TNotifyEvent</var> property which implements the event handler signalled when the value in the edit box has been changed.
          </p>
          <p>
            The event applies to interactive changes to <var>Text</var> made by the user, not those made programmatically. Note that this differs from how other OnChange events work. For example:  TEdit.OnChange is triggered by text changes that occur in code. This event is also triggered when the item selection is changed using the drop-down list in the combo-box.
          </p>
          <p>
            OnChange is signalled (when assigned) in the <var>Change</var> method called when the <b>LM_CHANGED</b> control message is handled. An application must implement and assign an object procedure using the signature in TNotifyEvent to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.OnChange"/>
          <link id="TCustomEdit.Change"/>
          <link id="TCustomEdit.LMChanged"/>
          <link id="TCustomEdit.Text"/>
          <link id="#RTL.Classes.TNotifyEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnCloseUp">
        <short>Handler invoked when the drop-down list closes.</short>
        <descr>
          <p>
            <var>OnCloseUp</var> is a <var>TNotifyEvent</var> property which contains the event handler signalled when the drop-down list in the control is hidden or closed. It can be used to perform any actions needed in an application, such as comparing pre-selection and post-selection values for properties. An application must implement and assign an object procedure to the property to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="#RTL.Classes.TNotifyEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnDrawItem">
        <short>Handler for special painting of an item (in owner-draw mode)</short>
        <descr>
          <p>
            <var>OnDrawItem</var> is a <var>TDrawItemEvent</var> property which contains an event handler used to draw an item in the drop-down list for the control. OnDrawItem is used when <var>Style</var> contains one of the owner-drawn values. See <link id="TComboBoxStyle ">TComboBoxStyle</link> for more information about the owner-drawn style available.
          </p>
          <p>
            OnDrawItem is signalled (when assigned) from the <var>DrawItem</var> method. The event handler is responsible for all drawing operations needed to render the specified list item. This can include the text and any images or overlays drawn for the list item. Use the <var>Canvas</var> property to render the list item to the specified coordinate rectangle.
          </p>
          <p>
            If OnDrawItem is not assigned, an internal default drawing routine is called to render the list item. It handles filling the canvas rectangle with the background for the item, and drawing the item text using the style, layout, and alignment defined in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.DrawItem"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.Canvas"/>
          <link id="TDrawItemEvent"/>
          <link id="TComboBoxStyle"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnDropDown">
        <short>Handler invoked when the list has dropped down</short>
        <descr>
          <p>
            <var>OnDropDown</var> is a <var>TNotifyEvent</var> property with the event handler signalled when the drop-down list for the control is displayed. OnDropDown is signalled (when assigned) from the <var>DropDown</var> method. DropDown is called when the <b>CBN_DROPDOWN</b> message is handled for the control.
          </p>
          <p>
            Implement and assign an object procedure to the handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.DropDown"/>
          <link id="#RTL.Classes.TNotifyEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnGetItems">
        <short>Handler invoked when widgetset items list can be populated</short>
        <descr>
          <p>
            <var>OnGetItems</var> is a <var>TNotifyEvent</var> property with the event handler signalled to load the values used in the <var>Items</var> property.
          </p>
          <p>
            OnGetItems is signalled (when assigned) from the <var>GetItems</var> method. Some widgetsets, like GTK, call GetItems (via <var>IntfGetItems</var>) just before the drop-down list is displayed. Others call GetItems when the handle for the control is created. OnGetItems provides one event to handle both cases.
          </p>
          <p>
            An application should implement and assign an object procedure to the handler to respond to the event notification. The procedure must perform any actions needed to load the values for the Items property from an appropriate source.
          </p>
          <p>
            Values can always be stored in the Items property using code at run-time, or by entering the values using the Object Inspector at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.GetItems"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.IntfGetItems"/>
          <link id="#RTL.CLasses.TNotifyEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnMeasureItem">
        <short>Handler invoked when the height for an item is needed</short>
        <descr>
          <p>
            <var>OnMeasureItem</var> is a <var>TMeasureItemEvent</var> property with the event handler signalled to get the height for an item displayed in the list box for the control.
          </p>
          <p>
            OnMeasureItem is signalled (when assigned) from the <var>MeasureItem</var> method. MeasureItem (and OnMeasureItem) are used when the <var>Style</var> property indicates that the control uses a variable height for each item displayed in the list box. OnMeasureItem occurs when the <b>LM_MeasureItem</b> message is handled for the control.
          </p>
          <p>
            Use the <var>Index</var> argument to get the value in <var>Items</var> examined in the event handler. Use <var>ItemWidth</var> to determine the maximum width allowed for the variable height item. <var>Canvas</var> can be used to get text metrics for the <var>Font</var> used in the control. Update the <var>AHeight</var> argument with the height calculated for the item.
          </p>
          <p>
            Use <var>ItemHeight</var> for the item height used for fixed height drawing styles.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.MeasureItem"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.ItemHeight"/>
          <link id="TCustomComboBox.ItemWidth"/>
          <link id="TCustomComboBox.Canvas"/>
          <link id="TMeasureItemEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.OnSelect">
        <short>Handler invoked when an item is selected</short>
        <descr>
          <p>
            <var>OnSelect</var> is a <var>TNotifyEvent</var> property with the event handler signalled when an item is selected in the list box for the control.
          </p>
          <p>
            OnSelect is signalled (when assigned) from the <var>Select</var> method when <var>ItemIndex</var> contains a positive non-zero value. Select (and subsequently OnSelect) are called from multiple methods in TCustomComboBox. <var>SelectItem</var> calls Select when the value in ItemIndex is changed as a result of assigning a value to <var>Text</var>. <var>KeyUp</var> calls Select when the value in Text is updated by auto-completion features in the control. Select is also called when the <b>LM_SelChange</b> message is handled for the control.
          </p>
          <p>
            Implement and assign an object procedure to the handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Select"/>
          <link id="TCustomComboBox.SelectItem"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.KeyUp"/>
          <link id="#RTL.Classes.TNotifyEvent"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>

      <element name="TCustomComboBox.Sorted">
        <short>Determines whether the list entries are sorted in alphanumeric order</short>
        <descr>
          <p>
            <var>Sorted</var> is a <var>Boolean</var> property which indicates if values in <var>Items</var> are stored and displayed in alphanumeric sort order.
          </p>
          <p>
            Setting this property to <b>True</b> enforces ascending alphanumeric case-insensitive sorting of the list. When set to <b>True</b>, new entries are added in sort order, and not to the end of the Items list. When a new value is assigned to the property, the <var>UpdateSorted</var> method is called to set the <var>Sorted</var> property in <var>Items</var> to the corresponding value. <var>ItemIndex</var> is also set to the location in Items where the value in <var>Text</var> is stored, or <b>-1</b> when not found.
          </p>
          <p>
            The default value for the property is <b>False</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomComboBox.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited contructor on entry. Create ensures that resources are allocated for members in the class instance. Create sets the default values for properties, including the following:
          </p>
          <dl>
          </dl>

          <dt>ControlSyle</dt>
          <dd>Removes csCaptureMouse from the style flags.</dd>
          <dt>DropDownCunt</dt>
          <dd>Set to display 8 items by default.</dd>
          <dt>ArrowKeysTraverseList</dt>
          <dd>Set to True to enable cursor key navigation in the control.</dd>
          <dt>AutoCompleteText</dt>
          <dd>Set to the values in the DefaultComboBoxAutoCompleteText constant.</dd>
          <dt>AutoSelect</dt>
          <dd>Set to True.</dd>
          <dt>CharCase</dt>
          <dd>Set to ecNormal.</dd>
          <dt>AutoSize</dt>
          <dd>
            Set to True. AutoSize must be true by default since some widgetsets (win32, wince) ignore the combo-box height and others (gtk2) look ugly with a very small height.
          </dd>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Destroy"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomComboBox.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy calls <var>DestroyHandle</var> if a handle has been allocated for the control. Destroy frees resources allocated for the <var>Canvas</var> property, and calls the inherited destructor.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Create"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.IntfGetItems">
        <short>Gets the values in the Items property for the widgetset class</short>
        <descr>
          <p>
            <var>IntfGetItems</var> is a procedure used to populate the values in the <var>Items</var> property. IntfGetItems is called when the widgetset class retrieves the values for the items displayed in the control. Some widgetsets perform this action when the handle is allocated, or the focus is set for the control. Others perform the action when the drop-list for the control is displayed.
          </p>
          <p>
            IntfGetItems calls the <var>GetItems</var> method to signal the <var>OnGetItems</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.GetItems"/>
          <link id="TCustomComboBox.OnGetItems"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AddItem">
        <short>
          Adds the specified string (and optional object) to the Items displayed in the control
        </short>
        <descr>
          <p>
            <var>AddItem</var> is a procedure used to add the specified value (and an optional associated object) to the <var>Items</var> in the control. AddItem calls the <var>AddObject</var> method in Items to store the values in <var>Item</var> and <var>AnObject</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="#RTL.Classes.TStrings.AddObject"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.AddItem.Item">
        <short>The string added to Items</short>
      </element>
      <element name="TCustomComboBox.AddItem.AnObject">
        <short>The associated object, can be Nil</short>
      </element>

      <element name="TCustomComboBox.AddHistoryItem">
        <short>
          Add an item as the first entry in the history list for the control
        </short>
        <descr>
          <p>
            <var>AddHistoryItem</var> is a procedure used to add the values in <var>Item</var> and <var>AnObject</var> to the beginning of the list items displayed for the control. AddHistoryItem uses the value in <var>CaseSensitive</var> to determine if case is significant when comparing the value in Item to the existing value at the beginning of <var>Items</var>.
          </p>
          <p>
            AddHistoryItem calls the <var>InsertObject</var> method in Items to store the values at the initial position in the Items list (ordinal position 0). When Item exists at another position in Items, it is removed.
          </p>
          <p>
            <var>MaxHistoryCount</var> contains the maximum number of entries allowed in the Items property. When <var>ItemCount</var> exceeds the value in MaxHistoryCount, the excess is removed from the end of Items.
          </p>
          <p>
            When <var>SetText</var> is <b>True</b>, the value in Item is stored to the <var>Text</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemCount"/>
          <link id="TCustomComboBox.Text"/>
          <link id="#RTL.Classes.TStrings.InsertObject"/>
          <link id="#RTL.Classes.TStrings.Delete"/>
        </seealso>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.Item">
        <short>The string to be added to the list</short>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.AnObject">
        <short>Optional associated object added for the item</short>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.MaxHistoryCount">
        <short>The maximum number of items that can be added to the history</short>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.SetAsText">
        <short>When True the string also is copied into the edit box for the control</short>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.CaseSensitive">
        <short>
          True means that the list can contain multiple items with the same text, differing in case
        </short>
      </element>
      <element name="TCustomComboBox.AddHistoryItem.AnObject">
        <short>The object associated with the item; can be Nil</short>
      </element>

      <element name="TCustomComboBox.Clear">
        <short>Removes all items from the list, and clears the edit box</short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove all values stored in the <var>Items</var> property for the control. Clear calls the Clear method in Items to removed the strings and any associated objects stored in the <var>TStrings</var> property. Clear sets the value in <var>Text</var> to an empty string (<b>''</b>)  which forces the value in ItemIndex to be changed to <b>-1</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="#RTL.Classes.TStrings.Clear"/>
          <link id="#RTL.Classes.TStrings.Clear"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ClearSelection">
        <short>Removes the item selection in the list  box for the control</short>
        <descr>
          <p>
            <var>ClearSelection</var> is a procedure used to remove the current item selection in the list box for the control. This causes the value in <var>ItemIndex</var> to be changed to <b>-1</b>. The text selection in the edit box is not affected in the method. Set <var>SelLength</var> to zero (<b>0</b>) to remove the text selection in  the edit box.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.SelLength"/>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelText"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.CharCase">
        <short>
          Indicates the case conversion applied to the value entered in the edit box for the control
        </short>
        <descr>
          <p>
            <var>CharCase</var> is a <var>TEditCharCase</var> property which indicates the case conversion applied to the value entered in the edit box for the control. The default value for the property is <var>ecNormal</var>, and indicates that no case conversion is performed.
          </p>
          <p>
            Setting a new value for the property causes the value in <var>Text</var> to be converted to the specified case by calling either the <var>UTF8LowerCase</var> or the <var>UTF8UpperCase</var> routine. Text is not modified when <var>ecNormal</var> is assigned to the property.
          </p>
          <p>
            The value in CharCase is used when the <var>UTF8KeyPress</var> is called to apply key press events for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.UTF8KeyPress"/>
          <link id="#LazUtils.LazUtf8.UTF8LowerCase"/>
          <link id="#LazUtils.LazUtf8.UTF8UpperCase"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DroppedDown">
        <short>Indicates whether the drop-down list has been displayed</short>
        <descr>
          <p>
            <var>DroppedDown</var> is a <var>Boolean</var> property which indicates whether the drop-down list for the control has been displayed.
          </p>
          <p>
            Reading the value for the property causes the widgetset class to be queried when a handle has been allocated for the control. Otherwise, the stored value for the property is used.
          </p>
          <p>
            Setting a new value for the property causes the widgetset class to be notified of the changed property value. No actions are performed if a handle has not been allocated for the control, or during LCL component streaming. Setting this property opens or closes the drop-down list.
          </p>
          <p>
            The value in DroppedDown is maintained when the <var>Style</var> for the control is altered, when <b>CBN_DROPDOWN</b> or <b>CBN_CLOSEUP</b> control messages are handled, and when key down events are handled which change the visibility of the drop-down list.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DroppingDown">
        <short>Deprecated</short>
        <descr>Deprecated. Will be removed in Lazarus 2.2.</descr>
        <seealso/>
      </element>

      <element name="TCustomComboBox.SelectAll">
        <short>Selects the text content in the edit box for the control</short>
        <descr>
          <p>
            <var>SelectAll</var> is a procedure used to select/highlight the <var>Text</var> displayed in the edit box for the control. SelectAll requires a <var>Style</var> that uses an edit box in the control. No actions are performed in the method when Style does not include an enabled edit box.
          </p>
          <p>
            SelectAll sets the value in <var>SelStart</var> to <b>0</b> (zero) to move the selection to the beginning of the edit box, and sets <var>SelLength</var> to the number of UTF-8-encoded characters in Text. No selection/highlighting is performed when Text contains an empty string (<b>''</b>).
          </p>
          <p>
            SelectAll is called from methods like <var>DoEnter</var>, <var>KeyUp</var>, <var>CloseUp</var>, and <var>MouseUp</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelLength"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.DoEnter"/>
          <link id="TCustomComboBox.KeyUp"/>
          <link id="TCustomComboBox.CloseUp"/>
          <link id="TCustomComboBox.MouseUp"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoComplete">
        <short>Positions the list box using partial text matching</short>
        <descr>
          <p>
            <var>AutoComplete</var> is a <var>Boolean</var> property which indicates if partial text matching is used to locate values in the Items displayed for the control. When set to <b>True</b>, keystrokes entered in the edit box for the control are used to locate a value in Items which begins with the entered value. The <var>ItemIndex</var> property is updated with the ordinal position for the matching item, or -1 if an entry is not found that starts with the partial value.
          </p>
          <p>
            Reading the value in AutoComplete causes the <var>AutoCompleteText</var> property to be examined, and returns <b>True</b> when the value <var>cbactEnabled</var> is included in the auto-complete options. Assigning a value to AutoComplete causes the AutoCompleteText property to include or exclude the corresponding value as needed.
          </p>
          <p>
            Use AutoCompleteText to enable or disable other auto-complete features and behaviors in the control.
          </p>
          <p>
            Auto-completion related tasks are performed when the <var>KeyUp</var> method handles valid keystrokes for the control.
          </p>
          <p>
            Use <var>AutoSelect</var> to control whether text is automatically highlighted in the edit box when a new list item is selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="TCustomComboBox.AutoSelect"/>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.KeyUp"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoCompleteText">
        <short>Options for the behavior of the Auto-Complete feature</short>
        <descr>
          <dl>
            <dt>Enabled</dt>
            <dd> Enable Auto-Completion features.</dd>
            <dt>EndOfLineComplete</dt>
            <dd>Perform Auto-Complete only when cursor is at the end of the string.</dd>
            <dt>RetainPrefixCase</dt>
            <dd>
              Retains the case of characters user has typed. This option has no effect if cbactEndOfLineComplete is <b>False</b>.
            </dd>
            <dt>SearchCaseSensitive</dt>
            <dd>Search completion string with case sensitivity.</dd>
            <dt>SearchAscending</dt>
            <dd>
              Search completion string in ascending order. <b>False</b> will search in descending order.
            </dd>
          </dl>
          <p>
            This property exists as a <var>Set</var> of <var>Options</var>, so zero or more options may be operational.
          </p>
        </descr>
        <seealso>
          <link id="TComboBoxAutoCompleteTextOption"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoDropDown">
        <short>Makes the drop-down list appear as soon as the user starts entering text</short>
        <descr>
          <p>
            <var>AutoDropDown</var> is a <var>Boolean</var> property which indicates if the drop-down list for the control is automatically displayed. When set to <b>False</b>, the drop-down list appears when the down button is clicked, or the Alt+Down key sequence is entered. The value in AutoDropDown is maintained, based on the <var>Style</var> for the control, when <var>KeyDown</var> is called to handle key events.
          </p>
          <p>
            Use <var>DroppedDown</var> to show or hide the list box for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.KeyDown"/>
          <link id="TCustomComboBox.DroppedDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoSelect">
        <short>Selects the entire content of the edit box when the control receives the focus</short>
        <descr>
          <p>
            When <b>True</b>, the edit control will select all its text when:
          </p>
          <ul>
            <li>It receives focus</li>
            <li>The Enter key is pressed.</li>
            <li>A new item is selected.</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelected"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoSelected">
        <short>True indicates that the selection was marked automatically by the control</short>
        <descr>
          <p>
            <b>True</b> indicates that the combo-box control has just performed an <var>AutoSelect</var> operation so that subsequent mouse-clicks and keystrokes proceed normally without selecting the text.
          </p>
          <p>
            <b>False</b> is set when the combo-box control loses focus.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.AutoSelect"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <short/>
        <descr>
          The default value for the property is <b>True</b> in TCustomComboBox.
        </descr>
        <seealso/>
      </element>

      <element name="TCustomComboBox.ArrowKeysTraverseList">
        <short>
          Indicates if keyboard Arrow (or cursor) keys to move through the list
        </short>
        <descr>
          <p>
            <var>ArrowKeysTraverseList</var> indicates if Arrow (or Cursor) keys on the keyboard can be used to navigate the <var>Items</var> displayed in the drop-down list box for the control. The default value for the property is <b>True</b>.
          </p>
          <p>
            The value in the property is passed to the widgetset class when the LCL interface object is created. Changing the value for the property causes the widgetset class to be notified using its <var>SetArrowKeysTraverseList</var> method.
          </p>
          <p>
            The property value is used in the implementation of the <var>KeyDown</var> method, and may be updated as the drop-down list for the control is displayed or hidden. For some widgetsets (Darwin), the arrow keys cannot be handled in the LCL and the keyboard message(s) are ignored.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.Canvas">
        <short>Provides access to the drawing surface for the control</short>
        <descr>
          <p>
            <var>Canvas</var> is a read-only <var>TCanvas</var> property which provides access to the drawing surface used for the control. The class implementation actually uses a <var>TControlCanvas</var> instance in the member.
          </p>
          <p>
            Canvas is used in methods like <var>DrawItem</var>, and in private methods which handle the <b>LM_DrawListItem</b> message for the control. Canvas is also passed as an argument to methods in the ancestor class like <var>PaintTo</var>. Canvas can be useful in <var>OnDrawItem</var> event handler when used to render list items for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.DrawItem"/>
          <link id="TCustomComboBox.OnDrawItem"/>
          <link id="#LCL.Controls.TWinControl.PaintTo"/>
          <link id="#LCL.Graphics.TCanvas"/>
          <link id="#LCL.Controls.TControlCanvas"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.DropDownCount">
        <short>The maximum number of Items visible in the drop-down list for the control</short>
        <descr>
          <p>
            <var>DropDownCount</var> is an <var>Integer</var> property which specifies the maximum number of values from <var>Items</var> that can be displayed in the drop-down list for the control. Setting a new value for the property causes the widgetset class to be notified using its <var>SetDropDownCount</var> method when a handle has been allocated for the control.
          </p>
          <p>
            DropDownCount is used (along with <var>ItemCount</var> and <var>ItemHeight</var>) in the <var>AdjustDropDown</var> method to set the minimum dimensions for the drop-down list.
          </p>
          <p>
            The default value for the property is <b>8</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemHeight"/>
          <link id="TCustomComboBox.ItemCount"/>
          <link id="TCustomComboBox.AdjustDropDown"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.EmulatedTextHintStatus">
        <short>Status for the emulated TextHint in the control</short>
        <descr>
          <p>
            <var>EmulatedTextHintStatus</var> is a read-only <var>TEmulatedTextHintStatus</var> property which contains the status value for an emulated TextHint display in the control. EmulatedTextHintStatus is used when a value has been assigned to the <var>TextHint</var> property and the widgetset does not natively implement the capability. The LCL emulates the TextHint display by assigning the value in TextHint to the <var>Text</var> for the control.
          </p>
          <p>
            EmulatedTextHintStatus is updated in the <var>ShowEmulatedTextHint</var> and  <var>HideEmulatedTextHint</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TEmulatedTextHintStatus"/>
          <link id="TCustomComboBox.TextHint"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.ShowEmulatedTextHint"/>
          <link id="TCustomComboBox.HideEmulatedTextHint"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.Items">
        <short>The list of items displayed in the combo-box control</short>
        <descr>
          <p>
            <var>Items</var> is a <var>TStrings</var> property which contains the strings displayed in the static or drop-down list for the control. Settings a new TStrings value for the property causes the Assign method to be called to load the string values into the current class instance.
          </p>
          <p>
            As an alternative, use the <var>OnGetItems</var> event handler to dynamically populate the values in Items when the drop-down list for the control is displayed (or created).
          </p>
          <p>
            String values in Items can be ordered alphabetically by setting the <var>Sorted</var> property to <b>True</b>. This also affects the ordinal position for new values added to Items. Its index will be the position in the sorted order, and not necessarily at the end of the list.
          </p>
          <p>
            Use ItemIndex to determine the ordinal position in Items with the value displayed the edit box for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.ItemIndex"/>
          <link id="TCustomComboBox.Sorted"/>
          <link id="TCustomComboBox.OnGetItems"/>
          <link id="TCustomComboBox.Text"/>
          <link id="#rtl.Classes.TStrings"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ItemIndex">
        <short>The index of the currently selected item, or -1 if none is selected</short>
        <descr>
          <p>
            <var>ItemIndex</var> is an <var>Integer</var> property which contains the ordinal position in <var>Items</var> for the current list box selection in the control. The first value in Items is at index position 0 (zero). The final value in Items is at the index position ItemCount-1. When no value is selected in the list box, ItemIndex is set to -1. The default value for the property is -1.
          </p>
          <p>
            When the value for the property is read, the widgetset class is queried when a handle has been assigned for the control.
          </p>
          <p>
            Assigning a new value to the property causes the value in Text to be updated to reflect the new selection in the control. When ItemIndex is -1, Text is set to an empty string ('').
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Items"/>
          <link id="TCustomComboBox.ItemCount"/>
          <link id="TCustomComboBox.AddItem"/>
          <link id="TCustomComboBox.AddHistoryItem"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.ReadOnly">
        <short>Disallows free-form entry of Text into the combo-box edit field</short>
        <descr>
          <p>
            When <b>True</b>, the text can be changed only by selecting an item from the combo-box items list. When <b>False</b>, the text can be changed by free-form entry of a value in the edit field.
          </p>
          <p>
            Changing the property value doesn't affect the style for the control in any manner. Changing the style doesn't affect the value in the property, as well. For some styles (such as csDropDownList) the property might have no effect because it is ignored.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.AutoComplete"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.SelLength">
        <short>The number of selected UTF-8 characters in the edit box</short>
        <descr>
          <p>
            <var>SelLength</var> is an <var>Integer</var> property which indicates the number of UTF-8-encoded characters selected in the edit box for the control. SelLength is used along with <var>SelStart</var> to determine the value in <var>SelText</var>.
          </p>
          <p>
            Use SelStart to determine the position in Text for the selected value in the edit box for the control.
          </p>
          <p>
            Use SelText to get the content selected in the edit box. Assigning a new value to SelText causes the value in SelLength to be updated.
          </p>
          <p>
            SelLength is updated in the <var>SelectAll</var> method after the selection text is updated. It is also updated when <var>KeyUp</var> performs auto-completion for alphanumeric values entered in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelText"/>
          <link id="TCustomComboBox.Text"/>
          <link id="TCustomComboBox.SelectAll"/>
          <link id="TCustomComboBox.KeyUp"/>
          <link id="TCustomComboBox.AutoComplete"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.SelStart">
        <short>
          <b>zero-based</b> index to the UTF-8 character at the beginning of the selected text in the edit box
        </short>
        <descr>
          <p>
            If text is selected in the edit box for the control, this is the starting position. When no text is selected, SelStart is the cursor position, and SelLength is 0 (zero).
          </p>
          <p>
            Writing a new value to the property moves the cursor, and removes the current text selection. Set SelLength after changing SelStart, to establish a new text selection.
          </p>
          <p>
            SelStart is a <b>zero-based</b> index to UTF-8 character in the Text, in contrast to the usual <b>1-based</b> string indices. The value 0 means the first UTF-8 character, the value 1 means the second UTF-8 character, etc.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.SelLength"/>
          <link id="TCustomComboBox.SelText"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.SelText">
        <short>The selected text in the edit box for the control</short>
        <descr>
          <p>
            <var>SelText</var> is a <var>String</var> property which contains the selected text in the edit box for the control. The property value is determined by the values in <var>SelStart</var> and <var>SelLength</var>. Assign a new string value to replace the selected text within the <var>Text</var> for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.SelStart"/>
          <link id="TCustomComboBox.SelLength"/>
          <link id="TCustomComboBox.Text"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.Style">
        <short>Appearance and behavior of the combo-box</short>
        <descr>
          <p>
            Style is quite Windows centric, reflecting the evolution of combo-box styles. The basic styles are:
          </p>
          <dl>
            <dt>csSimple</dt>
            <dd>Displays an edit box with a static list (not a drop-down list).</dd>
            <dt>csDropDown</dt>
            <dd>Displays an edit box with a drop-down list.</dd>
            <dt>csDropDownList</dt>
            <dd>
              Values cannot be entered by the user in the edit box, only selected from the drop-down list.
            </dd>
          </dl>
          <p>
            Owner-drawn drop-down lists have been added, with the values:
          </p>
          <dl>
            <dt>csOwnerDrawFixed</dt>
            <dd>All items in the drop-down list are drawn with the same height.</dd>
            <dt>csOwnerDrawVariable</dt>
            <dd>Each item in the list can have a different height.</dd>
          </dl>
        </descr>
      </element>

      <element name="TCustomComboBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>

      <element name="TCustomComboBox.Text">
        <short>The value in the edit box for the control</short>
        <descr>
          <p>
            Setting the value in Text selects a possibly matching item in the list. If an item is selected from the list, it replaces the contents of <var>Text</var>.
          </p>
          <p>
            Use the Style property to control the display and editing features enabled for the control.
          </p>
          <p>
            Text completion can be enabled or disabled using the AutoComplete property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.ReadOnly"/>
          <link id="TCustomComboBox.Style"/>
          <link id="TCustomComboBox.AutoComplete"/>
          <link id="TCustomComboBox.AutoCompleteText"/>
          <link id="TCustomComboBox.Text"/>
        </seealso>
      </element>

      <element name="TCustomComboBox.TextHint">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TComboBox">
        <short>
          A combination of an edit box and a (drop-down) list allowing one of several options to be chosen
        </short>
        <descr>
          <p>
            The Text property reflects the text entered into the edit box, or selected from the list.
          </p>
          <p>
            The selectable values are kept in the <var>Items</var> list. Clicking on the ellipsis character (<b>...</b>), next to <var>Items</var> in the Object Inspector, opens an editor which allows the designer to populate the Items list.
          </p>
          <p>
            At run-time, the entry selected from the list replaces the text in the edit box, and <var>ItemIndex</var> holds the (zero-based) index number of the selected item.
          </p>
          <p>
            If no value is selected from the drop-down list, the default text (if any) remains, or any information typed directly into <var>Text</var> will be returned, and <var>ItemIndex</var> takes the value of -1.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TComboBox.Items"/>
          <link id="TComboBox.ItemIndex"/>
        </seealso>
      </element>

      <element name="TComboBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TComboBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TComboBox.ArrowKeysTraverseList" link="TCustomComboBox.ArrowKeysTraverseList"/>
      <element name="TComboBox.AutoComplete" link="TCustomComboBox.AutoComplete"/>
      <element name="TComboBox.AutoCompleteText" link="TCustomComboBox.AutoCompleteText"/>
      <element name="TComboBox.AutoDropDown" link="TCustomComboBox.AutoDropDown"/>
      <element name="TComboBox.AutoSelect" link="TCustomComboBox.AutoSelect"/>
      <element name="TComboBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TComboBox.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TComboBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TComboBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TComboBox.CharCase" link="TCustomComboBox.CharCase"/>
      <element name="TComboBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TComboBox.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
      <element name="TComboBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TComboBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TComboBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TComboBox.DropDownCount" link="TCustomComboBox.DropDownCount"/>
      <element name="TComboBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TComboBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TComboBox.ItemHeight" link="TCustomComboBox.ItemHeight"/>
      <element name="TComboBox.ItemIndex" link="TCustomComboBox.ItemIndex"/>
      <element name="TComboBox.Items" link="TCustomComboBox.Items"/>
      <element name="TComboBox.ItemWidth" link="TCustomComboBox.ItemWidth"/>
      <element name="TComboBox.MaxLength" link="TCustomComboBox.MaxLength"/>
      <element name="TComboBox.OnChange" link="TCustomComboBox.OnChange"/>
      <element name="TComboBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TComboBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TComboBox.OnCloseUp" link="TCustomComboBox.OnCloseUp"/>
      <element name="TComboBox.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TComboBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TComboBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TComboBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TComboBox.OnDrawItem" link="TCustomComboBox.OnDrawItem"/>
      <element name="TComboBox.OnDropDown" link="TCustomComboBox.OnDropDown"/>
      <element name="TComboBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TComboBox.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TComboBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TComboBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TComboBox.OnGetItems" link="TCustomComboBox.OnGetItems"/>
      <element name="TComboBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TComboBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TComboBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TComboBox.OnMeasureItem" link="TCustomComboBox.OnMeasureItem"/>
      <element name="TComboBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TComboBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TComboBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TComboBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TComboBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TComboBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TComboBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TComboBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TComboBox.OnSelect" link="TCustomComboBox.OnSelect"/>
      <element name="TComboBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TComboBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TComboBox.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TComboBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TComboBox.ParentDoubleBuffered" link="#LCL.Controls.TWinControl.ParentDoubleBuffered"/>
      <element name="TComboBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TComboBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TComboBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TComboBox.ReadOnly" link="TCustomComboBox.ReadOnly"/>
      <element name="TComboBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TComboBox.Sorted" link="TCustomComboBox.Sorted"/>
      <element name="TComboBox.Style" link="TCustomComboBox.Style"/>
      <element name="TComboBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TComboBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TComboBox.Text" link="TCustomComboBox.Text"/>
      <element name="TComboBox.TextHint" link="TCustomComboBox.TextHint"/>
      <element name="TComboBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TListBoxStyle">
        <short>Determines how items are drawn in a list box control</short>
        <descr>
          <p>
            <var>TListBoxStyle</var> is an enumerated type with values that determine how items in the list box control are populated and drawn. TListBoxStyle is the type used to implement the <var>Style</var> property in <var>TCustomListBox</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Style"/>
        </seealso>
      </element>
      <element name="TListBoxStyle.lbStandard">
        <short>Items drawn by the widgetset class</short>
      </element>
      <element name="TListBoxStyle.lbOwnerDrawFixed">
        <short>Items drawn by user code, and all items have the same height</short>
      </element>
      <element name="TListBoxStyle.lbOwnerDrawVariable">
        <short>Items drawn by user code, and each item can have a different height</short>
      </element>
      <element name="TListBoxStyle.lbVirtual">
        <short>Not used in the current LCL version</short>
        <notes><note>?</note></notes>
      </element>

      <element name="TSelectionChangeEvent">
        <short>Specifies an event handler for change notifications from a list box control</short>
        <descr>
          <p>
            <var>TSelectionChangeEvent</var> is an object procedure type which specifies an event handler signalled when the select is changed in a list box control. Arguments passed to the handler identify the list box control, and the origin of the change notification.
          </p>
          <p>
            TSelectionChangeEvent is the type used to implement the <var>OnSelectionChange</var> property in <var>TCustomListBox</var>. The application must implement and assign an object procedure using the signature for the handler to respond to the event notification.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TSelectionChangeEvent.Sender">
        <short>The list box control for the notification</short>
      </element>
      <element name="TSelectionChangeEvent.User">
        <short>True if the user changed the selection, False if changed by code</short>
      </element>

      <element name="TCustomListBox">
        <short>The base class for <var>TListBox</var></short>
        <descr>
          <p>
            <var>TCustomListBox</var> is a <var>TWinControl</var> descendant which specifies the base class used for a list box control. A list box displays a scrollable list which allows selection of one or more of the item values.
          </p>
          <p>
            TCustomListBox provides methods, properties, and events used to display, order, and select item values. The Items for the control can be assigned at design-time in the Lazarus IDE, or stored at run-time. Owner-drawn styles are available to render icons or bitmaps along with the text for the items, or using a variable height for list items. A Canvas property is provided for owner-drawn usage. Items in the list box can be display in one or more columns.
          </p>
          <p>
            Do not create instances of TCustomListBox; use the <var>TListBox</var> descendant.
          </p>
        </descr>
        <seealso>
          <link id="TListBox"/>
          <link id="#LCL.Controls.TWinControl"/>
        </seealso>
      </element>

      <element name="TCustomListBox.FCacheValid"/>
      <element name="TCustomListBox.FCanvas"/>

      <element name="TCustomListBox.FClickOnSelChange" link="TCustomListBox.ClickOnSelChange"/>
      <element name="TCustomListBox.FClickTriggeredBySelectionChange"/>
      <element name="TCustomListBox.FColumns" link="TCustomListBox.Columns"/>
      <element name="TCustomListBox.FExtendedSelect" link="TCustomListBox.ExtendedSelect"/>
      <element name="TCustomListBox.FIntegralHeight" link="TCustomListBox.IntegralHeight"/>
      <element name="TCustomListBox.FItemHeight" link="TCustomListBox.ItemHeight"/>
      <element name="TCustomListBox.FItemIndex" link="TCustomListBox.ItemIndex"/>
      <element name="TCustomListBox.FItems" link="TCustomListBox.Items"/>
      <element name="TCustomListBox.FLockSelectionChange"/>
      <element name="TCustomListBox.FMultiSelect" link="TCustomListBox.MultiSelect"/>
      <element name="TCustomListBox.FOnDrawItem" link="TCustomListBox.OnDrawItem"/>
      <element name="TCustomListBox.FOnMeasureItem" link="TCustomListBox.OnMeasureItem"/>
      <element name="TCustomListBox.FOnSelectionChange" link="TCustomListBox.OnSelectionChange"/>
      <element name="TCustomListBox.FScrollWidth" link="TCustomListBox.ScrollWidth"/>
      <element name="TCustomListBox.FSorted" link="TCustomListBox.Sorted"/>
      <element name="TCustomListBox.FStyle" link="TCustomListBox.Style"/>
      <element name="TCustomListBox.FTopIndex" link="TCustomListBox.TopIndex"/>

      <element name="TCustomListBox.GetCount" link="TCustomListBox.Count"/>
      <element name="TCustomListBox.GetCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.GetScrollWidth" link="TCustomListBox.ScrollWidth"/>
      <element name="TCustomListBox.GetScrollWidth.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.GetTopIndex" link="TCustomListBox.TopIndex"/>
      <element name="TCustomListBox.GetTopIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.RaiseIndexOutOfBounds">
        <short>
          Raises an exception if an invalid index position is used to access Items in the list box control
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.RaiseIndexOutOfBounds.AIndex">
        <short>Index value generating the exception</short>
      </element>

      <element name="TCustomListBox.SetColumns" link="TCustomListBox.Columns"/>
      <element name="TCustomListBox.SetColumns.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetScrollWidth" link="TCustomListBox.ScrollWidth"/>
      <element name="TCustomListBox.SetScrollWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetTopIndex" link="TCustomListBox.TopIndex"/>
      <element name="TCustomListBox.SetTopIndex.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.UpdateSelectionMode">
        <short>Sends values for ExtendedSelect and MultiSelect to the widgetset class</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.UpdateSorted">
        <short>Sends values in Items and Sorted to the widgetset class</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.LMDrawListItem">
        <short>Handles the LM_DrawListItem message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.LMDrawListItem.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomListBox.LMMeasureItem">
        <short>Handles the LM_MeasureItem message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.LMMeasureItem.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomListBox.LMSelChange">
        <short>Handles the LM_SelChange message for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.LMSelChange.TheMessage">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomListBox.WMLButtonUp" link="#LCL.Controls.TControl.WMLButtonUp">
        <short>
          Prevents Click from being called twice when using ClickOnSelChange to trigger a click event
        </short>
      </element>
      <element name="TCustomListBox.WMLButtonUp.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomListBox.SendItemSelected">
        <short>Notifies the widgetset class when the selected item in the control is changed</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SendItemSelected.Index">
        <short>Ordinal position for the item</short>
      </element>
      <element name="TCustomListBox.SendItemSelected.IsSelected">
        <short>True when the item is selected; False when it is not selected</short>
      </element>

      <element name="TCustomListBox.ClearSelectedCache">
        <short>Resets cached item selections for the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.SetSelectedCache">
        <short>Sets the cached selection state for the specified item</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetSelectedCache.Index">
        <short>Ordinal position in Items to update in the cache</short>
      </element>
      <element name="TCustomListBox.SetSelectedCache.IsSelected">
        <short>Selection state for the cached item</short>
      </element>

      <element name="TCustomListBox.GetSelectedCache">
        <short>Gets the selection state for the specified item from the cache</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetSelectedCache.Result">
        <short>True when the item is selected in the cache</short>
      </element>
      <element name="TCustomListBox.GetSelectedCache.Index">
        <short>Ordinal position in Items for the cached item</short>
      </element>

      <element name="TCustomListBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomListBox.AssignItemDataToCache">
        <short>Copy selection state into the cache</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.AssignItemDataToCache.AIndex">
        <short>Ordinal position in Items for the entry updated in the cache</short>
      </element>
      <element name="TCustomListBox.AssignItemDataToCache.AData">
        <short>Pointer to the data stored in the cache for the specified item</short>
      </element>

      <element name="TCustomListBox.AssignCacheToItemData">
        <short>Sends the cached selection state to the widget</short>
        <descr>Called to restore the ItemData after a handle is created.</descr>
        <seealso/>
      </element>
      <element name="TCustomListBox.AssignCacheToItemData.AIndex">
        <short>Ordinal position for the item data read from the cache</short>
      </element>
      <element name="TCustomListBox.AssignCacheToItemData.AData">
        <short>Pointer to the data read from the cache for the specified item</short>
      </element>

      <element name="TCustomListBox.BeforeDragStart">
        <short>Calls BeginDrag</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.BeginAutoDrag" link="#LCL.Controls.TControl.BeginAutoDrag">
        <short>Calls BeginDrag</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.CalculateStandardItemHeight">
        <short>Determine the standard Height of the items, when no widget has yet been created</short>
      </element>
      <element name="TCustomListBox.CalculateStandardItemHeight.Result">
        <short>Height for the items in the control</short>
      </element>

      <element name="TCustomListBox.Loaded">
        <short>Sends the design-time value for ItemIndex to the widgetset class</short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded"/>
          <link id="#LCL.Controls.TWinControl.Loaded"/>
        </seealso>
      </element>

      <element name="TCustomListBox.CreateParams">
        <short>
          Initializes the creation parameters for the class instance
        </short>
        <descr>
          <p>
            <var>CreateParams</var> is an overridden method used initialize the creation parameters for the class instance.
          </p>
          <p>
            CreateParams calls the inherited method, and ensures that the <var>Params</var> argument is updated to include style constants needed for properties in the list box control. These include the constants needed for the <var>Sorted</var>, <var>MultiSelect</var>, and <var>Columns</var> properties. Owner-drawn constants are also included based on the value in <var>Style</var>. Style constants are always included for scrollbars (horizontal and vertical), non-integral item height, string content, and notify events.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Sorted"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.Columns"/>
          <link id="TCustomListBox.Style"/>
          <link id="#lcl.controls.TWinControl.CreateParams"/>
        </seealso>
      </element>
      <element name="TCustomListBox.CreateParams.Params">
        <short>The creation parameters and flags for the instance</short>
      </element>

      <element name="TCustomListBox.InitializeWnd">
        <short>
          Updates Items from the widgetset class and invalidates the item cache
        </short>
        <descr>
          <p>
            <var>InitializeWnd</var> is an overridden method used to synchronize the control and the widgetset class. InitializeWnd copies values for the <var>Items</var> property from the ones allocated in the widgetset class. The value in <var>ItemIndex</var> is passed to the widgetset class when needed. An internal flag is reset to invalidate the item cache for the control, and the item data from the widgetset class is applied. Finally, the value in <var>ScrollWidth</var> is passed to the widgetset class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Sorted"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.ScrollWidth"/>
          <link id="#lcl.controls.TWinControl.InitializeWnd"/>
        </seealso>
      </element>

      <element name="TCustomListBox.FinalizeWnd">
        <short>Caches the Items stored in the widgetset class</short>
        <descr>
          <p>
            <var>FinalizeWnd</var> is an overridden method used to capture values from the widgetset class when the handle is destroyed or re-created. FinalizeWnd gets the value for <var>ItemIndex</var> when the handle is being re-created. Values in <var>Items</var> (and its cached item data) are copied before they are freed in the widgetset class. The value in <var>Sorted</var> is re-applied to the new values in Items.
          </p>
          <p>
            FinalizeWnd calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Sorted"/>
          <link id="#lcl.controls.TWinControl.FinalizeWnd"/>
        </seealso>
      </element>

      <element name="TCustomListBox.GetControlClassDefaultSize"/>
      <element name="TCustomListBox.GetControlClassDefaultSize.Result">
        <short>Default dimensions for a new instance of the class</short>
      </element>

      <element name="TCustomListBox.CheckIndex">
        <short>Ensures that the Item index is within the bounds for the Items in the control</short>
        <descr>
          <p>
            <var>CheckIndex</var> is a procedure used to ensure that the specified index value is within the range of values allowed for the Items in the control. CheckIndex examines the value in <var>AIndex</var>, and raises an <var>IndexOutOfBounds</var> exception if it is not in the range 0 (zero) to Items.Count-1.
          </p>
          <p>
            CheckIndex is used in the access specifiers for the <var>Selected</var> property (GetSelected, SetSelected).
          </p>
        </descr>
        <errors>
          Raises an <var>IndexOutOfBounds</var> exception when the index is out of bounds.
        </errors>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.GetSelected"/>
          <link id="TCustomListBox.SetSelected"/>
        </seealso>
      </element>
      <element name="TCustomListBox.CheckIndex.AIndex">
        <short>Index position examined in the method</short>
      </element>

      <element name="TCustomListBox.GetItemHeight" link="TCustomListBox.ItemHeight">
        <short>Gets the value for the ItemHeight property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetItemHeight.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.GetItemIndex" link="TCustomListBox.ItemIndex">
        <short>Gets the value for the ItemIndex property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetItemIndex.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.GetSelCount" link="TCustomListBox.SelCount">
        <short>Gets the value for the SelCount property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetSelCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomListBox.GetSelected" link="TCustomListBox.Selected">
        <short>Gets the value for the Selected property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetSelected.Result">
        <short>The selection state of the item</short>
      </element>
      <element name="TCustomListBox.GetSelected.Index">
        <short>Ordinal position for the item examined in the method</short>
      </element>

      <element name="TCustomListBox.GetCachedDataSize">
        <short>Returns the size for cached item data in the control</short>
        <descr>
          <p>
            Passed as an argument when creating the <var>TExtendedStringList</var> instance used in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="#lazutils.extendedstrings.TExtendedStringList"/>
        </seealso>
      </element>
      <element name="TCustomListBox.GetCachedDataSize.Result">
        <short>Number f bytes required for the item data in the cache</short>
      </element>

      <element name="TCustomListBox.GetCachedData">
        <short>Returns a pointer to the cached item data</short>
        <descr>
          <p>
            Gets a pointer to the item data for the specified list box item. The return value contains the attributes stored in Items at the position in AIndex. Items is cast to a TExtendedStringList instance to access its indexed Records property.
          </p>
        </descr>
        <errors>
          Raises an InvalidOperation exception when the cache is marked as invalid, i. e. when the widgetset class has already been created.
        </errors>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="#lazutils.extendedstrings.TExtendedStringList.Records"/>
        </seealso>
      </element>
      <element name="TCustomListBox.GetCachedData.Result">
        <short>Pointer to the item data in the cache</short>
      </element>
      <element name="TCustomListBox.GetCachedData.AIndex">
        <short>Ordinal position in Items for the values retrieved in the method</short>
      </element>

      <element name="TCustomListBox.SetExtendedSelect" link="TCustomListBox.ExtendedSelect">
        <short>Sets the value for the ExtendedSelect property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetExtendedSelect.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetItemIndex" link="TCustomListBox.ItemIndex">
        <short>Sets the value for the ItemIndex property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetItemIndex.AIndex">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetItems" link="TCustomListBox.Items">
        <short>Sets the value for the Items property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetItems.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetItemHeight" link="TCustomListBox.ItemHeight">
        <short>Sets the value for the ItemHeight property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetItemHeight.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetMultiSelect" link="TCustomListBox.MultiSelect">
        <short>Sets the value for the MultiSelect property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetMultiSelect.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetSelected" link="TCustomListBox.Selected">
        <short>Sets the value for the Selected property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetSelected.Index">
        <short>Ordinal position for the item updated in the method</short>
      </element>
      <element name="TCustomListBox.SetSelected.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetSorted" link="TCustomListBox.Sorted">
        <short>Sets the value for the Sorted property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetSorted.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.SetStyle" link="TCustomListBox.Style">
        <short>Sets the value for the Style property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.SetStyle.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomListBox.DrawItem">
        <short>Paints an item in owner-draw mode</short>
        <descr>
          <p>
            <var>DrawItem</var> is a procedure used to render an item in the list box control using the owner-draw mode.
          </p>
          <p>
            <var>Item</var> contains the ordinal position in Items for the item drawn in the method.
          </p>
          <p>
            <var>ARect</var> is a <var>TRect</var> instance with the canvas coordinates where the drawing operation is performed.
          </p>
          <p>
            <var>State</var> contains the drawing state for the owner-drawn item.
          </p>
          <p>
            DrawItem signals the <var>OnDrawItem</var> event handler (when assigned). An internal default drawing method is used when the event handler has not been implemented.
          </p>
          <p>
            DrawItem is called when the <b>LM_DrawListItem</b> message is handled for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.OnDrawItem"/>
          <link id="TCustomListBox.Canvas"/>
          <link id="TDrawItemEvent"/>
        </seealso>
      </element>
      <element name="TCustomListBox.DrawItem.Index">
        <short>Ordinal position for the item drawn in the method</short>
      </element>
      <element name="TCustomListBox.DrawItem.ARect">
        <short>Canvas rectangle with the coordinate for the drawing operation</short>
      </element>
      <element name="TCustomListBox.DrawItem.State">
        <short>Drawing state for the item</short>
      </element>

      <element name="TCustomListBox.DoSelectionChange">
        <short>Signals the OnSelectionChange handler</short>
        <descr>
          <p>
            <var>DoSelectionChange</var> performs actions needed when the selected item in the list box control has been changed. DoSelectionChange signals the <var>OnSelectionChange</var> event handler (when assigned).
          </p>
          <p>
            <var>User</var> indicates if the selection was changed as a result of user interaction with the control, as opposed to a change performed in code at run-time. When User is set to <b>True</b>, and <var>ClickOnSelChange</var> is enabled, an internal flag is set to prevent execution of the method by a subsequent mouse click.
          </p>
          <p>
            DoSelectionChange is called when the <b>LM_SelChange</b> message is handled for the control, and when a new value is assigned to the <var>ItemIndex</var> property. User is set to <b>False</b> when the selection change is caused by setting a new value in ItemIndex.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.OnSelectionChange"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.ClickOnSelChange"/>
        </seealso>
      </element>
      <element name="TCustomListBox.DoSelectionChange.User">
        <short>True when the selection change results from user interaction with the control</short>
      </element>

      <element name="TCustomListBox.SendItemIndex">
        <short>Sends the value in ItemIndex to the widgetset class</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.Create" link="#lcl.controls.TWinControl.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create sets the component style to <b>csListBox</b>, and allocates resources needed for the <var>Items</var> and <var>Canvas</var> properties. Create sets the default values for properties, including:
          </p>
          <dl>
            <dt>BorderStyle</dt>
            <dd>Set to bsSingle.</dd>
            <dt>ClickOnSelChange</dt>
            <dd>Set to <b>True</b>.</dd>
            <dt>ItemIndex</dt>
            <dd>Set to -1 to indicate no item is selected.</dd>
            <dt>ExtendedSelect</dt>
            <dd>Set to <b>True</b>.</dd>
            <dt>Options</dt>
            <dd>Set to DefOptions.</dd>
            <dt>Canvas</dt>
            <dd>Cast to a TControlCanvas instance for the current class instance.</dd>
            <dt>ParentColor</dt>
            <dd>Set to <b>False</b>.</dd>
            <dt>TabStop</dt>
            <dd>Set to <b>True</b>.</dd>
          </dl>
          <p>
            Create calls <var>SetInitialBounds</var> to assign the dimensions from the <var>GetControlClassDefaultSize</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Canvas"/>
          <link id="#lcl.controls.TWinControl.Create"/>
        </seealso>
      </element>
      <element name="TCustomListBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomListBox.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy frees resources allocated for the <var>Items</var> and <var>Canvas</var> properties. Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Create"/>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Canvas"/>
        </seealso>
      </element>

      <element name="TCustomListBox.AddItem">
        <short>Adds an item to the list</short>
        <descr>
          <p>
            <var>AddItem</var> is a method used to add a string (and an optional associated object) to the <var>Items</var> for the control. AddItem calls the <var>AddObject</var> method in Items using <var>Item</var> and <var>AnObject</var> as arguments.
          </p>
          <p>
            <var>Item</var> contains the string value added to the Items in the control.
          </p>
          <p>
            <var>AnObject</var> is an optional object instance associated with the item, and contains <b>Nil</b> when an object instance has not been assigned. The object can be retrieved using the <var>Items.Objects</var> property for the <var>ItemIndex</var>, and must be cast to the required class type to access values in the object instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
        </seealso>
      </element>
      <element name="TCustomListBox.AddItem.Item">
        <short>The item text</short>
      </element>
      <element name="TCustomListBox.AddItem.AnObject">
        <short>The associated object, or Nil when not used</short>
      </element>

      <element name="TCustomListBox.Click" link="#lcl.controls.TControl.Click">
        <short>Performs the Changed method when the control is clicked</short>
        <descr>
          <p>
            <var>Click</var> is an overridden method in <var>TCustomListBox</var>, and calls the inherited method on entry. Click calls the <var>Changed</var> method (inherited from <var>TControl</var>) to perform the <b>CM_CHANGED</b> control message. Click is used in the implementation of the <var>DoSelectionChange</var> method when the control is changed by a user interaction.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.DoSelectionChange"/>
          <link id="#lcl.controls.TControl.Changed"/>
        </seealso>
      </element>

      <element name="TCustomListBox.Clear">
        <short>Removes all items from the list box control</short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove all values stored in the <var>Items</var> property. Clear calls the Clear method in Items, and sets the value in <var>ItemIndex</var> to <b>-1</b> to indicate that no item is selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="#lazutils.extendedstrings.TExtendedStringList.Clear"/>
          <link id="#rtl.classes.TStrings.Clear"/>
        </seealso>
      </element>

      <element name="TCustomListBox.ClearSelection">
        <short>Unselects all items in the control</short>
        <descr>
          <p>
            <var>ClearSelection</var> is a procedure used to clear one or more selected items in the control. When <var>MultiSelect</var> is enabled, values in the <var>Selected</var> property are reset to <b>False</b>. Otherwise, the <var>ItemIndex</var> property is set to <b>-1</b> to indicate that no item is selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.SelectRange"/>
        </seealso>
      </element>

      <element name="TCustomListBox.GetIndexAtXY">
        <short>Gets the index for the item at the given client coordinates</short>
        <descr>
        <p>
          <var>GetIndexAtXY</var> is an <var>Integer</var> function used to get the ordinal position in <var>Items</var> for the list item at the specified coordinates. No actions are performed in the method if a handle has not been allocated for the control (the widgetset class instance). GetIndexAtXY calls the <var>GetIndexAtXY</var> method in the widgetset class to get the return value.
        </p>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomListBox.GetIndexAtXY.Result">
        <short>The item index, -1 if an item could not be found</short>
      </element>
      <element name="TCustomListBox.GetIndexAtXY.X">
        <short>The X client coordinate</short>
      </element>
      <element name="TCustomListBox.GetIndexAtXY.Y">
        <short>The Y client coordinate</short>
      </element>

      <element name="TCustomListBox.GetIndexAtY" link="TCustomListBox.GetIndexAtXY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomListBox.GetIndexAtY.Result">
        <short>The item index, -1 if no item could be found</short>
      </element>
      <element name="TCustomListBox.GetIndexAtY.Y">
        <short>The Y client coordinate</short>
      </element>

      <element name="TCustomListBox.GetSelectedText">
        <short>Get the text for all selected items as a string value</short>
        <descr>
          <p>
            <var>GetSelectedText</var> is a <var>String</var> function used to retrieve a string with all selected items in the control. The return values uses each selected entry in Items separated by the LineEnding character sequence for the platform or operating system. The return value is an empty string ('') when <var>ItemIndex</var> does not contain a positive non-zero value (no item is selected) or <var>SelCount</var> contain 0 (zero).
          </p>
          <p>
            GetSelectedText iterates over the values in Items, and includes the string when its <var>Selected</var> property is set to <b>True</b>. This is useful when <var>MultiSelect</var> is enabled for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.SelCount"/>
        </seealso>
      </element>
      <element name="TCustomListBox.GetSelectedText.Result">
        <short>The item strings, one per line</short>
      </element>

      <element name="TCustomListBox.ItemAtPos">
        <short>Get the item index for the given client coordinates</short>
        <descr>
          <p>
            <var>ItemAtPos</var> is an <var>Integer</var> function used to get the index position in Items for the value at the specified screen coordinates.
          </p>
          <p>
            <var>Pos</var> is <var>TPoint</var> instance with the X and Y coordinates used in the method.
          </p>
          <p>
            <var>Existing</var> indicates whether the return value is set to -1 or the number of entries in <var>Items</var> when Pos refers to entry which does not exist. When Existing is set to <b>True</b>, -1 is returned for an invalid entry. Otherwise, the value in <var>Item.Count</var> is returned.
          </p>
          <p>
            ItemAtPos calls <var>GetIndexAtXY</var> using the X and Y values in Pos to locate the index for the item.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.GetIndexAtXY"/>
        </seealso>
      </element>
      <element name="TCustomListBox.ItemAtPos.Result">
        <short>The calculated item index, can be out of the Items bounds</short>
      </element>
      <element name="TCustomListBox.ItemAtPos.Pos">
        <short>The item position</short>
      </element>
      <element name="TCustomListBox.ItemAtPos.Existing">
        <short>True when the index is requested for insertion of a new item</short>
      </element>

      <element name="TCustomListBox.ItemRect">
        <short>Returns the client rectangle for an item (including scrollbar area)</short>
        <descr>
          <p>
            <var>Index</var> must be in the range 0 to <var>ItemCount</var> to be considered valid. The result is valid also for the next item, that will be added subsequently.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomListBox.ItemRect.Result">
        <short>The item area; all zeroes for an invalid item index</short>
      </element>
      <element name="TCustomListBox.ItemRect.Index">
        <short>The tentative item index</short>
      </element>

      <element name="TCustomListBox.ItemVisible">
        <short>Returns True if the item is at least partially visible in the scrollable list</short>
        <descr>
          <p>
            <var>ItemVisible</var> is a <var>Boolean</var> function used to determine if the item at the position in <var>Index</var> is at least partially visible in the list box control. The return value is <b>False</b> for the following conditions:
          </p>
          <ul>
            <li>Index is out of range for the values in Items.</li>
            <li>An item rectangle could not be retrieved from the widgetset class.</li>
            <li>
              The item rectangle is invalid for the control (where Bottom &lt; 0 or Top &gt; ClientHeight).
            </li>
          </ul>
          <p>
            Use <var>ItemFullyVisible</var> to determine if the specified list box item is fully visible in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ItemFullyVisible"/>
        </seealso>
      </element>
      <element name="TCustomListBox.ItemVisible.Result">
        <short>True when the specified item is at least partially visible in the control</short>
      </element>
      <element name="TCustomListBox.ItemVisible.Index">
        <short>Ordinal position for the item examined in the method</short>
      </element>

      <element name="TCustomListBox.ItemFullyVisible">
        <short>Returns True if the item is fully visible in the scrollable list</short>
        <descr>
          <p>
            <var>ItemFullyVisible</var> is a <var>Boolean</var> function used to determine the item at the position in <var>Index</var> is fully visible in the list box control. The return value is <b>False</b> under the following conditions:
          </p>
          <ul>
            <li>Index is out of range for the values in Items.</li>
            <li>An item rectangle could not be retrieved from the widgetset class.</li>
            <li>
              The item rectangle is invalid or obscured in the control (where Top &lt; 0 or Bottom &gt; ClientHeight).
            </li>
          </ul>
          <p>
            Use <var>ItemVisible</var> to determine if the specified item is at least partially visible in the list box control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ItemVisible"/>
        </seealso>
      </element>
      <element name="TCustomListBox.ItemFullyVisible.Result">
        <short>True when the specified item is fully visible in the list box control</short>
      </element>
      <element name="TCustomListBox.ItemFullyVisible.Index">
        <short>Ordinal position for the item examined in the method</short>
      </element>

      <element name="TCustomListBox.LockSelectionChange">
        <short>Blocks selection changes during update to the widgetset class</short>
        <descr>
          <p>
            Increments the internal counter used to track selection change events. Used in the implementation of the <var>AssignCacheToItemData</var>, <var>InitializeWnd</var>, <var>FinalizeWnd</var>, <var>UpdateSelectionMode</var>, <var>UpdateSorted</var>, and <var>SetItems</var> methods.
          </p>
          <p>
            The value is examined when the <b>LM_SelChange</b> message is handled for the control.
          </p>
          <p>
            <var>UnlockSelectionChange</var> is used to decrement the internal counter.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.UnlockSelectionChange"/>
        </seealso>
      </element>

      <element name="TCustomListBox.MakeCurrentVisible">
        <short>Makes the item at ItemIndex visible, possibly scrolling the list</short>
        <descr>
          <p>
            <var>MakeCurrentVisible</var> is a procedure used to ensure that the current item selected in the control is also visible. The current selection is the value in Items stored at the position in ItemIndex. No actions are performed in the method when ItemIndex is out of bounds.
          </p>
          <p>
            MakeCurrentVisible calls <var>ItemFullyVisible</var> to determine if the item at <var>ItemIndex</var> is already visible in the scrollable list. No additional actions are needed in the method when the item is already visible. Otherwise, the value in ItemIndex is assigned to the <var>TopIndex</var> property which causes the selected item to scroll to the top of the visible area in the list box.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.ItemFullyVisible"/>
          <link id="TCustomListBox.ItemVisible"/>
          <link id="TCustomListBox.TopIndex"/>
          <link id="TCustomListBox.Items"/>
        </seealso>
      </element>

      <element name="TCustomListBox.MeasureItem">
        <short>Gets the height for an item in the list</short>
        <descr>
          <p>
            <var>MeasureItem</var> is a procedure used to get the height for an item displayed in the list box control.
          </p>
          <p>
            <var>Integer</var> is the ordinal position in <var>Items</var> for the value measured in the method.
          </p>
          <p>
            <var>TheHeight</var> is a variable parameter which contains the calculated height for the text in the item. The value on entry is the text height for the current font calculated using the <var>Canvas</var> for the control. The value returned in TheHeight is assigned to the <var>ItemHeight</var> property when it is a non-zero value.
          </p>
          <p>
            MeasureItems signals the <var>OnMeasureItem</var> event handler (when assigned) using the arguments passed to the method. An application must implement an object procedure to calculate the height for the requested item using the logic required.
          </p>
          <p>
            MeasureItem is called when the <b>LM_MeasureItem</b> message is handled for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.OnMeasureItem"/>
          <link id="TCustomListBox.ItemHeight"/>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Font"/>
          <link id="TCustomListBox.Canvas"/>
        </seealso>
      </element>
      <element name="TCustomListBox.MeasureItem.Index">
        <short>Ordinal position in Items for the string examined in the method</short>
      </element>
      <element name="TCustomListBox.MeasureItem.TheHeight">
        <short>The height of the item in pixels, can be changed by the event handler</short>
      </element>

      <element name="TCustomListBox.SelectAll">
        <short>Selects all items in the list (in ExtendedSelect mode)</short>
        <descr>
          <p>
            <var>SelectAll</var> is a procedure used to mark all of the values defined in the <var>Items</var> property as <var>Selected</var>. No actions are performed in the method when Items is empty (Count is 0). SelectAll calls the <var>SelectRange</var> method to select items at position 0 (zero) through Count-1 (inclusive).
          </p>
          <p>
            Use Selected to change the selection state for an individual item when <var>MultiSelect</var> is enabled. Set <var>ItemIndex</var> to -1 to clear the current selection when MultiSelect is not used.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ExtendedSelect"/>
          <link id="TCustomListBox.SelectRange"/>
          <link id="TCustomListBox.Count"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.ItemIndex"/>
        </seealso>
      </element>

      <element name="TCustomListBox.SelectRange">
        <short>Changes the selection state for a range of Items in the control</short>
        <descr>
          <p>
            <var>SelectRange</var> is a procedure used to change the selection state for a range of <var>Items</var> in the list box control to the value specified in <var>ASelected</var>.
          </p>
          <p>
            <var>ALow</var> and <var>AHigh</var> contain the ordinal positions in Items affected in the method. ALow must be a positive integer value or zero (<b>0</b>). AHigh must be less than the value in the Count property for Items. When either value is out of range, no actions are performed in the method.
          </p>
          <p>
            When <var>MultiSelect</var> is set to <b>True</b>, the widgetset class is notified of the changes to item selection state and <var>DoSelectionChange</var> is called to trigger the <var>OnSelectionChange</var> event handler (when assigned). No actions are performed in the method when MultiSelect is set to <b>False</b>.
          </p>
          <p>
            SelectRange is similar to the <var>SelectAll</var> method, but limits the affected items to the specified range of values - and only when MultiSelect is enabled.
          </p>
          <p>
            Use <var>SelCount</var> to determine the number of Items selected in the control when MultiSelect is enabled.
          </p>
          <p>
            Use <var>Selected</var> to maintain the selection state for a single entry in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.SelectAll"/>
          <link id="TCustomListBox.DoSelectionChange"/>
          <link id="TCustomListBox.OnSelectionChange"/>
          <link id="TCustomListBox.ClickOnSelChange"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.SelCount"/>
        </seealso>
      </element>
      <element name="TCustomListBox.SelectRange.ALow">
        <short>Ordinal position for the initial item changed in the method</short>
      </element>
      <element name="TCustomListBox.SelectRange.AHigh">
        <short>Ordinal position for the final item changed in the method</short>
      </element>
      <element name="TCustomListBox.SelectRange.ASelected">
        <short>True if the items are selected; False when they are unselected</short>
      </element>

      <element name="TCustomListBox.DeleteSelected">
        <short>Removes one or more selected entries from the Items property</short>
        <descr>
          <p>
            <var>DeleteSelected</var> is a procedure used to delete one or more entries in the <var>Items</var> property based on their selection state.
          </p>
          <p>
            DeleteSelected uses the value in <var>MultiSelect</var> to determine if multiple values in Items are examined and removed. When MultiSelect is <b>True</b>, the values in Items are visited in reverse order and the Delete method in Items is called if the item is <var>Selected</var>. When MultiSelect is not enabled, the value in the <var>ItemIndex</var> property is used to examine a single entry and remove it when it is Selected.
          </p>
          <p>
            No values are removed from Items when none of the entries in Selected are <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.MultiSelect"/>
        </seealso>
      </element>

      <element name="TCustomListBox.UnlockSelectionChange">
        <short>Removes a previous selection change lock</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TCustomListBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TCustomListBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TCustomListBox.Canvas"/>

      <element name="TCustomListBox.ClickOnSelChange">
        <short>Allows selection changes to generate a Click event</short>
        <descr>
          <p>
            Delphi generates an <var>OnClick</var> event when the selection changes. The LCL adds a more specific <var>OnSelectionChange</var> event.
          </p>
          <p>
            Set <var>ClickOnSelChange</var> to <b>False</b> when selection changes should be handled by  the OnSelectionChange event, and should not generate an OnClick event.  Setting  ClickOnSelChange to <b>True</b> gives the Delphi compatible behavior. The default value for the property is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.OnClick"/>
          <link id="TCustomListBox.OnSelectionChange"/>
        </seealso>
      </element>

      <element name="TCustomListBox.Columns">
        <short>The number of visible vertical columns displayed in the control</short>
        <descr>
          <p>
            A list box can have multiple columns, as well as multiple rows. When <var>Columns</var> is greater than 0 (zero), it specifies the number of columns that are visible without horizontal scrolling. i. e. the width of a single column becomes Width/Columns. Setting a new value for Columns causes the widgetset class to be notified when a handle has been allocated for the control.
          </p>
        </descr>
      </element>

      <element name="TCustomListBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>

      <element name="TCustomListBox.Count">
        <short>The number of items defined in the scrollable list box</short>
        <descr>
          <p>
            <var>Count</var> is a read-only <var>Integer</var> property which indicates the number of <var>Items</var> defined in the control. Count is provided for Delphi compatibility, and redirects access to the Count property in Items.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
        </seealso>
      </element>

      <element name="TCustomListBox.ExtendedSelect">
        <short>
          True when a contiguous range of items can be selected by a Shift+Click. Default is True.
        </short>
        <descr>
          <p>
            Normally a click into the list selects one item, and deselects all other items.
          </p>
          <p>
            When <var>MultiSelect</var> is <b>True</b>, the user can select/deselect further items with Ctrl+Click.
          </p>
          <p>
            When <var>ExtendedSelect</var> is also <b>True</b>, the user can Shift-click on an item, to select all items between this and the last selected item.
          </p>
        </descr>
      </element>

      <element name="TCustomListBox.Font" link="#LCL.Controls.TControl.Font"/>

      <element name="TCustomListBox.IntegralHeight">
        <short>
          Not implemented: shrink the Height of the widget, so that it only shows fully visible rows
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomListBox.ItemHeight">
        <short>The default height for an item displayed in the list</short>
        <descr>
          <p>
            <var>ItemHeight</var> is an <var>Integer</var> property which contains the default height for an item displayed in the list box control. For a list box using the <b>lbStandard</b> <var>Style</var>, the property value is derived using the dimensions in the <var>ItemRect</var> for the item stored at <var>TopIndex</var>. For other styles, the stored property`value is used. Setting a new value for the property causes the <var>RecreateWnd</var> method to be called when a handle has been allocated for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ItemRect"/>
          <link id="TCustomListBox.TopIndex"/>
        </seealso>
      </element>

      <element name="TCustomListBox.ItemIndex">
        <short>Ordinal position for the currently selected item, -1 if none</short>
        <descr>
          <p>
            <var>ItemIndex</var> is an <var>Integer</var> property which contains the position for the current selection in the control. If <var>MultiSelect</var> is <b>True</b>, <var>ItemIndex</var> represents the selected item which also has focus. Use the <var>Selected</var> property to access items when MultiSelect is enabled.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox"/>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.ExtendedSelect"/>
        </seealso>
      </element>

      <element name="TCustomListBox.Items">
        <short>The list of all items defined in the control</short>
        <descr>
          <p>
            <var>Items</var> is a <var>TStrings</var> property which contains the string values (and associated objects) displayed in the list box control. Reading allows access to the contents of the list (TStrings compatible). Assign another string list to the property to replace the Items in the control. Internally, Items is often cast to a <var>TExtendedStringList</var> to access the item attribute data for the entry.
          </p>
          <p>
            Use <var>ItemIndex</var> to access the selected item in the list box control. Use the <var>Selected</var> property to select or de-select values in Items when <var>MultiSelect</var> is enabled. Use <var>SelRange</var> to select a range of Items in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.SelRange"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="#rtl.Classes.TStrings"/>
        </seealso>
      </element>

      <element name="TCustomListBox.MultiSelect">
        <short>Allows selection of more than one item from the list</short>
        <descr>
          <p>
            <var>MultiSelect</var> is a <var>Boolean</var> property which indicates if multiple values in <var>Items</var> can be selected using the Ctrl+Click mouse button, or by setting values in the indexed <var>Selected</var> property. When set to <b>True</b>, selection state is determined by reading / writing the cached item data for the Selected items in the widgetset class. When set to <b>False</b>, the value in <var>ItemIndex</var> is used to determine the selected item.
          </p>
          <p>
            The default value for the property is <b>False</b>. Setting a new value for the property causes <var>UpdateSelectionMode</var> to be called to notify the widgetset class of the change.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.ExtendedSelect"/>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.SelectRange"/>
          <link id="TCustomListBox.DeleteSelected"/>
          <link id="TCustomListBox.ClearSelection"/>
        </seealso>
      </element>

      <element name="TCustomListBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TCustomListBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TCustomListBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>

      <element name="TCustomListBox.OnDrawItem">
        <short>Handler for painting of a list item in owner-draw mode</short>
        <descr>
          <p>
            <var>OnDrawItem</var> is a <var>TDrawItemEvent</var> property with the event handler signalled to render a list item when an owner-drawn method is used in the Style property. OnDrawItem is signalled (when assigned) from the DrawItem method. DrawItem provides the arguments for the event handler.
          </p>
          <p>
            An application should implement an object procedure to respond to the event notification. Use the Canvas for the control to get text metrics or render the control and any graphic images. An internal drawing routine, which uses the Font, Color, Layout and Alignment in the control, is called when OnDrawItem has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Style"/>
          <link id="TCustomListBox.Canvas"/>
          <link id="TCustomListBox.Font"/>
          <link id="TCustomListBox.Color"/>
          <link id="TCustomListBox.Layout"/>
          <link id="TCustomListBox.Alignment"/>
          <link id="TListBoxStyle"/>
          <link id="TDrawItemEvent"/>
        </seealso>
      </element>

      <element name="TCustomListBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TCustomListBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TCustomListBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TCustomListBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TCustomListBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>

      <element name="TCustomListBox.OnMeasureItem">
        <short>Handler invoked when the height for an item is needed</short>
        <descr>
          <p>
            <var>OnMeasureItem</var> is a <var>TMeasureItemEvent</var> property with the event handler signalled to get the height for specified item in the list box control. OnMeasureItem is signalled (when assigned) from the <var>MeasureItem</var> method, and occurs when the <b>LM_MeasureItem</b> message is handled for the control. MeasureItem provides the arguments passed to the event handler, while the message handler stores the calculated height in <var>ItemHeight</var> when it is not 0 (zero).
          </p>
          <p>
            An application must implement an object procedure to respond to the event notification. <var>Index</var> contains the position in <var>Items</var> with the string to examine in the event handler. On entry, <var>TheHeight</var> contains the text height for the current <var></var>Font calculated using the <var>Canvas</var> in the control. The value in TheHeight can be updated with the value derived in the event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.MeasureItem"/>
          <link id="TCustomListBox.ItemHeight"/>
          <link id="TCustomListBox.Style"/>
          <link id="TCustomListBox.Font"/>
          <link id="TCustomListBox.Canvas"/>
          <link id="TMeasureItemEvent"/>
        </seealso>
      </element>

      <element name="TCustomListBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TCustomListBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TCustomListBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TCustomListBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TCustomListBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TCustomListBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TCustomListBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TCustomListBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TCustomListBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>

      <element name="TCustomListBox.OnSelectionChange">
        <short>Handler invoked when an item is selected in the control</short>
        <descr>
          <p>
            <var>OnSelectionChange</var> is a <var>TSelectionChangeEvent</var> property with the event handler signalled when a selection is changed in the list box control. OnSelectionChange is signalled (when assigned) from the <var>DoSelectionChange</var> method, and occurs prior to calling the <var>Click</var> method for the control.
          </p>
          <p>
            The <var>User</var> argument indicates whether the selection change results from user interaction with the control (<b>True</b>), or from code or methods called at run-time (<b>False</b>).
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.DoSelectionChange"/>
          <link id="TCustomListBox.Click"/>
          <link id="TCustomListBox.ClickOnSelChange"/>
          <link id="TCustomListBox.SelectRange"/>
          <link id="TCustomListBox.MultiSelect"/>
        </seealso>
      </element>

      <element name="TCustomListBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TCustomListBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCustomListBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TCustomListBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>

      <element name="TCustomListBox.ScrollWidth">
        <short>The virtual width of the list box, in pixels</short>
        <descr>
          <p>
            This property determines, how far the list box can be scrolled horizontally. In a multi-column list box it also determines the total number of vertical columns, together with the <var>Columns</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Columns"/>
        </seealso>
      </element>

      <element name="TCustomListBox.SelCount">
        <short>The number of selected items in the list</short>
        <descr>
          <p>
            <var>SelCount</var> is a read-only <var>Integer</var> property which contains the number of <var>Items</var> selected in the list box control. The return value is the result returned by the <var>GetSelCount</var> method in the widgetset class, or 0 (zero) when a handle has not been allocated for the control. SelCount is significant when the <var>MultiSelect</var> property is enabled.
          </p>
          <p>
            Use <var>Selected</var> to read or write the selected state for a single value defined in the Items for the control.
          </p>
          <p>
            Use <var>SelectRange</var> to set the selected state for Items in a specified range of positions.
          </p>
          <p>
            Use <var>SelectAll</var> to select all Items in the control.
          </p>
          <p>
            Use <var>ClearSelection</var> to remove all item selections in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Selected"/>
          <link id="TCustomListBox.SelectRange"/>
          <link id="TCustomListBox.SelectAll"/>
          <link id="TCustomListBox.ClearSelection"/>
          <link id="TCustomListBox.MultiSelect"/>
          <link id="TCustomListBox.ExtendedSelect"/>
        </seealso>
      </element>

      <element name="TCustomListBox.Selected">
        <short>The Selected state for an item in the control</short>
        <descr>
          <p>
            <var>Selected</var> is an indexed <var>Boolean</var> property used to set the selection state for an item defined in the list box control.
          </p>
          <p>
            The index value is the ordinal position in <var>Items</var> with the selection state value. Read and write access for the property value call the <var>CheckIndex</var> method to verify that the index is in bounds for the defined Items in the control. CheckIndex raises an exception if an index value is not in the required range.
          </p>
          <p>
            Property values are read from the widgetset class when it has been created, or from the cached selection values when it has not. Write access ensures that <var>ItemIndex</var> is updated as  needed, and notifies the widgetset class and/or the item selection cache when a value is changed.
          </p>
          <p>
            Use <var>SelectAll</var> to set the selection state for all Items in the control.
          </p>
          <p>
            Use <var>SelectRange</var> to set the selection state for Items in the specified range of positions in the control.
          </p>
          <p>
            Use <var>ClearSelection</var> to reset the selection state for all Items in the list box control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.CheckIndex"/>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemIndex"/>
          <link id="TCustomListBox.SelectAll"/>
          <link id="TCustomListBox.SelectRange"/>
          <link id="TCustomListBox.ClearSelection"/>
        </seealso>
      </element>
      <element name="TCustomListBox.Selected.Index">
        <short>Ordinal position in the item list</short>
      </element>

      <element name="TCustomListBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>

      <element name="TCustomListBox.Sorted">
        <short>Determines whether the list entries are sorted in alphanumeric order</short>
        <descr>
          <p>
            <var>Sorted</var> is a <var>Boolean</var> property which determines whether the values in <var>Items</var> are sorted and stored in alphanumeric order in the control.
          </p>
          <p>
            Setting this property to <b>True</b> enables use of ascending alphanumeric case-insensitive sorting of items in the list. When <b>True</b>, new entries are added in sort order, and are not necessarily stored at the end of the list.
          </p>
          <p>
            Setting a new value for the property causes <var>UpdateSorted</var> to be called to notify the widgetset class of the change in order, or to update the <var>Sorted</var> property in <var>Items</var> when needed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.AddItem"/>
          <link id="TCustomListBox.UpdateSorted"/>
        </seealso>
      </element>

      <element name="TCustomListBox.Style">
        <short>Appearance of the list box (normal, owner-draw fixed, or owner-draw variable)</short>
        <descr>
          <p>
            <var>Style</var> is a <var>TListBoxStyle</var> property which controls the appearance of the <var>Items</var> drawn in the list box control. The default value for the property is <var>lbStandard</var>, and causes the appearance and text height native to the widgetset to be used. When another value from TListBoxStyle is used, Items are drawn using the routine assigned to the <var>OnDrawItem</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemHeight"/>
          <link id="TCustomListBox.OnDrawItem"/>
          <link id="TListBoxStyle"/>
        </seealso>
      </element>

      <element name="TCustomListBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TCustomListBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>

      <element name="TCustomListBox.TopIndex">
        <short>Index of the first visible (or top-most) item</short>
        <descr>
          <p>
            <var>TopIndex</var> is an <var>Integer</var> property which contains the ordinal position in <var>Items</var> for the first visible list item in the scrollable control. The default value for the property is <b>0</b> (the first value in Items).
          </p>
          <p>
            The property value is retrieved from the widgetset class when a handle has been allocated for the control. Setting a new value for the property causes the widgetset class to be notified of the value change when a handle has been allocated for the control.
          </p>
          <p>
            The value in TopIndex is updated in the <var>MakeCurrentVisible</var> method where the current selection in <var>ItemIndex</var> is assigned to the property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomListBox.Items"/>
          <link id="TCustomListBox.ItemHeight"/>
          <link id="TCustomListBox.MakeCurrentVisible"/>
        </seealso>
      </element>

      <element name="TCustomListBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TCustomListBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TListBox">
        <short>Control which displays a scrollable list of strings</short>
        <descr>
          <p>
            The strings are stored in the <var>Items</var> list.
          </p>
          <p>
            At design time, a click on the ellipsis character (<b>...</b>) next to the <var>Items</var> entry in the Object Inspector opens a string-list editor in which the individual text-strings for the list items can be entered or edited. The editor also allows the entries to be sorted alphabetically in normal or reverse order.
          </p>
        </descr>
        <seealso>
          <link id="TComboBox"/>
          <link id="HowToUseStdCtrls"/>
        </seealso>
      </element>

      <element name="TListBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TListBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TListBox.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TListBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TListBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TListBox.ClickOnSelChange" link="#LCL.StdCtrls.TCustomListBox.ClickOnSelChange"/>
      <element name="TListBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TListBox.Columns" link="#LCL.StdCtrls.TCustomListBox.Columns"/>
      <element name="TListBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TListBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TListBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TListBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TListBox.ExtendedSelect" link="#LCL.StdCtrls.TCustomListBox.ExtendedSelect"/>
      <element name="TListBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TListBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TListBox.IntegralHeight" link="#LCL.StdCtrls.TCustomListBox.IntegralHeight"/>
      <element name="TListBox.Items" link="#LCL.StdCtrls.TCustomListBox.Items"/>

      <element name="TListBox.ItemHeight" link="#LCL.StdCtrls.TCustomListBox.ItemHeight">
        <short>Get or set the height of a single item</short>
        <descr>
          <p>
            Works on Windows. Implemented on GTK2, but some GTK versions ignore it. Qt and Carbon have not implemented it.
          </p>
        </descr>
        <notes>
          <note>?</note>
          <note>Is this still the case?</note>
        </notes>
      </element>

      <element name="TListBox.MultiSelect" link="#LCL.StdCtrls.TCustomListBox.MultiSelect"/>
      <element name="TListBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TListBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TListBox.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TListBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TListBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TListBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TListBox.OnDrawItem" link="#LCL.StdCtrls.TCustomListBox.OnDrawItem"/>
      <element name="TListBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TListBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TListBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TListBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TListBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TListBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TListBox.OnMeasureItem" link="#LCL.StdCtrls.TCustomListBox.OnMeasureItem"/>
      <element name="TListBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TListBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TListBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TListBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TListBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TListBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TListBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TListBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TListBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TListBox.OnSelectionChange" link="#LCL.StdCtrls.TCustomListBox.OnSelectionChange"/>
      <element name="TListBox.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TListBox.OnStartDrag"/>
      <element name="TListBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TListBox.ParentBidiMode"/>
      <element name="TListBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TListBox.ParentShowHint"/>
      <element name="TListBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TListBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TListBox.ScrollWidth" link="TCustomListBox.ScrollWidth"/>
      <element name="TListBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TListBox.Sorted" link="#LCL.StdCtrls.TCustomListBox.Sorted"/>
      <element name="TListBox.Style" link="#LCL.StdCtrls.TCustomListBox.Style"/>
      <element name="TListBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TListBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TListBox.TopIndex" link="#LCL.StdCtrls.TCustomListBox.TopIndex"/>
      <element name="TListBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TCustomEdit">
        <short>The base class for controls presenting editable text</short>
        <descr>
          <p>
            <var>TCustomEdit</var> is a <var>TWinControl</var> descendant which implements the base class for an edit control presenting a single line of text. TCustomEdit provides properties, methods, and events needed for common editing features in the control, including:
          </p>
          <ul>
            <li>Text</li>
            <li>TextHint</li>
            <li>Modified</li>
            <li>ReadOnly</li>
            <li>MaxLength</li>
            <li>Clear</li>
            <li>NumbersOnly</li>
            <li>CharCase</li>
            <li>EchoMode</li>
            <li>PasswordChar</li>
            <li>AutoSelect</li>
            <li>SelectAll</li>
            <li>SelStart</li>
            <li>SelLength</li>
            <li>SelText</li>
            <li>HideSelection</li>
            <li>ClearSelection</li>
            <li>CaretPos</li>
            <li>CopyToClipboard</li>
            <li>CutToClipboard</li>
            <li>PasteFromClipboard</li>
            <li>Undo</li>
          </ul>
          <p>
            Do not create instances of TCustomEdit in an application; use one of the descendent classes like <var>TEdit</var>, <var>TLabeledEdit</var>, <var>TMaskEdit</var>, or <var>TMemo</var>.
          </p>
        </descr>
        <seealso>
          <link id="TEdit"/>
          <link id="TMemo"/>
          <link id="#lcl.extctrls.TLabeledEdit"/>
          <link id="#lcl.maskedit.TMaskEdit"/>
          <link id="#lcl.controls.TWinControl"/>
        </seealso>
      </element>

      <element name="TCustomEdit.FAlignment" link="TCustomEdit.Alignment"/>
      <element name="TCustomEdit.FAutoSelect" link="TCustomEdit.AutoSelect"/>
      <element name="TCustomEdit.FAutoSelected" link="TCustomEdit.AutoSelected"/>
      <element name="TCustomEdit.FCharCase" link="TCustomEdit.CharCase"/>
      <element name="TCustomEdit.fCaretPos" link="TCustomEdit.CaretPos"/>
      <element name="TCustomEdit.FEchoMode" link="TCustomEdit.EchoMode"/>

      <element name="TCustomEdit.FEmulatedTextHintStatus">
        <short>Status for  the emulated TextHint for the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.FHideSelection" link="TCustomEdit.HideSelection"/>
      <element name="TCustomEdit.FMaxLength" link="TCustomEdit.MaxLength"/>
      <element name="TCustomEdit.FModified" link="TCustomEdit.Modified"/>
      <element name="TCustomEdit.FOnChangeHandler" link="TCustomEdit.AddHandlerOnChange"/>
      <element name="TCustomEdit.FPasswordChar" link="TCustomEdit.PasswordChar"/>
      <element name="TCustomEdit.FReadOnly" link="TCustomEdit.ReadOnly"/>
      <element name="TCustomEdit.FNumbersOnly" link="TCustomEdit.NumbersOnly"/>
      <element name="TCustomEdit.FOnChange" link="TCustomEdit.OnChange"/>
      <element name="TCustomEdit.FSelLength" link="TCustomEdit.SelLength"/>
      <element name="TCustomEdit.FSelStart" link="TCustomEdit.SelStart"/>
      <element name="TCustomEdit.FTextChangedByRealSetText" link="TCustomEdit.RealSetText"/>
      <element name="TCustomEdit.FTextChangedLock" link="TCustomEdit.TextChanged"/>
      <element name="TCustomEdit.FTextHint" link="TCustomEdit.TextHint"/>

      <element name="TCustomEdit.ShowEmulatedTextHintIfYouCan">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.ShowEmulatedTextHint">
        <short>Displays a TextHint using the hint font for the control</short>
        <descr>
          <p>
            <var>ShowEmulatedTextHint</var> is a method used to display an emulated Text hint using the hint font for the control. Emulated text hints are used for widgetsets that do not natively support the <var>TextHint</var> capability.
          </p>
          <p>
            ShowEmulatedTextHint gets the Hint font for the display by calling CreateEmulatedTextHintFont, and passes the value to the widgetset class. The value in <var>Text</var> is set to the text in the TextHint property. The widgetset class is notified of the property changes,  and an internal flag used to track emulated hint display is set to <b>True</b>.
          </p>
          <p>
            The compliment to ShowEmulatedTextHint is <var>HideEmulatedTextHint</var>.
          </p>
          <p>
            ShowEmulatedTextHint is used in the implementation of the <var>ShowEmulatedTextHintIfYouCan</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CreateEmulatedTextHintFont"/>
          <link id="TCustomEdit.ShowEmulatedTextHintIfYouCan"/>
          <link id="TCustomEdit.TextHint"/>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.HideEmulatedTextHint"/>
        </seealso>
      </element>

      <element name="TCustomEdit.HideEmulatedTextHint">
        <short>
          Hides an emulated TextHint display and restores the editing font and PasswordChar in the control
        </short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.SetAlignment" link="TCustomEdit.Alignment">
        <short>Sets the value for the Alignment property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetAlignment.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.GetCanUndo">
        <short>Gets the value for the CanUndo property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.CanUndo"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetCanUndo.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.GetModified">
        <short>Gets the value for the Modified property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.Modified"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetModified.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.SetHideSelection">
        <short>Sets the value for the HideSelection property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.HideSelection"/>
        </seealso>
      </element>
      <element name="TCustomEdit.SetHideSelection.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetMaxLength">
        <short>Sets the value for the MaxLength property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.MaxLength"/>
        </seealso>
      </element>
      <element name="TCustomEdit.SetMaxLength.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetModified">
        <short>Sets the value for the Modified property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.Modified"/>
        </seealso>
      </element>
      <element name="TCustomEdit.SetModified.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetPasswordChar">
        <short>Sets the value for the PasswordChar property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.PasswordChar"/>
        </seealso>
      </element>
      <element name="TCustomEdit.SetPasswordChar.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomEdit.CanShowEmulatedTextHint">
        <short>Indicates if the value in TextHint can be displayed in the edit control</short>
        <descr>
          <p>
            <var>CanShowEmulatedTextHint</var> is a <var>Boolean</var> function which indicates if the value in TextHint can be emulated for the edit control. The return value is <b>True</b> when the following conditions are met:
          </p>
          <ul>
            <li>A handle has been allocated for the control.</li>
            <li>
              The widgetset class does <b>NOT</b> include the lcTextHint LCL capability flag (the lack of native widgetset support for the feature is why it's being emulated).
            </li>
            <li>
              ComponentState indicates that the component is not being loaded using LCL streaming, and is not being edited at design-time.
            </li>
            <li>TextHint is <b>NOT</b> an empty string ('').</li>
            <li>Text <b>IS</b> an empty string ('').</li>
            <li>The control is not Focused.</li>
          </ul>
          <p>
            CanShowEmulatedTextHint is used in the <var>WMKillFocus</var> method, and when the values in <var>Text</var> or <var>TextHint</var> are applied for the control.
          </p>
          <remark>
            In the current LCL implementation, TextHint display is emulated for all widgetsets except Win32/Win64 (since ComCtIVersionIE6) and QT5.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.TextHint"/>
          <link id="#lcl.controls.TWinControl.Focused"/>
          <link id="#rtl.classes.TComponent.ComponentState"/>
        </seealso>
      </element>
      <element name="TCustomEdit.CanShowEmulatedTextHint.Result">
        <short>True when the emulated text hint can be displayed</short>
      </element>


      <element name="TCustomEdit.CalculatePreferredSize" link="#lcl.controls.TWinControl.CalculatePreferredSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomEdit.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomEdit.CalculatePreferredSize.WithThemeSpace">
        <short/>
     </element>


     <element name="TCustomEdit.CreateParams" link="#lcl.controls.TWinControl.CreateParams">
       <short/>
       <descr/>
       <seealso>
         <link id="#lcl.controls.TWinControl.CreateParams"/>
       </seealso>
     </element>
     <element name="TCustomEdit.CreateParams.Params">
       <short/>
     </element>


      <element name="TCustomEdit.CreateEmulatedTextHintFont">
        <short>Gets the font instance used for an emulated TextHint display</short>
        <descr>
          <p>
            <var>CreateEmulatedTextHintFont</var> is a <var>TFont</var> function which gets the font instance used to display an emulated TextHint in the control. It is retrieved by calling the <var>CreateEmulatedTextHintFont</var> method in the widgetset class. Widgetset classes use the font assigned to the control, but change the font color to <b>clGrayText</b>.
          </p>
          <p>
            CreateEmulatedTextHintFont is called from the <var>ShowEmulatedTextHint</var> and <var>FontChanged</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.FontChanged"/>
          <link id="TCustomEdit.ShowEmulatedTextHint"/>
        </seealso>
      </element>
      <element name="TCustomEdit.CreateEmulatedTextHintFont.Result">
        <short>TFont isntance used for the emulated TextHint</short>
      </element>

      <element name="TCustomEdit.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.TextChanged">
        <short>Applies case conversion (if needed), and updates the editing cursor selection text</short>
        <descr>
          <p>
            <var>TextChangedM</var> is a an overridden method used to perform actions needed when the <b>CM_TEXTCHANGED</b> message is handled for the control. No actions are performed in the method when a previous call to TextChanged has not been completed.
          </p>
          <p>
            TextChanged uses the value in <var>CharCase</var> to determine if case conversion is applied to the value in Text. When CharCase contains <var>ecUpperCase</var> or <var>ecLowerCase</var>, the corresponding UTF-8 conversion routine is called. When Text is modified in the method, the values in <var>CaretPos</var>, <var>SelStart</var>, and <var>SelLength</var> are re-applied to the control. At run-time, the value in <var>Modified</var> is set to <b>True</b> when Text has been changed in the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CharCase"/>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.CaretPos"/>
          <link id="TCustomEdit.SelStart"/>
          <link id="TCustomEdit.SelLength"/>
          <link id="TCustomEdit.Modified"/>
          <link id="TCustomEdit.RealSetText"/>
          <link id="#lazutils.lazutf8.UTF8UpperCase"/>
          <link id="#lazutils.lazutf8.UTF8LowerCase"/>
          <link id="#lcl.controls.TControl.TextChanged"/>
        </seealso>
      </element>

      <element name="TCustomEdit.FontChanged" link="#lcl.controls.TWinControl.FontChanged">
        <short>Handles changes to the font used in the control</short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method in <var>TCustomEdit</var>. It ensures that the <var>Font</var> used for an emulated <var>TextHint</var> display is (re-)created when visible by calling <var>CreateEmulatedTextHintFont</var>.
          </p>
          <p>
            FontChanged calls the inherited method to set flags in the control, and to perfom notifications of the changed value to any child controls. The hint font is freed when the inherited method is completed.
          </p>
          <p>
            FontChanged is assigned as the <var>OnChange</var> event handler for the <var>TFont</var> class instance in the Font property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.TextHint"/>
          <link id="TCustomEdit.CreateEmulatedTextHintFont"/>
          <link id="#lcl.controls.TWinControl.FontChanged"/>
          <link id="#lcl.controls.TControl.FontChanged"/>
          <link id="#lcl.controls.TControl.Font"/>
        </seealso>
      </element>
      <element name="TCustomEdit.FontChanged.Sender">
        <short>Object for the event notification</short>
      </element>

      <element name="TCustomEdit.Change">
        <short>Performs actions needed when the text in the control is changed</short>
        <descr>
          <p>
            <var>Change</var> is a procedure used to perform actions need when the <b>CM_CHANGED</b> message is handled in the control. Change calls the inherited <var>Changed</var> method, and signals the <var>OnChange</var> and/or the internal FOnChangeHandler event handlers (when assigned).
          </p>
          <p>
            Change is called from the <var>TextChanged</var> method after case conversion and updates to the editing cursor and text selection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.OnChange"/>
          <link id="TCustomEdit.TextChanged"/>
          <link id="#lcl.controls.TControl.Changed"/>
        </seealso>
      </element>

      <element name="TCustomEdit.DoEnter" >
        <short>Invokes the OnEnter handler, then selects the entire text when AutoSelect is True.
        </short>
        <descr>
          <p>
            This special handling is required when the control is entered using keystrokes (keyboard navigation), and not by a mouse click.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoEnter"/>
        </seealso>
      </element>

      <element name="TCustomEdit.DoExit">
        <short>Clear the value in AutoSelected when the control loses focus</short>
        <descr/>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoExit"/>
        </seealso>
      </element>

      <element name="TCustomEdit.EditingDone">
        <short>Enforces the setting in the ReadOnly property</short>
        <descr>
          <p>
            <var>EditingDone</var> is an overriden method in <var>TCustomEdit</var>. It ensures that the inherited method is <b>NOT</b> called when the value in <var>ReadOnly</var> is <b>True</b>. EditingDone is called from the <var>KeyUpAfterInterface</var> method when the <var>VK_RETURN</var> key code is handled.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.EditingDone"/>
        </seealso>
      </element>

      <element name="TCustomEdit.GetCaretPos" link="TCustomEdit.CaretPos">
        <short>Gets the value for the CaretPos property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.CaretPos"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetCaretPos.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.GetNumbersOnly">
        <short>Gets the value for the NumbersOnly property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.NumbersOnly"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetNumbersOnly.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.GetReadOnly">
        <short>Gets the value for the ReadOnly property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.ReadOnly"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetReadOnly.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.GetSelLength">
        <short>Gets the value for the SelLength property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.SelLength"/>
        </seealso>
      </element>
      <element name="TCustomEdit.GetSelLength.Result">
        <short>The number of selected UTF-8 characters in the control</short>
      </element>

      <element name="TCustomEdit.GetSelStart" link="TCustomEdit.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.GetSelStart.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.GetSelText" link="TCustomEdit.SelText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.GetSelText.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomEdit.SetCaretPos" link="TCustomEdit.CaretPos">
        <short>Sets the value for the CaretPos property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetCaretPos.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetCharCase">
        <short>Sets the value for the CharCase property</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.CharCase"/>
        </seealso>
      </element>
      <element name="TCustomEdit.SetCharCase.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetEchoMode" link="TCustomEdit.EchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetEchoMode.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetNumbersOnly" link="TCustomEdit.TextHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetNumbersOnly.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetReadOnly" link="TCustomEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetReadOnly.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetSelLength" link="TCustomEdit.SelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetSelLength.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetSelStart" link="TCustomEdit.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetSelStart.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetSelText" link="TCustomEdit.SelText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetSelText.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.SetTextHint" link="TCustomEdit.TextHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.SetTextHint.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomEdit.ChildClassAllowed" link="#LCL.Controls.TWinControl.ChildClassAllowed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.ChildClassAllowed.Result">
        <short/>
      </element>
      <element name="TCustomEdit.ChildClassAllowed.ChildClass">
        <short/>
      </element>

      <element name="TCustomEdit.GetControlClassDefaultSize" link="#lcl.controls.TControl.GetControlClassDefaultSize">
        <short>Gets the dimensions for a new instance of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.GetControlClassDefaultSize.Result">
        <short>The dimensions for a new instance of the class</short>
      </element>

      <element name="TCustomEdit.MouseUp" link="#lcl.controls.TControl.MouseUp">
        <short>Selects all of the Text in the control when AutoSelect is True</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.MouseUp.Button">
        <short/>
      </element>
      <element name="TCustomEdit.MouseUp.Shift">
        <short/>
      </element>
      <element name="TCustomEdit.MouseUp.X">
        <short/>
      </element>
      <element name="TCustomEdit.MouseUp.Y">
        <short/>
      </element>

      <element name="TCustomEdit.RealGetText" link="#LCL.Controls.TControl.RealGetText">
        <short>Uses the TextHint display status when getting the value for Text</short>
        <descr>
          <p>
            <var>RealGetText</var> is an overridden method in <var>TCustomEdit</var>. It ensures that an  emulated <var>TextHint</var> display status is considered when getting the value for the <var>Text</var> property. In other words, the inherited method is <b>not</b> called when the TextHint display is visible. The return value is an empty string (<b>''</b>) in this case.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.TextHint"/>
        </seealso>
      </element>
      <element name="TCustomEdit.RealGetText.Result">
        <short>Value used for the Text property</short>
      </element>

      <element name="TCustomEdit.RealSetText" link="#LCL.Controls.TControl.RealSetText">
        <short>Updates Modified and the TextHint display when storing the new Text value</short>
        <descr>
          <p>
            <var>RealSetText</var> is an overridden method in <var>TCustomEdit</var>. It ensures that the value in <var>Modified</var> is updated when a new value in <var>Text</var> is applied to the <var>Caption</var> for the control. It also hides the <var>TextHint</var> display when the new value is not an empty string (<b>''</b>) by calling <var>HideEmulatedTextHint</var>.
          </p>
          <p>
            RealSetText calls the inherited method to store the Text value, and to adjust the control size when needed.
          </p>
          <p>
            The TextHint is re-displayed when it is hidden and <var>CanShowEmulatedTextHint</var> returns <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.HideEmulatedTextHint"/>
          <link id="TCustomEdit.CanShowEmulatedTextHint"/>
          <link id="TCustomEdit.Modified"/>
          <link id="TCustomEdit.Text"/>
          <link id="#lcl.controls.TWinControl.RealSetText"/>
          <link id="#lcl.controls.TControl.Caption"/>
        </seealso>
      </element>
      <element name="TCustomEdit.RealSetText.AValue">
        <short/>
      </element>

      <element name="TCustomEdit.KeyUpAfterInterface" link="#lcl.controls.TWinControl.KeyUpAfterInterface">
        <short>Handles the VK_RETURN key code in the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.KeyUpAfterInterface.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomEdit.KeyUpAfterInterface.Shift">
        <short>Shift, Ctrl, or Alt modifier for the key code</short>
      </element>

      <element name="TCustomEdit.WMChar" link="#lcl.controls.TWinControl.WMChar">
        <short>Prevents keystrokes from acting as accelerator keys</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.WMChar.Message">
        <short/>
      </element>

      <element name="TCustomEdit.CMWantSpecialKey">
        <short>Handles the CM_WANTSPECIALKEY message for the control</short>
        <descr>
          <p>
            For the Darwin platform/widgetset, the LCL must be prevented from handling the arrow (cursor) keys VK_LEFT, VK_RIGHT, VK_UP, and VK_DOWN. The Result in Message is set to 1 to indicate that these keys have already been handled. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso/>
        <notes><note>Calls an inherited method that does not exist.</note></notes>
      </element>
      <element name="TCustomEdit.CMWantSpecialKey.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomEdit.WndProc" link="#lcl.controls.TWinControl.WndProc">
        <short>Suppresses the CM_CHANGED control message when an emulated TextHint is visible</short>
        <descr>
          <p>
            <var>WndProc</var> is an overridden method in <var>TCustomEdit</var>. It ensures that the <b>CM_CHANGED</b> message is suppressed when an emulated <var>TextHint</var> is visible for the control. Otherwise, the inherited method is called to dispatch the control <var>Message</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomEdit.WndProc.Message">
        <short>Message examined and handled for the control</short>
      </element>

      <element name="TCustomEdit.ShouldAutoAdjust">
        <short>Determines if the control should auto-adjust its Height and/or Width</short>
        <descr>
          <p>
            <var>ShouldAutoAdjust</var> is an overridden method in <var>TCustomEdit</var> used to determine if the control can auto-adjust its Height and/or Width.
          </p>
          <p>
            <var>AWidth</var> and <var>AHeight</var> are variable Boolean parameters which indicate if the corresponding property can be auto-sized. AWidth is always set to True for TCustomEdit. AHeight is set to the inverse of the value in <var>AutoSize</var>.
          </p>
          <remark>
            Please note: ShouldAutoAdjust does <b>NOT</b> call the inherited method.
          </remark>
        </descr>
        <seealso>
           <link id="#lcl.controls.TControl.ShouldAutoAdjust"/>
        </seealso>
      </element>
      <element name="TCustomEdit.ShouldAutoAdjust.AWidth">
        <short>True when Width can be auto-adjusted</short>
      </element>
      <element name="TCustomEdit.ShouldAutoAdjust.AHeight">
        <short>True when Height can be auto-adjusted</short>
      </element>

      <element name="TCustomEdit.WMSetFocus" link="#lcl.controls.TWinControl.WMSetFocus">
        <short>Handles the LM_SETFOCUS message for the control</short>
        <descr>
          <p>
            <var>WMSetFocus</var> is an overridden method in <var>TCustomEdit</var>. It is used to hide a visible emulated <var>TextHint</var> display when the control is focused. Calls <var>HideEmulatedTextHint</var> to remove the TextHint display. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.WMSetFocus"/>
        </seealso>
      </element>
      <element name="TCustomEdit.WMSetFocus.Message">
        <short>Message handled in the method</short>
      </element>


      <element name="TCustomEdit.WMKillFocus" link="#lcl.controls.TWinControl.WMKillFocus">
        <short>Handles the LM_KILLFOCUS message for the control</short>
        <descr>
          Ensures that an emulated TextHint is displayed when allowed.
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.WMKillFocus"/>
        </seealso>
      </element>
      <element name="TCustomEdit.WMKillFocus.Message">
        <short>Message handled in the method</short>
      </element>


      <element name="TCustomEdit.AutoSelect">
        <short>Enables auto-selection of text when focused</short>
        <descr>
          <p>
            <var>AutoSelect</var> is a <var>Boolean</var> property which enables or disables auto-selection of text when the control receives focus. If <b>True</b>, the edit control will select all its text when it receives focus or when the Enter key is pressed. The default value for the property is <b>True</b>.
          </p>
          <p>
            AutoSelect is used in the KeyUpAfterInterface method, and determines if the SelectAll method is called when editing is completed in the control. It is used in MouseUp to determine if SelectAll is called when the Left mouse button is clicked. It is also used in DoEnter to determine if SelectAll is called when the Enter key is pressed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.SelectAll"/>
          <link id="TCustomEdit.AutoSelected"/>
          <link id="TCustomEdit.KeyUpAfterInterface"/>
          <link id="TCustomEdit.MouseUp"/>
          <link id="TCustomEdit.DoEnter"/>
        </seealso>
      </element>

      <element name="TCustomEdit.AutoSelected">
        <short>Set to True when the text selection was made automatically</short>
        <descr/>
        <seealso>
          <link id="TCustomEdit.AutoSelect"/>
        </seealso>
      </element>

      <element name="TCustomEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>

      <element name="TCustomEdit.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create ensures that values in the component and <var>ControlStyle</var> properties are set for the control. ControlStyle excludes the value csCaptureMouse and includes the value csRequiresKeyboardInput.
          </p>
          <p>
            Create sets the default values for properties, including: <var>MaxLength, HideSelection, ParentColor, TabStop, EchoMode, BorderStyle, AutoSelect, AutoSelected,</var> and <var>TextHint</var>.
          </p>
        </descr>
        <seealso>
        </seealso></element>
      <element name="TCustomEdit.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomEdit.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated for the internal change handler are freed, and calls the inherited destructor prior to exit.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomEdit.Clear">
        <short>Deletes all text in the edit box for the control</short>
        <descr>
          <p>
            <var>Clear</var> is a procedure used to remove the text in the edit box for the control. Clear sets the value in <var>Text</var> to an empty string ('').
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.Text"/>
        </seealso>
      </element>

      <element name="TCustomEdit.SelectAll">
        <short>Selects the entire text in the edit control</short>
        <descr>
          <p>
            <var>SelectAll</var> is a procedure used to select all of the text content in the edit box for the control.
          </p>
          <p>
            SelectAll checks the value in <var>Text</var> to ensure that content is available for the selection. No actions are performed in the method when Text is an empty string ('').
          </p>
          <p>
            When Text is not empty, the values in <var>SelStart</var> and <var>SelLength</var> are updated to use the content in Text starting at the first UTF-8-encoded character.  UTF8Length is called to get the length for Text, and the value stored in SelLength.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.SelStart"/>
          <link id="TCustomEdit.SelLength"/>
          <link id="TCustomEdit.SelText"/>
        </seealso>
      </element>

      <element name="TCustomEdit.ClearSelection">
        <short>Removes (deletes) the characters in the current text selection in the edit control</short>
        <descr>
          <p>
            <var>ClearSelection</var> is a procedure used to delete the characters for the currently selected text in the edit control. ClearSelection sets the value in <var>SelText</var> to an empty string ('') to remove the selected value in the edit control. No actions are performed in the method when <var>SelLength</var> contains 0 (zero).
          </p>
        </descr>
        <seealso>
          <link id='TCustomEdit.SelText'/>
          <link id='TCustomEdit.SelStart'/>
          <link id='TCustomEdit.SelLength'/>
          <link id='TCustomEdit.HideSelection'/>
        </seealso>
      </element>

      <element name="TCustomEdit.CopyToClipboard">
        <short>Copies the selected text in the control to the clipboard</short>
        <descr>
          <p>
            <var>CopyToClipboard</var> is a procedure used to copy the selected text in the control to the clipboard. CopyToClipboard calls the <var>Copy</var> method in the widgetset class when a handle has been allocated for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CutToClipboard"/>
          <link id="TCustomEdit.PasteFromClipboard"/>
        </seealso>
      </element>


      <element name="TCustomEdit.CutToClipboard">
        <short>Moves the selected text into the clipboard (removes it from the control)</short>
        <descr/>
        <seealso/>
      </element>


      <element name="TCustomEdit.PasteFromClipboard">
        <short>
          Inserts text from the clipboard at the current position in the control, possibly replacing the selected text
        </short>
        <descr/>
        <seealso/>
      </element>


      <element name="TCustomEdit.Undo">
        <short>Reverts the last edit action in the control</short>
        <descr/>
        <seealso/>
      </element>


      <element name="TCustomEdit.RemoveAllHandlersOfObject" link="#lcl.controls.TControl.RemoveAllHandlersOfObject">
        <short>Removes all event handlers assigned for the specified object</short>
        <descr/>
        <seealso/>
        <notes>
          <note>?</note>
        </notes>
      </element>
      <element name="TCustomEdit.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>


      <element name="TCustomEdit.AddHandlerOnChange">
        <short>Adds the specified OnChange event handler to the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomEdit.AddHandlerOnChange.AnOnChangeEvent">
        <short>Event handler added in the method</short>
      </element>
      <element name="TCustomEdit.AddHandlerOnChange.AsFirst">
        <short>True if the handler is stored at the top of the method list</short>
      </element>


      <element name="TCustomEdit.RemoveHandlerOnChange">
        <short>Removes the specified OnChange event handler for the control</short>
        <descr>
          <p>
            <var>RemoveHandlerOnChange</var> is a method used to remove the event handler specified in <var>AnOnChangeEvent</var> from the list of <var>OnChange</var> handlers for the control. AnOnChangeEvent is a <var>TNotifyEvent</var> instance, and its <var>Remove</var> method is used to locate and remove the <var>TMethod</var> entry for the handler. RemoveHandlerOnChange reverses the actions performed in <var>AddHandlerOnChange</var>, called when an OnChange event handler is assigned to the control.
          </p>
          <p>
            No actions are performed in the method when the internal OnChange method list has not been assigned (contains Nil).
          </p>
        </descr>
        <seealso>
          <link id="TNotifyEvent.Remove"/>
          <link id="#lazutis.lazmethodlist.TMethodList"/>
          <link id="#rtl.system.TMethod"/>
        </seealso>
      </element>
      <element name="TCustomEdit.RemoveHandlerOnChange.AnOnChangeEvent">
        <short>Event handler removed from the list of handlers in the control</short>
      </element>

      <element name="TCustomEdit.Alignment">
        <short>The horizontal alignment for the text in the control (left, right, or centered)</short>
        <descr>
          <p>
            <var>Alignment</var> is a <var>TAlignment</var> property which controls the horizontal alignment of text in the control. The default value for the property is taLeftJustify. See <link id="#rtl.classes.TAlignment">TAlignment</link> for more information about the enumeration values and their meanings.
          </p>
          <p>
            Alignment is used in <var>CreateParams</var> when alignment style flags are added to the creation parameters for the method. The value is also passed to the widgetset class then the handle is created (or re-created) for the class instance. Changing the value in the property causes the widgetset class to be notified when a handle has been allocated for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomEdit.AutoSize" link="#lcl.controls.TControl.AutoSize">
        <short/>
        <descr>
          The default value is <b>True</b> in TCustomEdit.
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.AutoSize"/>
        </seealso>
      </element>

      <element name="TCustomEdit.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>

      <element name="TCustomEdit.CanUndo">
        <short>Indicates whether recent changes can be reverted in the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.CaretPos">
        <short>The position of the editing cursor in the control</short>
        <descr>
          <p>
            CaretPos is a TPoint property which contains the coordinates for the caret (or editing cursor)  in the control. The coordinates reflects logical (UTF-8) characters and lines.
          </p>
          <dl>
            <dt>TPoint.X</dt>
            <dd>
              Contains the zero-based offset into the UTF-8-encoded characters in the control Text. Position 0 is immediately prior to the first UTF-8 character in Text. If there is selected text in the control, the caret is considered to be positioned right <b>after</b> the last selected character. Character positions are independent of the LTR/RTL Bidi-ness for the control.
            </dd>
            <dt>TPoint.Y</dt>
            <dd>
              Contains the zero-based relative line number for the editing cursor. For single-line edits the value is normally 0.
            </dd>
          </dl>
          <p>
            The value in CaretPos is updated by the widgetset class when key and selection control messages are handled.
          </p>
        </descr>
      </element>

      <element name="TCustomEdit.CharCase">
        <short>Allows to force the text into all upper or lower case</short>
        <descr>
          <p>The following conversions can be specified:</p>
          <ul>
            <li>Unchanged</li>
            <li>All upper case letters</li>
            <li>All lower case letters</li>
          </ul>
          <remark>Conversions apply to the entire text, and <b>cannot</b> be reverted.</remark>
        </descr>
      </element>

      <element name="TCustomEdit.EchoMode">
        <short>Allows to modify the text display, useful for entering passwords</short>
        <descr>
          <p>
            The following conversions can be specified:
          </p>
          <dl>
            <dt>emNormal</dt>
            <dd>No changes are performed.</dd>
            <dt>emNone</dt>
            <dd>Spaces are echoed instead for the control value.</dd>
            <dt>emPassword</dt>
            <dd>The value in PasswordChar is echoed.</dd>
          </dl>
          <remark>Conversions apply to the entire text, and can <b>not</b> be reverted.</remark>
        </descr>
      </element>

      <element name="TCustomEdit.EmulatedTextHintStatus">
        <short>Status for the emulated TextHint in the control</short>
        <descr>
          <p>
            <var>EmulatedTextHintStatus</var> is a read-only <var>TEmulatedTextHintStatus</var> property which contains the status value for an emulated TextHint display in the control. EmulatedTextHintStatus is used when a value has been assigned to the <var>TextHint</var> property and the widgetset does not natively implement the capability. The LCL emulates the TextHint display by assigning the value in TextHint to the <var>Text</var> for the control.
          </p>
          <p>
            EmulatedTextHintStatus is updated in the <var>ShowEmulatedTextHint</var> and  <var>HideEmulatedTextHint</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TEmulatedTextHintStatus"/>
          <link id="TCustomEdit.TextHint"/>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.ShowEmulatedTextHint"/>
          <link id="TCustomEdit.HideEmulatedTextHint"/>
        </seealso>
      </element>

      <element name="TCustomEdit.HideSelection">
        <short>Allows the selected text to be hidden when the control does not have focus</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomEdit.MaxLength">
        <short>The maximum length of the value entered in Text, or 0 (zero) for unlimited length</short>
        <descr>
          <p>
            In Delphi MaxLength only limits user input. The LCL actually restricts the maximum length of the stored text; this simplifies the implementation for non-Win32 widgetsets.
          </p>
        </descr>
      </element>

      <element name="TCustomEdit.Modified">
        <short>True when the value in Text has been changed</short>
        <descr>
          <p>
            <var>Modified</var> is a <var>Boolean</var> property which indicates if the value in <var>Text</var> has been changed when a <b>CM_TEXTCHANGED</b> message was handled for the control. The value is set to <b>True</b> in the <var>TextChanged</var> method. The value is reset to <b>False</b> when <var>RealSetText</var> is called to store the value in Text to the buffer for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.TextChanged"/>
          <link id="TCustomEdit.RealSetText"/>
        </seealso>
      </element>

      <element name="TCustomEdit.NumbersOnly">
        <short>Indicates if the edit control accepts numeric values only</short>
        <descr>
          <p>
            <var>NumbersOnly</var> is a <var>Boolean</var> property which controls whether the edit control is limited to numeric characters when edited. The default value for the property is <b>False</b>. Changing the property value causes the widgetset class to be notified when a handle has been allocated for the control.
          </p>
          <p>
            Used in <var>CreateParams</var> to include the <b>ES_NUMBER</b> edit style in the creation parameters for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomEdit.OnChange">
        <short>Event handler for any change in text</short>
        <descr>
          <p>
            Changes which trigger <var>OnChange</var> include changing the text programmatically and also changing it by the user, for example using the keyboard or a virtual keyboard. Note that some OnChange events in other classes might not be triggered on programmatically changes. One example is TComboBox.OnChange. This event should not happen when only starting up a form, without any extra code.
          </p>
        </descr>
        <seealso>
          <link id="TCustomComboBox.OnChange"/>
        </seealso>
        <notes>
          <note>Wording is awkward.</note>
        </notes>
      </element>

      <element name="TCustomEdit.PasswordChar">
        <short>Allows obfuscation of the displayed text, showing all characters as PasswordChar</short>
        <descr>
          <p>
            Typically used in password input, to hide the input from other viewers. The value in <var>Text</var> is still available for the <b>WM_GETTEXT</b> message.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.EchoMode"/>
        </seealso>
      </element>

      <element name="TCustomEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>

      <element name="TCustomEdit.ReadOnly">
        <short>Indicates if the user is prevented from changing the value for the Text in the control</short>
        <descr>
          <p>
            <var>ReadOnly</var> is a <var>Boolean</var> property which indicates if the user is prevented from changing the value in the control.
          </p>
          <p>
            ReadOnly is used in the <var>CreateParams</var> method to determine if the <b>ES_READONLY</b> edit style flag is included in the creation parameters for the control. The value is also passed to the widgetset class in the <var>InitializeWnd</var> method, and when the value for the property is changed.
          </p>
          <p>
            When ReadOnly is <b>True</b>, the <var>EditingDone</var> method does not signal the <var>OnEditingDone</var> event handler (in the ancestor).
          </p>
          <p>
            The default value for the property is <b>False</b>, and indicates that the value can be edited in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CreateParams"/>
          <link id="TCustomEdit.InitializeWnd"/>
          <link id="TCustomEdit.EditingDone"/>
          <link id="#lcl.controls.TControl.EditingDone"/>
          <link id="#lcl.controls.TControl.OnEditingDone"/>
        </seealso>
      </element>

      <element name="TCustomEdit.SelLength">
        <short>The number of currently selected UTF-8-encoded characters in the control</short>
        <descr>
          <p>
            <var>SelLength</var> is an <var>Integer</var> property which contains the number of UTF-8-encoded characters currently selected in the edit box for the control. The current selection is the value in <var>Text</var> starting at the ordinal position in <var>SelStart</var> and continuing for the number of characters in the property.
          </p>
          <p>
            The value for the property is read from the widgetset class when a handle has been allocated for the control. Otherwise, the internal member is read get the value for the property. Setting a new value for the property notifies the widgetset class when a handle has been allocated for the control.
          </p>
          <p>
            Use <var>SelStart</var> to set the zero-based position in Text for the first UTF-8-encoded character in the current text selection.
          </p>
          <p>
            Use <var>SelText</var> to examine the values selected in the control, or to replace the value in the current text selection. <var>ClearSelection</var> can be used to remove the characters in the current text selection for the control.
          </p>
          <p>
            Use <var>SelectAll</var> to make all values in Text the current text selection in the control.
          </p>
          <p>
            Use <var>HideSelection</var> to un-select the current text selection in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.SelText"/>
          <link id="TCustomEdit.SelStart"/>
          <link id="TCustomEdit.SelectAll"/>
          <link id="TCustomEdit.HideSelection"/>
          <link id="TCustomEdit.ClearSelection"/>
        </seealso>
      </element>

      <element name="TCustomEdit.SelStart">
        <short>The zero-based index for the first UTF-8 character in the current text selection</short>
        <descr>
          <p>
            <var>SelStart</var> is an <var>Integer</var> property which contains the ordinal position in <var>Text</var> for the UTF-8-encoded character at the start of the current text selection. The current text selection includes the number of characters in <var>SelLength</var>. SelStart is a zero-based value.
          </p>
          <p>
            The value for SelStart is read from the widgetset class when a handle has been allocated for the control. Otherwise, the value is read from the internal member for the property. Setting a new  value for the property notifies the widgetset class when a handle has been allocated for the control.
          </p>
          <p>
            Use <var>SelLength</var> for the number of UTF-8-encoded characters in the current text selection.
          </p>
          <p>
            Use <var>SelText</var> to examine the values selected in the control, or to replace the value in the current text selection. <var>ClearSelection</var> can be used to remove the characters in the current text selection for the control.
          </p>
          <p>
            Use <var>SelectAll</var> to make all values in Text the current text selection in the control.
          </p>
          <p>
            Use <var>HideSelection</var> to un-select the current text selection in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.SelLength"/>
          <link id="TCustomComboBox.SelStart"/>
        </seealso>
      </element>

      <element name="TCustomEdit.SelText">
        <short>The currently selected text in the edit box for the control</short>
        <descr>
          <p>
            <var>SelText</var> is a <var>String</var> property which contains the current text selection in the control. The current text selection is the UTF-8-encoded characters in <var>Text</var> identified by the <var>SelStart</var> and <var>SelLength</var> properties.
          </p>
          <p>
            The property value is derived by calling the <var>UTF8Copy</var> routine in <file>lazutf8.pas</file>. Setting a new value for the property causes the text selection in Text to be replaced with the specified value. The widgetset class is notified when a handle has been allocated for the control.
          </p>
          <p>
            Values must assigned to the SelStart and SelLength property before accessing SelText.
          </p>
          <p>
            SelText is updated when the <var>ClearSelection</var> is called to remove the text selection value from the content in Text. SelText is compared to Text to determine the value for <var>AutoSelected</var> when <b>VK_RETURN</b> key or <b>MouseUp</b> messages are handled.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.SelLength"/>
          <link id="TCustomEdit.SelStart"/>
          <link id="TCustomEdit.Text"/>
          <link id="TCustomEdit.AutoSelected"/>
          <link id="TCustomEdit.ClearSelection"/>
          <link id="#lazutils.lazutf8.UTF8Copy"/>
        </seealso>
      </element>

      <element name="TCustomEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TCustomEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>

      <element name="TCustomEdit.Text">
        <short>The text in the edit box for the control</short>
        <descr>
          <p>
            <var>Text</var> is a <var>TCaption</var> property which contains the UTF-8-encoded characters maintained as the value for the edit control.  The value for Text is read and written using the <var>RealGetText</var> and <var>RealSetText</var> methods. Not only do they provide code compatibiity with the Delphi VCL, they support use of emulated <var>TextHint</var> displays. The value in TextHint is assigned to Text when the inline hint text is displayed for the control.
          </p>
          <p>
            The value in Text may be altered in the <var>TextChanged</var> method when <var>CharCase</var> requires case conversion for the value in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.TextHint"/>
          <link id="TCustomEdit.TextChanged"/>
          <link id="TCustomEdit.CharCase"/>
          <link id="TCustomEdit.RealGetText"/>
          <link id="TCustomEdit.RealSetText"/>
        </seealso>
      </element>

      <element name="TCustomEdit.TextHint">
        <short>Default hint text shown when the Text property is empty and the control is not focused</short>
        <descr>
          <p>
            <var>TextHint</var> fills the <var>TCustomEdit</var> with the value in the property when the Text in the control is empty and the control does not have focus. This is different than Hint, which displays a balloon tip when ShowHint is set to <b>True</b> and the mouse is over the control.
          </p>
          <p>
            Setting a new value in TextHint causes the widgetset class to be notified, and the value is displayed in the edit control when allowed. If the new value is an empty string (''), the text hint is removed from the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TMemoScrollbar">
        <short>A scrollbar for use in Memo controls</short>
        <descr>
          <p>
            A scrollbar specifically for use with <var>TMemo</var> controls. Inherits most of its properties from its ancestor, <link id="#lcl.Forms.TControlScrollBar">TControlScrollBar</link>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TMemoScrollbar.GetHorzScrollBar" link="#LCL.Forms.TControlScrollBar.GetHorzScrollBar">
        <short>Gets the value for the HorzScrollBar property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TMemoScrollbar.GetHorzScrollBar.Result">
        <short>Value for the property</short>
      </element>

      <element name="TMemoScrollbar.GetVertScrollBar" link="#LCL.Forms.TControlScrollBar.GetVertScrollBar">
        <short>Gets the value for the VertScrollBar property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TMemoScrollbar.GetVertScrollBar.Result">
        <short>Value for the property</short>
      </element>

      <element name="TMemoScrollbar.Increment" link="#LCL.Forms.TControlScrollBar.Increment"/>
      <element name="TMemoScrollbar.Page" link="#LCL.Forms.TControlScrollBar.Page"/>
      <element name="TMemoScrollbar.Smooth" link="#LCL.Forms.TControlScrollBar.Smooth"/>
      <element name="TMemoScrollbar.Position" link="#LCL.Forms.TControlScrollBar.Position"/>
      <element name="TMemoScrollbar.Range" link="#LCL.Forms.TControlScrollBar.Range"/>
      <element name="TMemoScrollbar.Size" link="#LCL.Forms.TControlScrollBar.Size"/>
      <element name="TMemoScrollbar.Visible" link="#LCL.Forms.TControlScrollBar.Visible"/>

      <element name="TCustomMemo">
        <short>The base class for multi-line text controls</short>
        <descr>
          <p>
            <var>TCustomMemo</var> is a <var>TCustomEdit</var> descendant which implements the base class used for a multi-line edit control. TCustomMemo extends TCustomEdit with additional properties and methods needed for the control. Overridden methods are provided to create and initialize the control using style flags needed for the widgetset class.
          </p>
          <p>
            The textual values in the multi-line control can be accessed using the <var>Lines</var> property. An individual line of text can be accessed by its ordinal position in List. For example:
          </p>
          <code>
            // var sContent: String; ...
            sContent := AMemo.Lines[2];
          </code>
          <p>
            This provides access to the third value in List (index positions are zero-based).
          </p>
          <p>
            The values for all of the text in Lines can be retrieved as a single String using the <var>Text</var> property in the <var>TStrings</var> class instance. Each line of text in Lines is separated by the <var>LineEnding</var> character sequence for the host platform or operating system. For example:
          </p>
          <code>
            // var sContent: String; ...
            sContent := AMemo.Lines.Text;
          </code>
          <p>
            The text displayed in the control uses the attributes defined in the <var>Font</var> property. No capabilities are provided for formatting individual characters, word, or lines in the content for the control.
          </p>
          <p>
            Both horizontal and vertical scrollbars can be used in the control. Use the <var>ScrollBar</var> property to define the scrollbars displayed for the control. It can be used to enable automatic scrollbars which are only displayed when the content for the control does not fit within its bounds.
          </p>
          <p>
            Use the <var>Append</var> method to add a line to text to the values in Lines.
          </p>
          <p>
            Use the <var>WantTabs</var> and <var>WantReturns</var> properties to determine whether the correspondings keys are captured and stored in Lines. This affects the way control messages are applied to the control.
          </p>
          <p>
            Use <var>WordWrap</var> to indicate if the control should automatically wrap a line of text longer than the visible area for the control.
          </p>
          <p>
            Applications should not create instances of TCustomMemo; use <var>TMemo</var> instead.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.ScrollBars"/>
          <link id="TCustomMemo.HorzScrollBar"/>
          <link id="TCustomMemo.VertScrollBar"/>
          <link id="TCustomMemo.Lines"/>
          <link id="TCustomMemo.WordWrap"/>
          <link id="TCustomMemo.WantTabs"/>
          <link id="TCustomMemo.WantReturns"/>
          <link id="#lcl.controls.TControl.Font"/>
          <link id="TCustomEdit"/>
          <link id="TMemo"/>
        </seealso>
      </element>

      <element name="TCustomMemo.FHorzScrollBar" link="TCustomMemo.HorzScrollBar"/>
      <element name="TCustomMemo.FLines" link="TCustomMemo.Lines"/>
      <element name="TCustomMemo.FScrollBars" link="TCustomMemo.ScrollBars"/>
      <element name="TCustomMemo.FVertScrollBar" link="TCustomMemo.VertScrollBar"/>
      <element name="TCustomMemo.FWantReturns" link="TCustomMemo.WantReturns"/>
      <element name="TCustomMemo.FWantTabs" link="TCustomMemo.WantTabs"/>
      <element name="TCustomMemo.FWordWrap" link="TCustomMemo.WordWrap"/>

      <element name="TCustomMemo.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomMemo.CreateParams" link="TCustomEdit.CreateParams">
        <short>Updates creation flags used to create the handle for the control</short>
        <descr>
          <p>
            <var>CreateParams</var> is overridden in <var>TCustomMemo</var>, and calls the inherited method on entry. CreateParams ensures that style flags needed for the multi-line control are included in the <var>Style</var> property in the <var>Params</var> argument.
          </p>
          <p>
            Values from the <var>ScrollBars</var> and <var>WordWrap</var> properties are checked, and flags are added as needed. ScrollBars causes window style flags to be added like WS_HSCROLL and/or WS_VSCROLL. When <var>WordWrap</var> is set to True, the WS_HSCROLL window style is removed from the creation parameters. Otherwise, the edit style ES_AUTOHSCROLL is added to the creation parameters.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CreateParams"/>
          <link id="TCustomEdit.ScrollBars"/>
          <link id="TCustomEdit.WordWrap"/>
        </seealso>
      </element>
      <element name="TCustomMemo.CreateParams.Params">
        <short>Creation parameters for the control</short>
      </element>

      <element name="TCustomMemo.InitializeWnd" link="TCustomEdit.InitializeWnd">
        <short>Copies existing string values from the widgetset class</short>
        <descr>
          <p>
            <var>InitializeWnd</var> is an overridden method in <var>TCustomMemo</var>. InitializeWnd ensures that property values from widgetset class are stored in the current class intance when handle for the control is created (or re-created). InitializeWnd is called after the handle for the control was created, but before the the handle for child controls is created.
          </p>
          <p>
            InitializeWnd ensures that string values in the widgetset class (if any) are copied to a new <var>TStrings</var> instance and assigned to the <var>Lines</var> property. The previous TStrings instance in Lines is freed.
          </p>
          <p>
            InitializeWnd calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.Lines"/>
          <link id="TCustomEdit.InitializeWnd"/>
          <link id="#rtl.classes.TStrings"/>
        </seealso>
      </element>

      <element name="TCustomMemo.FinalizeWnd" link="#lcl.controls.TWinControl.FinalizeWnd">
        <short>Frees resources when the handle for the control is freed</short>
        <descr>
          <p>
            <var>FinalizeWnd</var> ensures that string values in <var>Lines</var> are freed in the widgetset class before the handle is destroyed for the control. Existing text (and objects) are copied, and assigned to the member variable for Lines after the widgetset class has been notified.
          </p>
          <p>
            FinalizeWnd calls the inherited method proper to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.Lines"/>
        </seealso>
      </element>

      <element name="TCustomMemo.RealGetText">
        <short>Returns the textual content stored in Lines as a single String value</short>
        <descr/>
        <seealso>
          <link id="#rtl.Classes.TStrings.Text"/>
          <link id="#LCL.Controls.TControl.RealGetText">TControl.RealGetText</link>
        </seealso>
        <notes><note>?</note></notes>
      </element>
      <element name="TCustomMemo.RealGetText.Result">
        <short>The entire text in a single string</short>
      </element>

      <element name="TCustomMemo.RealSetText">
        <short>Replaces the value in <var>Lines.Text</var></short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.RealSetText">TControl.RealSetText</link>
        </seealso>
      </element>
      <element name="TCustomMemo.RealSetText.AValue">
        <short>
          Sets the value for the control from a single string.
        </short>
        <descr>
          <p>
            Sets the value for the control from a single string. Lines are separated by LineFeed (LF) and/or CarriageReturn (CR) characters.
          </p>
        </descr>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomMemo.GetCachedText" link="#LCL.Controls.TControl.GetCachedText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomMemo.GetCachedText.Result">
        <short>Always False, a cache is not implemented</short>
      </element>
      <element name="TCustomMemo.GetCachedText.CachedText">
        <short>The <var>CachedText</var> of type TCaption that is being fetched</short>
      </element>

      <element name="TCustomMemo.GetCaretPos">
        <short>Get the value for the CaretPos property</short>
        <descr>
          <p>
            <var>GetCaretPosition</var> is an overridden method in <var>TCustomMemo</var> used to get the value for the <var>CaretPos</var> property. It calls the GetCaretPos method in the widgetset class to get the return value for the method.
          </p>
        </descr>
        <seealso>
           <link id="TCustomMemo.CaretPos"/>
           <link id="TCustomMemo.SetCaretPos"/>
           <link id="#LCL.StdCtrls.TCustomEdit.GetCaretPos"/>
        </seealso>
      </element>
      <element name="TCustomMemo.GetCaretPos.Result">
        <short>Returns the position of the editing cursor or caret</short>
      </element>

      <element name="TbnCustomMemo.SetCaretPos">
        <short>Sets the position for the editing cursor or caret to the specified location</short>
        <descr>
          <p>
            <var>SetCaretPos</var> is an overridden method in <var>TCustomMemo</var> used to set the position for the editing cursor (or caret).
          </p>
          <p>
            <var>AValue</var> is a <var>TPoint</var> instance with the character and line coordinates for the editing cursor.  The X member contains the 0-based relative column offset to the UTF-8-encoded character where the caret is positioned. 0 is immediately before the first character in the current line of text. The Y member contains the 0-based offset to the line where the caret is positioned.
          </p>
          <p>
            SetCaretPos ensures that the widgetset class is cast to a TWSCustomMemoClass instance, and calls its SetCaretPos method.
          </p>
        </descr>
        <seealso>
           <link id="#LCL.StdCtrls.TCustomEdit.SetCaretPos"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetCaretPos.AValue">
        <short>New position for the editing cursor or caret</short>
      </element>

      <element name="TCustomMemo.SetLines">
        <short>Sets the value for the Lines property</short>
        <descr/>
        <seealso>
           <link id="TCustomMemo.Lines"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetLines.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.SetSelText">
        <short>Sets the value for the SelText property</short>
        <descr/>
        <seealso>
           <link id="#LCL.StdCtrls.TCustomEdit.SelText"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetSelText.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.SetWantReturns">
        <short>Sets the value for the WantReturns property</short>
        <descr/>
        <seealso>
           <link id="TCustomMemo.WantReturns"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetWantReturns.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.SetWantTabs">
        <short>Sets the value for the WantTabs property</short>
        <descr/>
        <seealso>
           <link id="TCustomMemo.WantTabs"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetWantTabs.NewWantTabs">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.SetWordWrap">
        <short>Sets the value for the WordWrap property</short>
        <descr/>
        <seealso>
           <link id="TCustomMemo.WordWrap"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetWordWrap.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.SetScrollBars">
        <short>Sets the value for the ScrollBars property</short>
        <descr/>
        <seealso>
          <link id="TCustomMemo.ScrollBars"/>
        </seealso>
      </element>
      <element name="TCustomMemo.SetScrollBars.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomMemo.Loaded" link="#lcl.controls.TWinControl.Loaded">
        <short>
          Performs actions needed when the component has been loaded using the LCL streaming mechanism
        </short>
        <descr>
          <p>
            <var>Loaded</var> is an overridden method in <var>TCustomMemo</var>, and calls the inherited method on entry. When a handle has been allocated for the control, the widgetset class is notified of the current values in the <var>ScrollBars</var> and <var>WordWrap</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.Loaded"/>
          <link id="TCustomMemo.ScrollBars"/>
          <link id="TCustomMemo.WordWrap"/>
        </seealso>
      </element>

      <element name="TCustomMemo.CMWantSpecialKey" link="TCustomEdit.CMWantSpecialKey">
        <short>Handles control messages for Return and Tab keys when enabled in the control</short>
        <descr>
          <p>
            <var>CMWantSpecialKey</var> is an overridden method in <var>TCustomMemo</var>. It ensures that control messages for VK_RETURN and VK_TAB keys are marked as handled when WantReturns or WantTabs are enabled in the control. All other messages are handled by calling the inherited method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomMemo.CMWantSpecialKey.Message">
        <short>Message examined and updated in the method</short>
      </element>

      <element name="TCustomMemo.WMGetDlgCode">
        <short>Handles Tab, Return, and Escape characters in control messages</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomMemo.WMGetDlgCode.Message">
        <short>Message examined in the method</short>
      </element>

      <element name="TCustomMemo.GetControlClassDefaultSize">
        <short>Gets the default size used for new instances of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomMemo.GetControlClassDefaultSize.Result">
        <short>Returns the default size for the control as a TPoint value</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomMemo.UTF8KeyPress" link="#lcl.controls.TWinControl.UTF8KeyPress">
        <short>Implements the handler for UTF8 key press events in the control</short>
        <descr>
          <p>
            <var>UTF8KeyPress</var> is an overridden method in <var>TCustomMemo</var> which implements the handler for UTF-8-encoded key press events in the control.
          </p>
          <p>
            UTF8KeyPress calls the inherited method on entry to signal the OnUTF8KeyPress event handler (when assigned). It ensures that a <b>Carriage Return</b> (decimal character 13) key is handled using the setting specified in the <var>WantReturns</var> property. When WantReturns is set to <b>False</b>,  the value in <var>UTF8Key</var> is set to an empty string (<b>''</b>) to discard the character.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomMemo.UTF8KeyPress.UTF8Key">
        <short>Key examined in the method</short>
      </element>

      <element name="TCustomMemo.CanShowEmulatedTextHint">
        <short>Indicates if an emulated TextHint can be displayed for the control</short>
        <descr>
          <p>
            <var>CanShowEmulatedTextHint</var> is an overridden <var>Boolean</var> function in <var>TCustomMemo</var>, and does <b>not</b> call the inherited method in its implementation.
          </p>
          <p>
            CanShowEmulatedTextHint determines whether an emulated <var>TextHint</var> can be displayed for the control. Normally, this requires a control handle and an unassigned value in the control text. In addition, some widgetsets implement text hints natively, and do not require LCL to emulate the capability (Windows, QT5). Emulated hint displays can also be suppressed when the widgetset class is being freed (when the Lines in the control have already been destroyed).
          </p>
          <p>
            The current implementation always returns <b>False</b> for Memo controls. Please note: there is a <b>TODO</b> in the source to get this working under GTK2 at a minimum.
          </p>
        </descr>
        <seealso>
          <link id="TCustomEdit.CanShowEmulatedTextHint"/>
        </seealso>
      </element>
      <element name="TCustomMemo.CanShowEmulatedTextHint.Result">
        <short>True when an emulated TextHint can be displayed for the control</short>
      </element>

      <element name="TCustomMemo.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry.
          </p>
          <p>
            Create allocates resources needed for the <var>Lines</var>, <var>HorzScrollBar</var>, and <var>VertScrollBar</var> properties. It also sets the default values for properties, including: <var>WantTabs</var>, <var>WantReturns</var>, <var>WordWrap</var>, <var>AutoSelect</var>, and <var>AutoSize</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.Destroy"/>
        </seealso>
      </element>
      <element name="TCustomMemo.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomMemo.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated for the <var>Lines</var>, <var>HorzScrollBar</var>, and <var>VertScrollBar</var> properties are freed by calling the <var>FreeThenNil</var> routine in <file>lazutilities.pas</file>.
          </p>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.Create"/>
        </seealso>
      </element>

      <element name="TCustomMemo.Append">
        <short>Appends the specified text to the Lines in the control</short>
        <descr>
          <p>
            <var>Append</var> is a procedure used to append the line of text in <var>AValue</var> to the end of the values in the <var>Lines</var> property. It is a convenience method, and calls the <var>Add</var> method in Lines class.
          </p>
          <code>
            // var sLine: String;
            // the following are equivalent
            AMemo.Append(sLine);
            AMemo.Lines.Add(sLine);
          </code>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomMemo.Append.AValue">
        <short>The text value added to Lines in the method</short>
      </element>

      <element name="TCustomMemo.ScrollBy" link="#lcl.controls.TWinControl.ScrollBy">
        <short>Scrolls the visible area in the control by the specified amounts</short>
        <descr>
          <p>
            <var>ScrollBy</var> is an overridden method in <var>TCustomMemo</var> used to scroll the visible area for the control by the specified amounts.
          </p>
          <p>
            <var>DeltaX</var> and <var>DeltaY</var> contain the number of pixels the content in the control is scrolled. DeltaX is applied to the horizontal position. DeltaY is applied to the vertical position. A positive value means that he control scrolls towards its bottom or right (respectively). Conversely, a negative value scrolls the content towards its top or left.
          </p>
          <p>
            ScrollBy calls the <var>ScrollBy_WS</var> method in the ancestor class. It essentially replaces the method in the ancestor with the same name, and does not call the inherited method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.ScrollBy"/>
          <link id="#lcl.controls.TWinControl.ScrollBy_WS"/>
        </seealso>
      </element>
      <element name="TCustomMemo.ScrollBy.DeltaX">
        <short>Amount to scroll horizontally</short>
      </element>
      <element name="TCustomMemo.ScrollBy.DeltaY">
        <short>Amount to scroll vertically</short>
      </element>

      <element name="TCustomMemo.Lines">
        <short>
          Contains the individual lines of text in the multi-line edit control
        </short>
        <descr>
          <p>
            <var>Lines</var> is a <var>TStrings</var> property which contains the individual lines of text in the multi-line edit control. The values in Lines can be accessed using the <var>Strings</var> and <var>Text</var> properties defined in TStrings. The Strings property in Lines allows an individual line of text to be accessed by its ordinal position. For example:
          </p>
          <code>
            // var sContent: String;
            sContent := AMemo.Lines.Strings[2];
            // equivalent to preceeding since Strings is the default property
            sContent := AMemo.Lines[2];
          </code>
          <p>
            The Text property in Lines allows access to all of the values stored in Lines. Text lines are  separated by the <var>LineEnding</var> character sequence defined for the host platform or operating system. For example:
          </p>
          <code>
            // var sContent: String;
            sContent := AMemo.Lines.Text;
          </code>
          <p>
            Use the <var>Append</var> method to add a line to text to the end of the values in Lines.
          </p>
          <p>
            Set values in the <var>WantTabs</var>, <var>WantReturns</var>, and <var>WordWrap</var> properties to control the content and behavior for the multi-line edit control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.Append"/>
          <link id="TCustomMemo.WantTabs"/>
          <link id="TCustomMemo.WantReturns"/>
          <link id="TCustomMemo.WordWrap"/>
          <link id="#rtl.classes.TStrings"/>
          <link id="#lazutils.textstrings.TTextStrings"/>
        </seealso>
      </element>

      <element name="TCustomMemo.HorzScrollBar">
        <short>The horizontal scrollbar for the control</short>
        <descr>
          <p>
            <var>HorzScrollBar</var> is a <var>TMemoScrollBar</var> property which contains the horizontal scrollbar displayed for the control. Resources are allocated to the property in the constructor, and freed in the destructor.
          </p>
        </descr>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomMemo.VertScrollBar">
        <short>The vertical scrollbar for the control</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomMemo.ScrollBars">
        <short>Defines the vertical and/or horizontal scrollbars used in the control</short>
        <descr>
          <p>
            <var>ScrollBars</var> is a <var>TScrollStyle</var> property which defines whether the horizontal and vertical scrollbars are displayed for the control. It is a single value from the <link id="TScrollStyle">TScrollStyle</link> enumeration.
          </p>
          <p>
            The default value for the property is <var>ssNone</var>, and disables both horizontal and vertical scrollbars in the control.
          </p>
          <p>
            Setting a new value for the property causes the widgetset class to be notified when a handle has been allocated for the control.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomMemo.WantReturns">
        <short>Allows the user to insert Return characters (line breaks) into the text</short>
        <descr>
          <p>
            The <b>Enter</b> key is normally used to press the default button in a form, so it cannot be used to add line breaks into the text by default. Set <var>WantReturns</var> to <b>True</b> to allow line breaks to be entered using <b>Enter</b> when the control has the input focus. <b>Ctrl+Enter</b> can be used to insert a line break, even if WantReturns is set to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.WantTabs"/>
        </seealso>
      </element>

      <element name="TCustomMemo.WantTabs">
        <short>Allows Tab characters to be entered into the text</short>
        <descr>
          <p>
            The Tab key is normally used to move the input focus to the next control, and does not add Tab characters to the text.
          </p>
          <p>
            When <var>WantTabs</var> is <b>True</b>, the Tab key inserts a Tab character into the text, instead of moving the focus to then next control. Even if WantTabs is <b>True</b>, the Tab key can be used to navigate <b>into</b> the control. But it prevents use of Tab to <b>exit</b> the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomMemo.WantReturns"/>
        </seealso>
      </element>

      <element name="TCustomMemo.WordWrap">
        <short>
          Allows long logical lines (paragraphs) to wrap into multiple display lines
        </short>
        <descr>
          <p>
            When <b>False</b>, the display for long lines is truncated at the right margin of the control, unless the text can be scrolled horizontally.
          </p>
        </descr>
        <notes><note>?</note></notes>
        <seealso>
          <link id="TCustomMemo.ScrollBars"/>
        </seealso>
      </element>

      <element name="TEdit">
        <short>Implements an edit control with a single line of text</short>
        <descr>
          <p>
            <var>TEdit</var> is a <var>TCustomEdit</var> descendant which implements an edit control presenting a single line of text. TEdit sets the visibility for properties and events introduced in the TCustomEdit ancestor, but does not introduce any new methods.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TCustomEdit"/>
          <link id="TMemo"/>
          <link id="#lcl.extctrls.TLabeledEdit"/>
          <link id="#lcl.maskedit.TMaskEdit"/>
        </seealso>
      </element>

      <element name="TEdit.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TEdit.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TEdit.Alignment" link="#LCL.StdCtrls.TCustomEdit.Alignment"/>
      <element name="TEdit.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TEdit.AutoSelect" link="#LCL.StdCtrls.TCustomEdit.AutoSelect"/>
      <element name="TEdit.AutoSelected" link="#LCL.StdCtrls.TCustomEdit.AutoSelected"/>
      <element name="TEdit.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TEdit.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TEdit.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TEdit.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TEdit.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TEdit.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TEdit.CharCase" link="#LCL.StdCtrls.TCustomEdit.CharCase"/>
      <element name="TEdit.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TEdit.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TEdit.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TEdit.EchoMode" link="#LCL.StdCtrls.TCustomEdit.EchoMode"/>
      <element name="TEdit.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TEdit.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TEdit.HideSelection" link="#LCL.StdCtrls.TCustomEdit.HideSelection"/>
      <element name="TEdit.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TEdit.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TEdit.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TEdit.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TEdit.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TEdit.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TEdit.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TEdit.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TEdit.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TEdit.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TEdit.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TEdit.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TEdit.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TEdit.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TEdit.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TEdit.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TEdit.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TEdit.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TEdit.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TEdit.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TEdit.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TEdit.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TEdit.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TEdit.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TEdit.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TEdit.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TEdit.PasswordChar" link="#LCL.StdCtrls.TCustomEdit.PasswordChar"/>
      <element name="TEdit.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TEdit.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly"/>
      <element name="TEdit.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TEdit.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TEdit.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TEdit.Text" link="#LCL.StdCtrls.TCustomEdit.Text"/>
      <element name="TEdit.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TEdit.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TMemo">
        <short>Control used to display and edit multi-line text</short>
        <descr>
          <p>
            <var>TMemo</var> is a <var>TCustomMemo</var> descendant which implements a multi-line text edit control. TMemo sets the visibility for properties introduced in TCustomMemo, but does not introduce any new methods.
          </p>
          <p>
            The textual values in the multi-line control can be accessed using the <var>Lines</var> property. An individual line of text can be accessed by its ordinal position in List. For example:
          </p>
          <code>
            // var sContent: String;
            sContent := AMemo.Lines[2];
          </code>
          <p>
            This provides access to the third value in List (index positions are zero-based).
          </p>
          <p>
            The values for all of the text in Lines can be retrieved as a single String using the <var>Text</var> property in the <var>TStrings</var> class instance. Each line of text in Lines is separated by the <var>LineEnding</var> character sequence for the host platform or operating system. For example:
          </p>
          <code>
            // var sContent: String;
            sContent := AMemo.Lines.Text;
          </code>
          <p>
            The text displayed in the control uses the attributes defined in the <var>Font</var> property. No capabilities are provided for formatting individual characters, word, or lines in the content for the control.
          </p>
          <p>
            Both horizontal and vertical scrollbars can be used in the control. Use the <var>ScrollBar</var> property to define the scrollbars displayed for the control. It can be used to enable automatic scrollbars which are only displayed when the content for the control does not fit within its bounds.
          </p>
          <p>
            Use the <var>Append</var> method to add a line to text to the values in Lines.
          </p>
          <p>
            Use the <var>WantTabs</var> and <var>WantReturns</var> properties to determine whether the correspondings keys are captured and stored in Lines. This affects the way control messages are applied to the control.
          </p>
          <p>
            Use <var>WordWrap</var> to indicate if the control should automatically wrap a line of text longer than the visible area for the control.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TCustomMemo"/>
          <link id="TEdit"/>
        </seealso>
      </element>

      <element name="TMemo.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TMemo.Alignment" link="#LCL.Controls.TControl.Alignment"/>
      <element name="TMemo.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TMemo.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TMemo.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TMemo.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TMemo.CharCase" link="TCustomEdit.CharCase"/>
      <element name="TMemo.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TMemo.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TMemo.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TMemo.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TMemo.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TMemo.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TMemo.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TMemo.HideSelection" link="TCustomMemo.HideSelection"/>

      <element name="TMemo.Lines" link="#LCL.StdCtrls.TCustomMemo.Lines">
        <short>The lines of text stored in the memo control</short>
        <seealso>
          <link id="#RTL.Classes.TStrings"/>
        </seealso>
      </element>

      <element name="TMemo.MaxLength" link="#LCL.StdCtrls.TCustomEdit.MaxLength"/>
      <element name="TMemo.OnChange" link="#LCL.StdCtrls.TCustomEdit.OnChange"/>
      <element name="TMemo.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TMemo.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TMemo.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TMemo.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TMemo.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TMemo.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TMemo.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TMemo.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TMemo.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TMemo.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TMemo.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TMemo.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TMemo.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TMemo.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TMemo.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TMemo.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TMemo.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TMemo.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TMemo.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TMemo.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TMemo.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TMemo.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TMemo.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TMemo.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TMemo.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TMemo.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TMemo.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TMemo.ReadOnly" link="#LCL.StdCtrls.TCustomEdit.ReadOnly"/>
      <element name="TMemo.ScrollBars" link="#LCL.StdCtrls.TCustomMemo.ScrollBars"/>
      <element name="TMemo.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TMemo.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TMemo.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TMemo.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TMemo.WantReturns" link="#LCL.StdCtrls.TCustomMemo.WantReturns"/>
      <element name="TMemo.WantTabs" link="#LCL.StdCtrls.TCustomMemo.WantTabs"/>
      <element name="TMemo.WordWrap" link="#LCL.StdCtrls.TCustomMemo.WordWrap"/>

      <element name="TStaticBorderStyle">
        <short>Contains border styles used for static text controls</short>
        <descr>
          <p>
            <var>TStaticBorderStyle</var> is an enumerated type with values that represents border styles used for static text controls. TStaticBorderStyle is the type used for the <var>Style</var> property in <var>TCustomStaticText</var> and decendants.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStaticText.Style"/>
        </seealso>
      </element>
      <element name="TStaticBorderStyle.sbsNone">
        <short>No border</short>
      </element>
      <element name="TStaticBorderStyle.sbsSingle">
        <short>Single line border</short>
      </element>
      <element name="TStaticBorderStyle.sbsSunken">
        <short>Sunken 3-D border</short>
      </element>

      <element name="TCustomStaticText">
        <short>The base class for <var>TStaticText</var></short>
        <descr>
          <p>
            Specifies the base ancestor for TStaticText, a control used to display static text. TCustomStaticText is a TWinControl descendant. It can be used inplace of TLabel for situations where a TWinControl descendant is required.
          </p>
        </descr>
        <seealso/>
        <notes><note>Required where?</note></notes>
      </element>

      <element name="TCustomStaticText.FAlignment" link="TCustomStaticText.Alignment"/>
      <element name="TCustomStaticText.FFocusControl" link="TCustomStaticText.FocusControl"/>
      <element name="TCustomStaticText.FShowAccelChar" link="TCustomStaticText.ShowAccelChar"/>
      <element name="TCustomStaticText.FStaticBorderStyle" link="TCustomStaticText.BorderStyle"/>

      <element name="TCustomStaticText.GetTransparent" link="TCustomStaticText.Transparent">
        <short>Gets the value for the Transparent property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.GetTransparent.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomStaticText.SetAlignment" link="TCustomStaticText.Alignment">
        <short>Sets the value for the Alignment property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.SetAlignment.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomStaticText.SetStaticBorderStyle" link="TCustomStaticText.BorderStyle">
        <short>Sets the value for the BorderStyle property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.SetStaticBorderStyle.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomStaticText.SetTransparent" link="TCustomStaticText.Transparent">
        <short>Sets the value for the Transparent property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.SetTransparent.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomStaticText.WMActivate">
        <short>Defers the focus to FocusControl</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.WMActivate.Message">
        <short/>
      </element>

      <element name="TCustomStaticText.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomStaticText.GetLabelText">
        <short>Returns the Caption for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.GetLabelText.Result">
        <short>The text stored in Caption</short>
      </element>

      <element name="TCustomStaticText.RealSetText" link="#lcl.controls.TWinControl.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.RealSetText.AValue">
        <short/>
      </element>

      <element name="TCustomStaticText.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.Notification.AComponent">
        <short>Component for the notification</short>
      </element>
      <element name="TCustomStaticText.Notification.Operation">
        <short>Operation for the notification</short>
      </element>

      <element name="TCustomStaticText.SetFocusControl" link="TCustomStaticText.FocusControl">
        <short>Sets the value for the FocusControl property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.SetFocusControl.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomStaticText.SetShowAccelChar" link="TCustomStaticText.ShowAccelChar">
        <short>Sets the value for the ShowAccelChar property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.SetShowAccelChar.Val">
        <short>New value for the property</short>
      </element>

      <element name="TCustomStaticText.DialogChar" link="#LCL.Controls.TControl.DialogChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomStaticText.DialogChar.Message">
        <short/>
      </element>

      <element name="TCustomStaticText.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short>Gets the bounds used for new instances of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomStaticText.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomStaticText.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomStaticText.Alignment">
        <short>The horizontal alignment for the text; centered, left- or right-justified</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomStaticText.BorderStyle">
        <short>The border drawn around the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomStaticText.FocusControl">
        <short>The control that receives focus instead of this control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomStaticText.ShowAccelChar">
        <short>Indicates if an accelerator character is drawn in the displayed text</short>
        <descr>
          <p>
            <var>ShowAccelChar</var> is a <var>Boolean</var> property which indicates if the character used as an accelerator key is drawn with an underline in the control.
          </p>
          <p>
            An accelerator character is any value with a leading Ampersand (&amp;) character in <var>Caption</var>. To use an Ampersand character as an accelerator, it must be entered as 2 Ampersand characters (&amp;&amp;).
          </p>
          <p>
            Set ShowAccelChar to <b>True</b> to enable underline drawing for the accelerator character. The default value for the property is <b>True</b>. Changing the value in the property causes the <var>InvalidatePreferredSize</var> method to be called to update the bounds for the control.
          </p>
          <p>
            The value in ShowAccelChar is used in widgetset class methods, such as when the text value is assigned and when the handle for the control is created (or re-created).
          </p>
          <p>
            Use <var>FocusControl</var> to specify the control which receives focus when the accelerator key is handled in <var>DialogChar</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStaticText.FocusControl"/>
          <link id="TCustomStaticText.DialogChar"/>
          <link id="TCustomStaticText.GetLabelText"/>
          <link id="#lcl.controls.TControl.Caption"/>
          <link id="#lcl.controls.TControl.InvalidatePreferredSize"/>
        </seealso>
      </element>

      <element name="TCustomStaticText.Transparent">
        <short>Makes the background for the control transparent when True</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStaticText">
        <short>Control to display a text value which does not change</short>
        <descr>
          <p>
            This control can be used instead of TLabel, when a TWinControl descendant is required.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
        </seealso>
        <notes><note>Needs more description.</note></notes>
      </element>

      <element name="TStaticText.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TStaticText.Alignment" link="#LCL.StdCtrls.TCustomStaticText.Alignment"/>
      <element name="TStaticText.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TStaticText.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TStaticText.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TStaticText.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TStaticText.BorderStyle" link="TCustomStaticText.BorderStyle"/>

      <element name="TStaticText.Caption" link="#lcl.controls.TControl.Caption">
        <short>Text displayed in the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TStaticText.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TStaticText.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TStaticText.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TStaticText.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TStaticText.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TStaticText.FocusControl" link="#LCL.StdCtrls.TCustomStaticText.FocusControl"/>
      <element name="TStaticText.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TStaticText.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TStaticText.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TStaticText.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TStaticText.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TStaticText.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TStaticText.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TStaticText.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TStaticText.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TStaticText.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TStaticText.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TStaticText.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TStaticText.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TStaticText.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TStaticText.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TStaticText.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TStaticText.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TStaticText.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TStaticText.ShowAccelChar" link="#LCL.StdCtrls.TCustomStaticText.ShowAccelChar"/>
      <element name="TStaticText.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TStaticText.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TStaticText.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TStaticText.Transparent" link="TCustomStaticText.Transparent"/>
      <element name="TStaticText.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TButtonControl">
        <short>Specifies a base class for button controls</short>
        <descr>
          <p>
            <var>TButtonControl</var> is a <var>TWinControl</var> descendant which specifies the base class used for controls with button-like behavior, such as: <var>TCustomButton</var>,  <var>TButton</var>, <var>TCustomCheckBox</var>, <var>TCheckBox</var>, <var>TToggleBox</var>, and <var>TRadioButton</var>.
          </p>
          <p>
            TButtonControl introduces properties, methods, and events related to Click and Checked functionality.
          </p>
          <p>
            Do not create instances of TButtonControl in an application; use one of the descendent classes.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TButtonControl.FClicksDisabled" link="TButtonControl.ClicksDisabled"/>
      <element name="TButtonControl.FOnChange" link="TButtonControl.OnChange"/>

      <element name="TButtonControl.IsCheckedStored" link="TButtonControl.Checked"/>
      <element name="TButtonControl.IsCheckedStored.Result">
        <short>True when the value in Checked is included in the LCL streaming mechanism</short>
      </element>

      <element name="TButtonControl.WMDefaultClicked">
        <short>Implements the default handler for the LM_CLICKED message</short>
      </element>
      <element name="TButtonControl.WMDefaultClicked.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TButtonControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TButtonControl.GetChecked" link="TButtonControl.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonControl.GetChecked.Result">
        <short>Value for the property</short>
      </element>

      <element name="TButtonControl.SetChecked" link="TButtonControl.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonControl.SetChecked.Value">
        <short>New value for the property</short>
      </element>

      <element name="TButtonControl.DoOnChange">
        <short>Signals the OnEditingDone and OnChange event handlers (when assigned)</short>
        <descr>
          <p>
            <var>DoOnChange</var> performs actions needed when the button control is clicked. DoOnChange calls <var>EditingDone</var> to signal the <var>OnEditingDone</var> event handler (when assigned). The <var>OnChange</var> event handler is also signalled (when assigned).
          </p>
          <p>
            DoOnChange is called from the <var>Click</var> method before the inherited method in TControl is executed. DoOnChange performs no actions at design-time, during component streaming, or when the component is freed.
          </p>
        </descr>
        <seealso>
          <link id="TButtonControl.OnChange"/>
          <link id="#LCL.Controls.TControl.EditingDone"/>
          <link id="#LCL.Controls.TControl.OnEditingDone"/>
          <link id="#LCL.Controls.TControl.Click"/>
          <link id="#RTL.Classes.TComponent.ComponentState"/>
        </seealso>
      </element>

      <element name="TButtonControl.Click" link="#LCL.Controls.TControl.Click">
        <short>Performs actions needed when a click message is handled for the control</short>
        <descr>
          <p>
            <var>Click</var> is an overridden method in <var>TButtonControl</var>. Click calls the <var>DoOnChange</var> method to signal the <var>OnEditingDone</var> and <var>OnChange</var> event handlers (when assigned). Click calls the inherited method prior to exit.
          </p>
          <p>
            Click is used when messages are handled in the control and <var>csClickEvents</var> is not used in the <var>ControlStyle</var> property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TButtonControl.CMWantSpecialKey" link="#LCL.Controls.TControl.CMWantSpecialKey">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonControl.CMWantSpecialKey.Message">
        <short/>
      </element>

      <element name="TButtonControl.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonControl.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TButtonControl.Checked">
        <short>Indicates the checked state for the control</short>
        <descr>
          <p>
            The state of the check mark. Here always <b>False</b>, can be implemented in derived classes.
          </p>
        </descr>
      </element>

      <element name="TButtonControl.ClicksDisabled">
        <short>Disables clicking on the button, without showing the button in a disabled state</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TButtonControl.OnChange">
        <short>Event handler for changes to properties in the control</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TButtonActionLink">
        <short>Links a button control to an action</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TButtonActionLink.FClientButton">
        <short>The button to which this action applies</short>
      </element>

      <element name="TButtonActionLink.AssignClient">
        <short>Installs the client button for the action link</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonActionLink.AssignClient.AClient">
        <short>Button assigned in the method</short>
      </element>

      <element name="TButtonActionLink.SetChecked">
        <short>Sets the Checked property of the linked button</short>
        <descr/>
        <seealso>
          <link id="#LCL.ActnList.TActionLink.SetChecked">TActionLink.SetChecked</link>
        </seealso>
      </element>
      <element name="TButtonActionLink.SetChecked.Value">
        <short/>
      </element>

      <element name="TButtonActionLink.IsCheckedLinked" link="#LCL.ActnList.TActionLink.IsCheckedLinked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TButtonActionLink.IsCheckedLinked.Result">
        <short/>
      </element>

      <element name="TButtonActionLinkClass" link="TButtonActionLink">
        <short>Class reference used to create new instances of <var>TButtonActionLink</var></short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton">
        <short>
          The base class for clickable buttons (<var>TButton</var> and <var>TBitBtn</var>)
        </short>
        <descr/>
        <seealso/>
        <notes><note>Needs description.</note></notes>
      </element>

      <element name="TCustomButton.FModalResult" link="TCustomButton.ModalResult"/>
      <element name="TCustomButton.FShortCut" link="TCustomButton.ShortCut"/>
      <element name="TCustomButton.FShortCutKey2" link="TCustomButton.ShortCutKey2"/>
      <element name="TCustomButton.FCancel" link="TCustomButton.Cancel"/>
      <element name="TCustomButton.FDefault" link="TCustomButton.Default"/>
      <element name="TCustomButton.FActive" link="TCustomButton.Active"/>

      <element name="TCustomButton.SetCancel" link="TCustomButton.Cancel"/>
      <element name="TCustomButton.SetCancel.NewCancel">
        <short>New value for the property</short>
      </element>

      <element name="TCustomButton.SetDefault" link="TCustomButton.Default"/>
      <element name="TCustomButton.SetDefault.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomButton.SetModalResult" link="TCustomButton.ModalResult"/>
      <element name="TCustomButton.SetModalResult.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomButton.CMUIActivate">
        <short>Handles UIActivate control messages</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.CMUIActivate.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomButton.WMSetFocus">
        <short>Handles set focus messages for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.WMSetFocus.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomButton.WMKillFocus">
        <short>Handles kill focus messages for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.WMKillFocus.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomButton.UpdateFocus">
        <short>Notifies the Parent control of focus changes</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.UpdateFocus.AFocused">
        <short/>
      </element>
      <element name="TCustomButton.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomButton.Click">
        <short>Propagates the ModalResult value to the parent form before further processing</short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.Click"/>
        </seealso>
      </element>

      <element name="TCustomButton.CreateWnd" link="#lcl.controls.TWinControl.CreateWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.CreateParams" link="#lcl.controls.TWinControl.CreateParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.CreateParams.Params">
        <short/>
      </element>

      <element name="TCustomButton.ControlKeyDown" link="#LCL.Controls.TWinControl.ControlKeyDown"/>
      <element name="TCustomButton.ControlKeyDown.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomButton.ControlKeyDown.Shift">
        <short>Shift, Ctrl, or Alt modifier for the key</short>
      </element>

      <element name="TCustomButton.ControlKeyUp" link="#LCL.Controls.TWinControl.ControlKeyUp"/>
      <element name="TCustomButton.ControlKeyUp.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomButton.ControlKeyUp.Shift">
        <short>Shift, Ctrl, or Alt modifier for the key</short>
      </element>

      <element name="TCustomButton.DialogChar" link="#LCL.Controls.TControl.DialogChar"/>
      <element name="TCustomButton.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomButton.DialogChar.Message">
        <short/>
      </element>

      <element name="TCustomButton.ChildClassAllowed" link="#LCL.Controls.TWinControl.ChildClassAllowed"/>
      <element name="TCustomButton.ChildClassAllowed.Result">
        <short/>
      </element>
      <element name="TCustomButton.ChildClassAllowed.ChildClass">
        <short/>
      </element>

      <element name="TCustomButton.GetControlClassDefaultSize"/>
      <element name="TCustomButton.GetControlClassDefaultSize.Result">
        <short/>
      </element>

      <element name="TCustomButton.WSSetDefault">
        <short>Notify the widget of dynamic changes to the Default property</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.WSSetText">
        <short>Notify the widgetset of changes in the Caption and/or accelerator</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.WSSetText.AText">
        <short/>
      </element>

      <element name="TCustomButton.TextChanged" link="#LCL.Controls.TControl.TextChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.Loaded" link="#LCL.Controls.TWinControl.Loaded">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.UpdateDefaultCancel">
        <short>Updates the Default and Cancel properties in the parent form</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomButton.ExecuteDefaultAction">
        <short>Invokes the Click method if the control is an Active or a Default button</short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.ExecuteDefaultAction"/>
        </seealso>
      </element>

      <element name="TCustomButton.ExecuteCancelAction">
        <short>Invokes Click if the control is the <var>Cancel</var> button</short>
        <descr/>
        <seealso>
          <link id="#LCL.Controls.TControl.ExecuteCancelAction"/>
        </seealso>
      </element>

      <element name="TCustomButton.ActiveDefaultControlChanged" link="#LCL.Controls.TControl.ActiveDefaultControlChanged"/>
      <element name="TCustomButton.ActiveDefaultControlChanged.NewControl">
        <short/>
      </element>

      <element name="TCustomButton.UpdateRolesForForm" link="#LCL.Controls.TControl.UpdateRolesForForm">
        <short>Updates Default and Cancel to reflect the roles in the parent form</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomButton.UseRightToLeftAlignment" link="#LCL.Controls.TControl.UseRightToLeftAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomButton.UseRightToLeftAlignment.Result">
        <short/>
      </element>

      <element name="TCustomButton.Active">
        <short>True if this control is the Cancel or Default button</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomButton.Cancel">
        <short>True if this is the modal Cancel button</short>
        <descr>
          <p>
            Pressing <b>Esc</b> in a modal form is equivalent to clicking on the Cancel button.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomButton.Color" link="#LCL.Controls.TControl.Color"/>

      <element name="TCustomButton.Default">
        <short>True if this is the default button in a modal form</short>
        <descr>
          <p>
            Pressing <b>Enter</b> in a modal form is equivalent to clicking on the Default button.
          </p>
        </descr>
      </element>

      <element name="TCustomButton.ModalResult">
        <short>
          Value returned when the control is clicked in a form displayed modally
        </short>
        <descr>
          <p>
            When clicked, the button will close the form and return its ModalResult (unless mrNone).
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomButton.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>

      <element name="TCustomButton.ShortCut">
        <short>Shortcut key for the control</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomButton.ShortCutKey2">
        <short>Secondary shortcut key for the control</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomButton.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>

      <element name="TButton" link="TCustomButton">
        <short>Implements a push button control</short>
        <descr>
          <p>
            <var>TButton</var> is a <var>TCustomButton</var> descendant which implements a push button control. TButton sets the visibility for properties introduces in the ancestor class, and does not introduce any new methods.
          </p>
        </descr>
        <seealso/>
        <notes><note>Needs a better description.</note></notes>
      </element>

      <element name="TButton.Click" link="#LCL.Controls.TControl.Click"/>
      <element name="TButton.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TButton.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TButton.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TButton.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TButton.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TButton.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TButton.Cancel" link="#LCL.StdCtrls.TCustomButton.Cancel"/>
      <element name="TButton.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TButton.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TButton.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TButton.Default" link="#LCL.StdCtrls.TCustomButton.Default"/>
      <element name="TButton.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TButton.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TButton.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TButton.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TButton.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TButton.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TButton.ModalResult" link="#LCL.StdCtrls.TCustomButton.ModalResult"/>
      <element name="TButton.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TButton.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TButton.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TButton.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TButton.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TButton.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TButton.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TButton.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TButton.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TButton.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TButton.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TButton.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TButton.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TButton.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TButton.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TButton.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TButton.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TButton.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TButton.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TButton.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TButton.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TButton.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TButton.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TButton.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TButton.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TButton.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TCheckBoxState">
        <short>Represents the states for a check box</short>
        <descr>
          <p>
            <var>TCheckBoxState</var> is an enumerated type with values which represent the states for a check box control. TCheckBoxState is the type used to implement the <var>State</var> property in <var>TCustomCheckBox</var> and descendent classes.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCheckBoxState.cbUnchecked">
        <short>
          The check box has no check mark, indicating that the item is not selected
        </short>
      </element>
      <element name="TCheckBoxState.cbChecked">
        <short>
          The check box has a check mark in it, indicating that the item is selected
        </short>
      </element>
      <element name="TCheckBoxState.cbGrayed">
        <short>
          The check box state cannot be changed by the user, or is disabled
        </short>
      </element>

      <element name="TCustomCheckBox">
        <short>The base class for a check box component</short>
        <descr>
          <p>
            <var>TCustomCheckBox</var> is a <var>TButtonControl</var> descendant which specifies an interface used for a check box component. It is the common ancestor class for <var>TCheckBox</var>, <var>TToggleBox</var>, and <var>TRadioButton</var> descendants.
          </p>
          <p>
            A check box control allows the user to choose the state for the control independent of other check box controls (unlike a radio button). TCustomCheckBox introduces the <var>State</var> property which contains the check, unchecked, or grayed state for the control. The <var>AllowGrayed</var> property indicates if the grayed state is allowed in the control; otherwise only checked and unchecked are used. The <var>Checked</var> property allows the value in State to be updated by setting a <var>Boolean</var> value that indicates if the control is check or unchecked.
          </p>
        </descr>
        <seealso>
          <link id="TButtonControl"/>
          <link id="TCheckBox"/>
          <link id="TToggleBox"/>
          <link id="TRadioButton"/>
        </seealso>
      </element>

      <element name="TCustomCheckBox.FAllowGrayed" link="TCustomCheckBox.AllowGrayed"/>
      <element name="TCustomCheckBox.FState" link="TCustomCheckBox.State"/>
      <element name="TCustomCheckBox.FShortCut" link="TCustomCheckBox.ShortCut"/>
      <element name="TCustomCheckBox.FShortCutKey2" link="TCustomCheckBox.ShortCutKey2"/>

      <element name="TCustomCheckBox.SetState">
        <short>Sets the value for the State property</short>
        <descr/>
        <seealso>
           <link id="TCustomCheckBox.State"/>
        </seealso>
      </element>
      <element name="TCustomCheckBox.SetState.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomCheckBox.GetState">
        <short>Gets the value for the State property</short>
        <descr/>
        <seealso>
           <link id="TCustomCheckBox.State"/>
        </seealso>
      </element>
      <element name="TCustomCheckBox.GetState.Result">
        <short>Value for the property</short>
      </element>


      <element name="TCustomCheckBox.DoChange">
        <short>Invokes either the OnClick or OnChange handler</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.DoChange.Msg">
        <short/>
      </element>


      <element name="TCustomCheckBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomCheckBox.Click" link="#LCL.Controls.TControl.Click">
        <short/>
        <descr>Overridden to do nothing.</descr>
        <seealso/>
        <notes><note>Explain why...</note></notes>
      </element>

      <element name="TCustomCheckBox.DoClickOnChange">
        <short>Implements the Click behavior for the control</short>
        <descr>
          <p>
            <var>DoClickOnChange</var> is a procedure used to signal event handler(s) when the <b>LC_CHANGED</b> message is handled for the control. DoClickOnChange calls the <var>Changed</var> method to dispatch the control message. DoClickOnChange uses the value in <var>ClicksDisabled</var> to determine the event handler(s) signalled in the method.
          </p>
          <p>
            When ClicksDisabled is <b>False</b>, the inherited <var>Click</var> method is called. When set to <b>True</b>, the <var>DoOnChange</var> method is called to signal the <var>OnEditingDone</var> and <var>OnChange</var> event handlers. This emulates the <var>OnClick</var> behavior in the Delphi VCL.
          </p>
          <p>
            DoClickOnChange is called from the <var>DoChange</var> method after the value in <var>State</var> has been updated. It is also called when a new value is assigned to the <var>Checked</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCheckBox.State"/>
          <link id="TButtonControl.ClicksDisabled"/>
          <link id="TButtonControl.Click"/>
          <link id="TButtonControl.Checked"/>
          <link id="TButtonControl.DoOnChange"/>
          <link id="#lcl.controls.TControl.Changed"/>
          <link id="#lcl.controls.TControl.EditingDone"/>
          <link id="#lcl.controls.TControl.OnEditingDone"/>
          <link id="#lcl.controls.TControl.OnChange"/>
        </seealso>
      </element>

      <element name="TCustomCheckBox.RetrieveState">
        <short>Retrieves the check box state from the widgetset class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.RetrieveState.Result">
        <short>TCheckBoxState value returned from the widgetset class</short>
      </element>

      <element name="TCustomCheckBox.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd">
        <short>Sets property values in the widgetset class when the control is created</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCheckBox.Toggle">
        <short>Alternate between checked and unchecked state</short>
        <descr/>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomCheckBox.DialogChar" link="#LCL.Controls.TControl.DialogChar">
        <short>Implements support for accelerator keys in the control</short>
        <descr>
          <p>
            <var>DialogChar</var> is an overridden <var>Boolean</var> function in <var>TCustomCheckBox</var> which handles accelerator keys in messages for the control. The return value is set to <b>True</b> when the check box is successfully toggled in the method.
          </p>
          <p>
            <var>Message</var> is the TLMKey instance with the key code examined in the method. When the key code matches the accelerator key in <var>Caption</var>, the control is focused and its <var>State</var> is toggled. If the control cannot be focused, or Message does not represent an accelerator key code, the inherited method is called to get the return value.
          </p>
          <p>
            This method is called even if the control is disabled or hidden. Provided for Delphi VCL compatibility.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.DialogChar.Result">
        <short>True when the control state is toggled by the accelerator key</short>
      </element>
      <element name="TCustomCheckBox.DialogChar.Message">
        <short>Control message examined in the method</short>
      </element>

      <element name="TCustomCheckBox.GetChecked" link="#LCL.StdCtrls.TButtonControl.Checked">
        <short>Gets the value for the Checked property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.GetChecked.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomCheckBox.SetChecked" link="#LCL.StdCtrls.TButtonControl.Checked">
        <short>Sets the value for the Checked property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.SetChecked.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomCheckBox.RealSetText" link="#LCL.Controls.TControl.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.RealSetText.Value">
        <short/>
      </element>

      <element name="TCustomCheckBox.ApplyChanges">
        <short>Asks the widgetset class to update the visual appearance of the control</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCheckBox.GetControlClassDefaultSize" link="#lcl.controls.TControl.GetControlClassDefaultSize">
        <short>Gets the Bounds used for new instances of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.GetControlClassDefaultSize.Result">
        <short>Bounds used for new instances of the class</short>
      </element>

      <element name="TCustomCheckBox.Loaded" link="#lcl.controls.TWinControl.Loaded">
        <short>Performws actions needed after the control is loaded using LCL streaming</short>
        <descr>
          <p>
            <var>Loaded</var> is an overridden method in <var>TCustomCheckBox</var>. Loaded ensures that the value in <var>State</var> is passed to the widgetset class when a handle has been allocated for the control. This prevents loss of the stored value in State during component streaming. The inherited method is called prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCheckBox.State"/>
        </seealso>
      </element>

      <element name="TCustomCheckBox.WSSetText" link="#LCL.Controls.TWinControl.WSSetText"/>
      <element name="TCustomCheckBox.WSSetText.AText">
        <short/>
      </element>

      <element name="TCustomCheckBox.TextChanged" link="#LCL.Controls.TControl.TextChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomCheckBox.CreateParams" link="#lcl.controls.TWinControl.CreateParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.CreateParams.Params">
        <short/>
      </element>

      <element name="TCustomCheckBox.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomCheckBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomCheckBox.AllowGrayed">
        <short>Allows the check box to use a "grayed" state</short>
        <descr>
          <p>
            If <var>AllowGrayed</var> is set to <b>True</b>, the check box has three possible states: checked, unchecked and grayed. If <var>AllowGrayed</var> is set to <b>False</b>, the check box has only two possible states: checked and unchecked.
          </p>
        </descr>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>

      <element name="TCustomCheckBox.State">
        <short>
          The check, unchecked, or grayed state for the control
        </short>
        <descr>
          <p>
            Indicates whether the check box is checked (selected), unchecked (deselected) or grayed (disabled). See <link id="#lcl.StdCtrls.TCheckBoxState">TCheckBoxState</link> for possible values of <var>State</var>.
          </p>
        </descr>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>

      <element name="TCustomCheckBox.ShortCut">
        <short/>
        <descr>
          Primary shortcut key for the control.
        </descr>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomCheckBox.ShortCutKey2">
        <short/>
        <descr>
          Secondary shortcut key for the control.
        </descr>
        <seealso/>
        <notes><note>?</note></notes>
      </element>

      <element name="TCustomCheckBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TCustomCheckBox.OnChange" link="#LCL.StdCtrls.TButtonControl.OnChange"/>

      <element name="TCheckBox" link="TCustomCheckBox">
        <short>A label with a box which can contain a check mark</short>
        <descr>
          <p>
            <var>TCheckBox</var> is a <var>TCustomCheckBox</var> descendant which implements a check box component.
          </p>
          <p>
            A check box control allows the user to choose the state for the control independent of other check box controls (unlike a radio button). The <var>State</var> property contains the checked, unchecked, or grayed state for the control. The <var>AllowGrayed</var> property indicates if the grayed state is allowed in the control; otherwise only checked and unchecked are used. The <var>Checked</var> property allows the value in State to be updated by setting a <var>Boolean</var> value that indicates if the control is check or unchecked.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TButtonControl"/>
          <link id="TCustomCheckBox"/>
          <link id="TToggleBox"/>
          <link id="TRadioButton"/>
        </seealso>
      </element>

      <element name="TCheckBox.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCheckBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCheckBox.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TCheckBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TCheckBox.AllowGrayed" link="#LCL.StdCtrls.TCustomCheckBox.AllowGrayed"/>
      <element name="TCheckBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>

      <element name="TCheckBox.AutoSize" link="#lcl.controls.TControl.AutoSize">
        <short/>
        <descr>
          <p>
            The default value for the property in <var>TCheckBox</var> is <b>True</b>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCheckBox.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TCheckBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TCheckBox.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TCheckBox.Checked" link="#LCL.StdCtrls.TButtonControl.Checked"/>
      <element name="TCheckBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TCheckBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TCheckBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TCheckBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TCheckBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TCheckBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TCheckBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TCheckBox.Hint" link="#LCL.Controls.TControl.Hint"/>
      <element name="TCheckBox.OnChange" link="#LCL.StdCtrls.TButtonControl.OnChange"/>
      <element name="TCheckBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TCheckBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TCheckBox.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TCheckBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TCheckBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TCheckBox.OnEditingDone" link="#LCL.Controls.TControl.OnEditingDone"/>
      <element name="TCheckBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TCheckBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TCheckBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TCheckBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TCheckBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TCheckBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TCheckBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TCheckBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TCheckBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TCheckBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TCheckBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TCheckBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TCheckBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TCheckBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TCheckBox.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TCheckBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TCheckBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TCheckBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TCheckBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TCheckBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TCheckBox.State" link="#LCL.StdCtrls.TCustomCheckBox.State"/>
      <element name="TCheckBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TCheckBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TCheckBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TToggleBox">
        <short>A labelled box capable of being checked or unchecked</short>
        <descr>
          <p>
            <var>TToggleBox</var> is <var>TCustomCheckBox</var> descendnant which implements a labelled control with state values like a check box control. TToggleBox differs from <var>TCheckBox</var> in that it displays only the <var>Caption</var> text for the control; the graphic check mark representation is not used. TToggleBox is similar in appearance to a push button control. The control state determines whether the button is drawn using its up or down position.
          </p>
          <p>
            The application programmer must ensure that the <var>OnClick</var> event handler recognizes the <var>State</var> of the control, takes the appropriate <var>Action</var>, and stores the <var>State</var> into the appropriate storage.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TCustomCheckBox"/>
          <link id="TCheckBox"/>
          <link id="TButton"/>
        </seealso>
      </element>

      <element name="TToggleBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TToggleBox.GetControlClassDefaultSize" link="TCustomCheckBox.GetControlClassDefaultSize">
        <short>Gets the Bounds used for new instances of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToggleBox.GetControlClassDefaultSize.Result">
        <short>Bounds used for new instances of the class</short>
      </element>

      <element name="TToggleBox.CreateParams" link="TCustomCheckBox.CreateParams">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TToggleBox.CreateParams.Params">
        <short>Creation parameters with style flags updated in the method</short>
      </element>

      <element name="TToggleBox.ParentFont" link="#lcl.controls.TControl.ParentColor"/>

      <element name="TToggleBox.Create">
        <short>Constructor for the class instance</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TToggleBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TToggleBox.AllowGrayed" link="TCustomCheckBox.AllowGrayed"/>
      <element name="TToggleBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TToggleBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TToggleBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TToggleBox.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TToggleBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TToggleBox.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TToggleBox.Checked" link="#LCL.StdCtrls.TButtonControl.Checked"/>
      <element name="TToggleBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TToggleBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TToggleBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TToggleBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TToggleBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TToggleBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TToggleBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TToggleBox.Hint" link="#LCL.Controls.TControl.Hint"/>
      <element name="TToggleBox.OnChange" link="#LCL.StdCtrls.TButtonControl.OnChange"/>
      <element name="TToggleBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TToggleBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TToggleBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TToggleBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TToggleBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TToggleBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TToggleBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TToggleBox.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TToggleBox.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TToggleBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TToggleBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TToggleBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TToggleBox.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TToggleBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TToggleBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TToggleBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TToggleBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TToggleBox.State" link="#LCL.StdCtrls.TCustomCheckBox.State"/>
      <element name="TToggleBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TToggleBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TToggleBox.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TRadioButton">
        <short>
          A selection button that works with other Radio Buttons in a mutually exclusive way - if one button is selected, none of the others in the group can be selected
        </short>
        <descr>
          <p>
            Ensure that the <var>OnClick</var> event handler for each button has a unique <var>Action</var>, and that the Actions of the other (deselected and therefore inactive) buttons are turned off.
          </p>
          <p>
            <var>TRadioGroup</var> behaves differently from a group of <var>TRadioButton</var> controls placed on a form.
          </p>
          <p>
            In the case of <var>TRadioButton</var>, the mutual exclusivity is a feature that applies to any <var>RadioButton</var> anywhere in the Form, and the <var>RadioButtons</var> can be rearranged in any order or placed anywhere within the containing <var>Form</var>, while in <var>TRadioGroup</var> the exclusivity applies only to buttons within the Group, which are ordered strictly according to their <var>ItemIndex</var> within the <var>Items</var> stringlist.
          </p>
          <p>
            <var>TRadioButton</var> is an entity in itself, with a number of additional properties, whereas the buttons within <var>TRadioGroup</var>  are not separate entities, but rather are simply entries in a list of strings, each of which is associated with the on-screen image of a <var>RadioButton</var>.
          </p>
          <p>
            The example shows the difference between the use of <var>TRadioButton</var> and <var>TRadioGroup</var>.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="#lcl.ExtCtrls.TRadioGroup"/>
        </seealso>
        <example file="extctrls/radiobutton.pas"/>
      </element>

      <element name="TRadioButton.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TRadioButton.ApplyChanges" link="TCustomCheckBox.ApplyChanges">
        <short>Updates the state for sibling radio buttons in the parent control</short>
        <descr>
          <p>
            <var>ApplyChanges</var> is an overridden method in <var>TRadioButton</var>. ApplyChanges ensures that other radio buttons in the <var>Parent</var> control are unchecked when the current class instance is <var>Checked</var>.
          </p>
          <p>
            The siblings controls are normally unchecked by methods in the widgetset class. ApplyChanges performs the actions needed when a handle has not been allocated for the control (widgetset class). This involves iterating over the controls in Parent, and setting the Checked state for sibling TRadioButton instances to <b>False</b>.
          </p>
          <p>
            ApplyChanges is called when the value in the <var>State</var> property is changed.
          </p>
        </descr>
        <seealso>
          <link id="TRadioButton.Checked"/>
          <link id="TCustomCheckBox.State"/>
          <link id="TCustomCheckBox.ApplyChanges"/>
          <link id="#lcl.controls.TControl.Parent"/>
        </seealso>
      </element>


      <element name="TRadioButton.DialogChar" link="TCustomCheckBox.DialogChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRadioButton.DialogChar.Result">
        <short/>
      </element>
      <element name="TRadioButton.DialogChar.Message">
        <short/>
      </element>


      <element name="TRadioButton.RealSetText" link="TCustomCheckBox.RealSetText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRadioButton.RealSetText.Value">
        <short/>
      </element>


      <element name="TRadioButton.DoClickOnChange">
        <short>Performs actions needed when the control has been changed using a mouse click</short>
        <descr>
          <p>
            <var>DoClickOnChange</var> is an overridden method used to signal an <var>OnChange</var> event handler when the mouse is clicked on the control. DoClickOnChange ensures the value in <var>TabStop</var> is updated to reflect the <var>State</var> for the control. When State contains <var>cbChecked</var>, TabStop is set to <b>True</b>. Otherwise, it is set to <b>False</b>.
          </p>
          <p>
            DoClickOnChange also ensures that the correct click/change behavor is used for the current control State. If the control is Checked, the inherited DoClickOnChange method is called. This also emulates the Delphi Click behaviour where the <var>OnChange</var> event handler is signalled when <var>ClicksDiabled</var> is <b>True</b>. When the control is not Checked, the <var>DoOnChange</var> method is called to signal both the <var>OnEditingDone</var> and <var>OnChange</var> event handlers.
          </p>
          <p>
            DoClickOnChange is called from the <var>DoChange</var> method in the <var>TCustomCheckBox</var> ancestor class.
          </p>
        </descr>
        <seealso>
           <link id="TCustomCheckBox.DoClickOnChange"/>
           <link id="TCustomCheckBox.DoOnChange"/>
        </seealso>
      </element>

      <element name="TRadioButton.CreateParams">
        <short>Initializes the creation parameters for the class instance</short>
        <descr>
          <p>
            <var>CreateParams</var> is an overridden method used to update creation parameters for the class instance, and calls the inherited method on entry. CreateParams ensures that <var>Style</var> flags in the <var>Params</var> argument are updated to include the <var>BS_RADIOBUTTON</var> style flag, and to exclude the <var>BS_3STATE</var> style flag.
          </p>
        </descr>
        <seealso>
          <link id="TCustomCheckBox.CreateParams"/>
        </seealso>
      </element>
      <element name="TRadioButton.CreateParams.Params">
        <short>Creation parameters updated in the method</short>
      </element>

      <element name="TRadioButton.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create ensures that the <var>csRadioButton</var> style flag is included in the component style flags for the control. The default value for the <var>AutoSize</var> property is set to <b>True</b>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TRadioButton.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TRadioButton.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TRadioButton.Anchors" link="#LCL.Controls.TControl.Anchors"/>

      <element name="TRadioButton.AutoSize" link="#LCL.Controls.TControl.AutoSize">
        <descr>
          <p>
            The default value for the property is <b>True</b> in <var>TRadioButton</var>.
          </p>
        </descr>
        <seealso>
           <link id="#LCL.Controls.TControl.AutoSize"/>
        </seealso>
      </element>

      <element name="TRadioButton.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TRadioButton.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TRadioButton.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TRadioButton.Checked" link="#LCL.StdCtrls.TButtonControl.Checked"/>
      <element name="TRadioButton.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TRadioButton.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TRadioButton.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TRadioButton.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TRadioButton.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TRadioButton.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TRadioButton.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TRadioButton.Hint" link="#LCL.Controls.TControl.Hint"/>
      <element name="TRadioButton.OnChange" link="#LCL.StdCtrls.TButtonControl.OnChange"/>
      <element name="TRadioButton.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TRadioButton.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TRadioButton.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TRadioButton.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TRadioButton.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TRadioButton.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TRadioButton.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TRadioButton.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TRadioButton.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TRadioButton.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TRadioButton.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TRadioButton.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TRadioButton.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TRadioButton.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TRadioButton.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TRadioButton.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TRadioButton.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TRadioButton.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TRadioButton.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TRadioButton.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TRadioButton.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TRadioButton.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TRadioButton.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TRadioButton.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TRadioButton.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TRadioButton.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TRadioButton.Visible" link="#LCL.Controls.TControl.Visible"/>

      <element name="TCustomLabel">
        <short>Control to show static text, possibly in multiple lines</short>
        <descr>
          <p>
            <var>TCustomLabel</var> is a <var>TWinControl</var> descendant which specifies a control to display static text on a form. The value in the control is not editable visually, and can be used to label or describe another control on the form or container. Since it cannot be edited, it is not allowed to receive the input focus. It can, however, be used to set focus to an associated control using an accelerator key defined in the Caption for the control.
          </p>
          <p>
            TCustomLabel is the ancestor class for <var>TLabel</var>. Do not create instances of TCustomLabel;  use the TLabel descendant.
          </p>
          <p>
            Use TStaticText to display static text and respond to keyboard input directly in the control.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TLabel"/>
          <link id="TStaticText"/>
          <link id="#lcl.controls.TWinControl"/>
        </seealso>
      </element>

      <element name="TCustomLabel.FAlignment" link="TCustomLabel.Alignment"/>
      <element name="TCustomLabel.FFocusControl" link="TCustomLabel.FocusControl"/>
      <element name="TCustomLabel.FOptimalFill" link="TCustomLabel.OptimalFill"/>
      <element name="TCustomLabel.FShowAccelChar" link="TCustomLabel.ShowAccelChar"/>
      <element name="TCustomLabel.FWordWrap" link="TCustomLabel.WordWrap"/>
      <element name="TCustomLabel.FLayout" link="TCustomLabel.Layout"/>
      <element name="TCustomLabel.FInternalSetBounds"/>

      <element name="TCustomLabel.SetAlignment">
        <short>Sets the value for the Alignment property</short>
        <descr/>
        <seealso>
          <link id="TCustomLabel.Alignment"/>
        </seealso>
      </element>
      <element name="TCustomLabel.SetAlignment.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetOptimalFill">
        <short>Sets the value for the OptimalFill property</short>
        <descr/>
        <seealso>
           <link id="TCustomLabel.OptimalFill"/>
        </seealso>
      </element>
      <element name="TCustomLabel.SetOptimalFill.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomLabel.CanTab">
        <short>Always False, since you cannot tab into a label control</short>
        <descr>
          <p>
            <var>CanTab</var> is an overridden method in <var>TCustomLabel</var>. The return value is always <b>False</b> since the <b>Tab</b> key cannot be used to give focus to the control.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TControl.CanTab"/>
        </seealso>
      </element>
      <element name="TCustomLabel.CanTab.Result">
        <short>Always False in TCustomLabel</short>
      </element>

      <element name="TCustomLabel.DoMeasureTextPosition">
        <short>Determines the location for the text within the control</short>
        <descr>
          <p>
            <var>DoMeasureTextPosition</var> is a procedure used to determine the coordinates where the control text is drawn. Values in <var>TextTop</var> and <var>TextLeft</var> are updated in the method.
          </p>
          <p>
            DoMeasureTextPosition uses the value in <var>Layout</var> to determine the vertical alignment for the text. When Layout is <var>tlTop</var>, the value in TextTop is set to <b>0</b> (zero). TextLeft is always set to <b>0</b> (zero).
          </p>
          <p>
            DoMeasureTextPosition calls <var>CalculateSize</var> to get the width and height needed for the text when other values are used in Layout. The calculated text height and the control <var>Height</var> are used to get the value for TextTop as follows:
          </p>
          <dl>
            <dt>tlCenter</dt>
            <dd>
              Half of the ununsed height is used in TextTop so that equal spacing occurs both above and below the text (vertically centered).
            </dd>
            <dt>tlBottom</dt>
            <dd>
              The amount of unused space is used in TextTop so the text is aligned to the bottom of the control.
            </dd>
          </dl>
          <p>
            DoMeasureTextPosition is used in the implementation of the <var>Paint</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.Layout"/>
          <link id="TCustomLabel.Height"/>
          <link id="TCustomLabel.CalculateSize"/>
          <link id="TCustomLabel.Paint"/>
        </seealso>
      </element>
      <element name="TCustomLabel.DoMeasureTextPosition.TextTop">
        <short>Top coordinate for the text</short>
      </element>
      <element name="TCustomLabel.DoMeasureTextPosition.TextLeft">
        <short>Left coordinate for the text</short>
      </element>

      <element name="TCustomLabel.HasMultiLine">
        <short>Checks for CR or LF characters in the label text for the control</short>
        <descr>
          <p>
            <var>HasMultiLine</var> is a <var>Boolean</var> function used to determine if <b>CR</b> (Carriage Return, Decimal 13) or <b>LF</b> (LineFeed, Decimal 10) characters are included in the text for the control. HasMultiLine calls GetLabelText to get the text stored in the label.
          </p>
          <p>
            The return value is <b>True</b> when either character occurs in the text for the label.
          </p>
          <p>
            HasMultiLine is used in the <var>CalculateSize</var> method to determine whether the <var>DT_SINGLELINE</var> flag is included in the drawing flags for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.CalculateSize"/>
          <link id="TCustomLabel.GetLabelText"/>
          <link id="#lcl.lcltype.DT_SINGLELINE"/>
        </seealso>
      </element>
      <element name="TCustomLabel.HasMultiLine.Result">
        <short>True when CR or LF characters are used in the text for the label</short>
      </element>

      <element name="TCustomLabel.CalculatePreferredSize">
        <short>Calculates the preferred size for the control using its anchoring and constraints</short>
        <descr>
          <p>
            <var>CalculatePreferredSize</var> is an overridden method used to calculated the preferred size for the control. Values stored in the <var>Anchors</var>, <var>Constraints</var>, and <var>WordWrap</var> properties are used to determine the effective width for the control. CalculateSize is called to calculate the text rectangle for the control using the requested dimensions.
          </p>
          <p>
            No actions are performed in the method if <var>Parent</var> has not been assigned (contains Nil), or when a handle has not been allocated in the Parent control.
          </p>
          <p>
            Please note: CalculatePreferredSize does <b>not</b> call the inherited method.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.CalculatePreferredSize"/>
        </seealso>
      </element>
      <element name="TCustomLabel.CalculatePreferredSize.PreferredWidth">
        <short/>
      </element>
      <element name="TCustomLabel.CalculatePreferredSize.PreferredHeight">
        <short/>
      </element>
      <element name="TCustomLabel.CalculatePreferredSize.WithThemeSpace">
        <short/>
      </element>

      <element name="TCustomLabel.CalculateSize">
        <short>Determines the text extent for a maximum width constraint</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.CalculateSize.MaxWidth">
        <short>Maximum width where wordwrap may start</short>
      </element>
      <element name="TCustomLabel.CalculateSize.NeededWidth">
        <short>Width needed for the text</short>
      </element>
      <element name="TCustomLabel.CalculateSize.NeededHeight">
        <short>Height needed for the text</short>
      </element>


      <element name="TCustomLabel.DoAutoSize" link="#LCL.Controls.TControl.DoAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>


      <element name="TCustomLabel.DialogChar" link="#lcl.controls.TControl.DialogChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.DialogChar.Result">
        <short/>
      </element>
      <element name="TCustomLabel.DialogChar.Message">
        <short/>
      </element>


      <element name="TCustomLabel.TextChanged" link="#lcl.controls.TControl.TextChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>


      <element name="TCustomLabel.DoSetBounds">
        <short>Performs a bounds change for the control</short>
        <descr>
          <p>
            <var>DoSetBounds</var> is an overridden method in <var>TCustomLabel</var>. It calls the inherited method to store the values in ALeft, ATop, AWidth, and AHeight to the corresponding properties in the control. Values in <var>OptimalFill</var>, <var>WordWrap</var>, and <var>Autosize</var> are used to determine if additional actions are needed for the bounds change.
          </p>
          <p>
            When <var>OptimalFill</var> is <b>True</b> and <var>AutoSize</var> is <b>False</b>, the <var>AdjustFontForOptimalFill</var> method is called. If <var>Width</var> was changed and <var>WordWrap</var> is <b>True</b>, both the <var>InvalidatePreferredSize</var> and <var>AdjustSize</var> methods are called.
          </p>
          <p>
            DoSetBounds is called from the <var>ChangeBounds</var> method in an ancestor class.
          </p>
        </descr>
        <seealso>
           <link id="TCustomLabel.OptimalFill"/>
           <link id="TCustomLabel.AutoSize"/>
           <link id="TCustomLabel.WordWrap"/>
           <link id="TCustomLabel.AdjustFontForOptimalFill"/>
           <link id="#lcl.controls.TControl.DoSetBounds"/>
        </seealso>
      </element>
      <element name="TCustomLabel.DoSetBounds.ALeft">
        <short>New value for the Left property</short>
      </element>
      <element name="TCustomLabel.DoSetBounds.ATop">
        <short>New value for the Top property</short>
      </element>
      <element name="TCustomLabel.DoSetBounds.AWidth">
        <short>New value for the Width property</short>
      </element>
      <element name="TCustomLabel.DoSetBounds.AHeight">
        <short>New value for the Height property</short>
      </element>

      <element name="TCustomLabel.FontChanged">
        <short>Implements the OnChange event handler for the Font in the control</short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method in <var>TCustomLabel</var> which implements the <var>OnChange</var> event handler for the <var>Font</var> in the control. FontChanged calls the inherited method on entry, and calls <var>UpdateSize</var> to resize the control for any changes to font propertites.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.UpdateSize"/>
           <link id="#lcl.controls.TControl.FontChanged"/>
           <link id="#lcl.graphics.TFont"/>
        </seealso>
      </element>
      <element name="TCustomLabel.FontChanged.Sender">
        <short>Object for the event notification</short>
      </element>

      <element name="TCustomLabel.GetControlClassDefaultSize" link="#lcl.controls.TControl.GetControlClassDefaultSize">
        <short>Gets the Bounds used for new instances of the class</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.GetControlClassDefaultSize.Result">
        <short>Bounds used for new instances of the class</short>
      </element>

      <element name="TCustomLabel.WMActivate">
        <short>Defers the focus to the control in the FocusControl property</short>
        <descr>
          <p>
            <var>WMActivate</var> is a procedure used to handle <b>LM_ACTIVATE</b> messages for the control.
          </p>
          <p>
            WMActivate ensures that the control in the <var>FocusControl</var> property receives the input focus by calling its <var>SetFocus</var> method. No actions are performed in the method when FocusControl has not been assigned (contains <b>Nil</b>) or its <var>CanFocus</var> method returns <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.FocusControl"/>
          <link id="#lcl.controls.TWinControl.CanFocus"/>
          <link id="#lcl.controls.TWinControl.SetFocus"/>
        </seealso>
      </element>
      <element name="TCustomLabel.WMActivate.Message">
        <short/>
      </element>

      <element name="TCustomLabel.Notification" link="#LCL.Controls.TControl.Notification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.Notification.AComponent">
        <short>Component for the notification</short>
      </element>
      <element name="TCustomLabel.Notification.Operation">
        <short>Operation for the notification</short>
      </element>

      <element name="TCustomLabel.GetLabelText">
        <short>Returns the string value in the Caption for the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.GetLabelText.Result">
        <short>Text displayed in the control</short>
      </element>

      <element name="TCustomLabel.GetTransparent" link="TCustomLabel.Transparent">
        <short>Gets the value for the Transparent property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.GetTransparent.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomLabel.SetColor" link="#LCL.Controls.TControl.SetColor">
        <short>Sets the value for the Color property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetColor.NewColor">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetFocusControl" link="TCustomLabel.FocusControl">
        <short>Sets the value for the FocusControl property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetFocusControl.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetLayout" link="TCustomLabel.Layout">
        <short>Sets the value for the Layout property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetLayout.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetShowAccelChar" link="TCustomLabel.ShowAccelChar">
        <short>Sets the value for the ShowAccelChar property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetShowAccelChar.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetTransparent" link="TCustomLabel.Transparent">
        <short>Sets the value for the Transparent property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetTransparent.NewTransparent">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.SetWordWrap" link="TCustomLabel.WordWrap">
        <short>Sets the value for the WordWrap property</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomLabel.SetWordWrap.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomLabel.Loaded" link="#lcl.controls.TControl.Loaded">
        <short>
          Performs actions needed when the component has loaded from the LCL streaming mechanism
        </short>
        <descr>
          <p>
            Overridden in TCustomLabel to call the AdjustSize method prior to exit.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomLabel.UpdateSize">
        <short>Adjusts the size for the control based on settings in AutoSize and OptimalFill</short>
        <descr>
          <p>
            <var>UpdateSizevar</var> is a method used to adjust the size for the control based on settings in the <var>AutoSize</var> and <var>OptimalFill</var> properties. UpdateSize calls <var>InvalidatePreferredSize</var>.
          </p>
          <p>
            When <var>OptimalFill</var> is <b>True</b> and <var>AutoSize</var> is <b>False</b>, the <var>AdjustFontForOptimalFill</var> method is called to adjust the font size used in the control. <var>AdjustSize</var> is called to resize the control (and any parent controls). When <var>Alignment</var> is set to <var>taRightJustify</var>, the value in <var>Left</var> may be changed to reflect the new <var>Width</var> for the control.
          </p>
          <p>
            UpdateSize is called from the implementation of the <var>FontChanged</var> and <var>TextChanged</var> methods, and when setting a new value for the <var>ShowAccelChar</var> or <var>WordWrap</var> properties.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomLabel.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry to the method. Create updates the values in <var>ControlStyle</var> to enable mouse capture and both click and double-click events. Create calls <var>SetInitialBounds</var> using the default dimensions for the class instance. Create sets the default values for properties, including: <var>ShowAccelChar</var>, <var>Color</var>, <var>AutoSize</var>, and <var>AccessibleRole</var>.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomLabel.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomLabel.CalcFittingFontHeight">
        <short>Calculates the font height needed to fill the specified width and height constraints</short>
        <descr>
          <p>
            <var>CalcFittingFontHeight</var> is a <var>Boolean</var> function used to calculate the maximum font height needed to make the specified string fill the available space, given the MaxWidth and MaxHeight constraints.
          </p>
          <p>
            The return value is <b>True</b> when the text rectangle using the new font height fits within the size constraints in MaxWidth and MaxHeight. NeedWidth and NeedHeight are set to the values indicated in the text rectangle. The return value is <b>False</b> when the text rectangle is either too wide or too tall, or cannot be calculated using the specified parameter values.
          </p>
          <remark>
            Please note: No actions are performed in the method when AutoSizeDelayed is set to <b>True</b>, when TheText is an empty string, or when MaxHeight or MaxWidth contain 0 or a negative value.
          </remark>
          <p>
            The font height is calculated using a temporary TFont instance with the current Font for the control, setting its drawing flags to calculate the text rectangle. The drawing flags include wrapping when the WordWrap property is set to <b>True</b>. The font height is incrementally increased or decreased until the maximum font height which fits with MaxHeight and MaxWidth is determined.
          </p>
          <p>
            CalcFittingFontHeight is used in the implementation of the <var>AdjustFontForOptimalFill</var> method.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.Result">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.TheText">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.MaxWidth">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.MaxHeight">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.FontHeight">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.NeededWidth">
        <short/>
      </element>
      <element name="TCustomLabel.CalcFittingFontHeight.NeededHeight">
        <short/>
      </element>

      <element name="TCustomLabel.ColorIsStored">
        <short>Implements the storage specifier for the Color property</short>
        <descr/>
        <seealso>
          <link id="TCustomLabel.Color"/>
        </seealso>
      </element>
      <element name="TCustomLabel.ColorIsStored.Result">
        <short>True when a value other than clNone has been assigned to the Color property</short>
      </element>

      <element name="TCustomLabel.AdjustFontForOptimalFill">
        <short>Adjusts the font height for the control text to fill the available client area</short>
        <descr>
          <p>
            <var>AdjustFontForOptimalFill</var> is a <var>Boolean</var> function used to adjust the font height so that text in the label expands to fill the available client area for the control. AdjustFontForOptimalFill calls <var>CalcFittingFontHeight</var> to determine the font height needed to make the label text (caption) fill the Width for the control. The calculated font height is stored in the <var>Font</var> property.
          </p>
          <p>
            The return value is <b>True</b> when the Font height was changed in the method.
          </p>
          <p>
            AdjustFontForOptimalFill is called from <var>DoSetBounds</var> and <var>UpdateSize</var> when <var>OptimalFill</var> is set to <b>True</b> and <var>AutoSize</var> is set to <b>False</b>. It is also called when a new value is assigned to the <var>OptimalFill</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.CalcFittingFontHeight"/>
          <link id="TCustomLabel.OptimalFill"/>
          <link id="TCustomLabel.AutoSize"/>
          <link id="TCustomLabel.UpdateSize"/>
          <link id="TCustomLabel.DoSetBounds"/>
          <link id="#lcl.controls.TControl.Font"/>
        </seealso>
      </element>
      <element name="TCustomLabel.AdjustFontForOptimalFill.Result">
        <short>True when the font height was changed in the method</short>
      </element>

      <element name="TCustomLabel.Paint">
        <short>Performs actions needed to draw the control on its Canvas</short>
        <descr>
          <p>
            <var>Paint</var> is an overridden method in <var>TCustomLabel</var> used to draw the control on its <var>Canvas</var>. Paint ensures that property values in the control are applied to the text drawn in the method, including: AutoSize, Alignment, Layout, WordWrap, Transparent, Color, Font, ShowAccel, and Enabled.
          </p>
          <remark>
            Please note: Paint does <b>not</b> call the inherited method, and as a result does not use the <var>OnPaint</var> event handler in the ancestor class.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomLabel.GetLabelText"/>
          <link id="TCustomLabel.Canvas"/>
          <link id="#lcl.controls.TGraphicControl.Paint"/>
        </seealso>
      </element>

      <element name="TCustomLabel.SetBounds" link="#lcl.controls.TControl.SetBounds">
        <short>Sets the bounds (Top, Left, Width, Height) for the control</short>
        <descr>
          <p>
            Overridden to call <var>InvalidatePreferredSize</var> the first time the method is used and both <var>AutoSize</var> and <var>WordWrap</var> are enabled in the control. Calls the inherited method prior to exit.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.AutoSize"/>
          <link id="TCustomLabel.WordWrap"/>
          <link id="#lcl.controls.TControl.InvalidatePreferredSize"/>
          <link id="#lcl.controls.TControl.SetBounds"/>
        </seealso>
      </element>
      <element name="TCustomLabel.SetBounds.aLeft">
        <short>Horizontal coordinate for the left-hand edge of the control</short>
      </element>
      <element name="TCustomLabel.SetBounds.aTop">
        <short>Vertical coordinate for the top edge of the control</short>
      </element>
      <element name="TCustomLabel.SetBounds.aWidth">
        <short>New width for the control</short>
      </element>
      <element name="TCustomLabel.SetBounds.aHeight">
        <short>New Height for the control</short>
      </element>

      <element name="TCustomLabel.Alignment">
        <short>Horizontal text justification in the control (centered, left- or right-justified)</short>
        <descr>
          <p>
            <var>Alignment</var> is a <var>TAlignment</var> property which controls the horizontal justification of the text displayed in the control. The default value for the property is <var>taLeftJustify</var>. When a new value is assigned to the Alignment property, the <var>Invalidate</var> method is called to repaint the control.
          </p>
          <p>
            Alignment (and other properties) are used in the <var>Paint</var> method when the text is rendered to the <var>Canvas</var> for the control. It is also used in <var>UpdateSize</var> when right alignment needs to be considered for an auto-sized or optimal-filled control.
          </p>
          <p>
            Use the <var>Layout</var> property to control the vertical alignment of the text displayed in  the control.
          </p>
          <p>
            Use <var>OptimalFill</var> to indicate if the font height can be adjust to fill the client area for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.AutoSize"/>
          <link id="TCustomLabel.Layout"/>
          <link id="TCustomLabel.OptimalFill"/>
          <link id="TCustomLabel.Paint"/>
          <link id="TCustomLabel.UpdateSize"/>
          <link id="#lcl.controls.TControl.Invalidate"/>
          <link id="#rtl.classes.TAlignment"/>
        </seealso>
      </element>

      <element name="TCustomLabel.AutoSize" link="#lcl.controls.TControl.AutoSize">
        <short/>
        <descr>
          <p>
            The default value for the property is <b>True</b> in <var>TCustomLabel</var>.
          </p>
        </descr>
        <seealso>
           <link id="#lcl.controls.TControl.AutoSize"/>
        </seealso>
      </element>

      <element name="TCustomLabel.Color" link="#LCL.Controls.TControl.Color"/>

      <element name="TCustomLabel.FocusControl">
        <short>The control associated with the label and its accelerator key (AccelChar)</short>
        <descr>
          <p>
            Set <var>FocusControl</var> to the control which is focused when the accelerator key in the label is pressed.
          </p>
          <p>
            A label control cannot receive the input focus (it's read-only), but can display an accelerator key indicator, just like a menu entries. A windowed control (Edit...) can receive focus, but cannot indicate an accelerator key.
          </p>
          <p>
            Using a combination of a label and another control allows setting the accelerator key in the label caption. The other control receives focus when the user presses the accelerator key.
          </p>
          <p>
            An accelerator key is marked by an Ampersand '&amp;' in the label caption, immediately preceding the character to be used as the accelerator key. The marked character appears underlined on screen, when ShowAccelChar is set to <b>True</b>.
          </p>
          <p>
            For example: When you have a NameEdit1 control on a form, preceded by a label NameLabel1, you can set NameLabel1.FocusControl to NameEdit1, and NameLabel1.Caption to '&amp;Name'. This makes the NameLabel1 displayed as '<u><b>N</b></u>ame'.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.ShowAccelChar"/>
        </seealso>
      </element>

      <element name="TCustomLabel.Layout">
        <short>Vertical alignment for control text (at the top, bottom, or center)</short>
        <descr>
          <p>
            <var>Layout</var> is a <var>TTextLayout</var> property with the vertical alignment used for the text displayed in the control. The default value for the property is <var>tlTop</var>. Changing the value in Layout causes the <var>Invalidate</var> method to be called to redraw the control.
          </p>
          <p>
            Use the <var>Alignment</var> property to control the horizontal alignment for the text in the control.
          </p>
          <p>
            Use <var>OptimalFill</var> to indicate if the font height can be adjusted to fill the client area for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.Alignment"/>
          <link id="TCustomLabel.OptimalFill"/>
          <link id="#lcl.graphics.TTextLayout"/>
          <link id="#lcl.controls.TControl.Invalidate"/>
        </seealso>
      </element>

      <element name="TCustomLabel.OptimalFill">
        <short>If True, the font size is adjusted for optimal fill of the available space</short>
        <descr/>
        <seealso/>
      </element>

      <element name="TCustomLabel.ShowAccelChar">
        <short>Underlines the character in the label that acts as an accelerator with a shortcut key</short>
        <descr>
          <p>
            When <b>False</b>, an Ampersand '&amp;' in the label caption is displayed as an ordinary character (as in the Object Inspector).
          </p>
          <p>
            When <b>True</b>, the character following the Ampersand appears underlined, and when the user presses the accelerator key (CTRL+[character]), the focus changes to the associated FocusControl.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.FocusControl"/>
        </seealso>
      </element>

      <element name="TCustomLabel.Transparent">
        <short>Indicates whether the viewer can see through the control</short>
        <descr>
          <p>
            Opaque labels have their enclosing rectangle filled with the background color for the label. This can be the color of the Parent control, when ParentColor is <b>True</b>. Setting Transparent to <b>True</b> makes the label transparent, and does not hide any background details.
          </p>
          <p>
            Please note: The default value of this property in the LCL is <b>True</b>, which differs from the default value in the Delphi VCL.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TControl.ParentColor"/>
        </seealso>
      </element>

      <element name="TCustomLabel.WordWrap">
        <short>
          Allows text to wrap into multiple lines when it is too long for the available Width
        </short>
        <descr>
          <p>
            <var>WordWrap</var> is a <var>Boolean</var> property which indicates if the text in the control can be wrapped into multiple lines when its length exceeds the value in <var>Width</var>. The default value for the property is <b>False</b>.
          </p>
          <p>
            When a new value is assigned to the property, the <var>Invalidate</var> and <var>UpdateSize</var> methods are called to auto-size and repaint the control.
          </p>
          <p>
            When WordWrap is <b>False</b>, the text is truncated at the right margin of the control. When WordWrap is <b>True</b> and <var>AutoSize</var> is <b>True</b>, the <var>Width</var> is fixed by anchoring the left and right sides for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomLabel.AutoSize"/>
          <link id="TCustomLabel.UpdateSize"/>
          <link id="#lcl.controls.TControl.Width"/>
          <link id="#lcl.controls.TControl.Invalidate"/>
        </seealso>
      </element>

      <element name="TLabel">
        <short>Control to show static text, possibly in multiple lines</short>
        <descr>
          <p>
            <var>TLabel</var> is a <var>TCustomLabel</var> descendant which implements a control to display static text on a form. The value in the control is not editable visually, and can be used to label or describe another control on the form or container. Since it cannot be edited, it is not allowed to receive the input focus. It can, however, be used to set focus to an associated control using an accelerator key defined in the Caption for the control.
          </p>
          <p>
            Use <var>TStaticText</var> to display static text and respond to keyboard input directly in the control.
          </p>
        </descr>
        <seealso>
          <link id="HowToUseStdCtrls"/>
          <link id="TStaticText"/>
        </seealso>
      </element>

      <element name="TLabel.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TLabel.Alignment" link="#LCL.StdCtrls.TCustomLabel.Alignment"/>
      <element name="TLabel.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TLabel.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TLabel.BidiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TLabel.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TLabel.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TLabel.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TLabel.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TLabel.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TLabel.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TLabel.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TLabel.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TLabel.FocusControl" link="#LCL.StdCtrls.TCustomLabel.FocusControl"/>
      <element name="TLabel.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TLabel.Layout" link="#LCL.StdCtrls.TCustomLabel.Layout"/>
      <element name="TLabel.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TLabel.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TLabel.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TLabel.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TLabel.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TLabel.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TLabel.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TLabel.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TLabel.OnMouseEnter" link="#LCL.Controls.TControl.OnMouseEnter"/>
      <element name="TLabel.OnMouseLeave" link="#LCL.Controls.TControl.OnMouseLeave"/>
      <element name="TLabel.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TLabel.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TLabel.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TLabel.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TLabel.OptimalFill" link="#LCL.StdCtrls.TCustomLabel.OptimalFill"/>
      <element name="TLabel.ParentBidiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TLabel.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TLabel.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TLabel.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TLabel.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TLabel.ShowAccelChar" link="#LCL.StdCtrls.TCustomLabel.ShowAccelChar"/>
      <element name="TLabel.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TLabel.Transparent" link="#LCL.StdCtrls.TCustomLabel.Transparent"/>
      <element name="TLabel.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TLabel.WordWrap" link="#LCL.StdCtrls.TCustomLabel.WordWrap"/>

      <element name="Register">
        <short>Registers components declared in the unit</short>
        <descr>
          <p>
            <var>Register</var> is a procedure used to register components in the <file>stdctrls.pp</file>  unit for use in the Lazarus IDE.
          </p>
          <p>
            Register calls <var>RegisterComponents</var> to add the following components to the <b>Standard</b> tab in the IDE:
          </p>
          <ul>
            <li>TButton</li>
            <li>TLabel</li>
            <li>TEdit</li>
            <li>TMemo</li>
            <li>TToggleBox</li>
            <li>TCheckBox</li>
            <li>TRadioButton</li>
            <li>TListBox</li>
            <li>TComboBox</li>
            <li>TScrollBar</li>
            <li>TGroupBox</li>
          </ul>
          <p>
            Register calls RegisterComponents to add the following components to the <b>Additional</b> tab in the IDE:
          </p>
          <ul>
            <li>TStaticText</li>
          </ul>
        </descr>
      </element>

      <topic name="HowToUseStdCtrls">
        <short>How to use <var>StdCtrls</var>, <var>ComCtrls</var> or <var>ExtCtrls</var>
        </short>
        <descr>
          <p>
            The Units <var>StdCtrls</var>, <var>ComCtrls</var> and <var>ExtCtrls</var> contain definitions and descriptions of many of the most commonly used controls for constructing Forms and other objects in Lazarus GUI applications.
          </p>
          <p>
            Most controls are split into a final class, such as <var>TButton</var>, <var>TMemo</var>, <var>TScrollBar</var> etc., and a corresponding ancestor class such as <var>TCustomButton</var>, <var>TCustomMemo</var> or <var>TCustomScrollBar</var>. The final class is designed for immediate use, it almost only publishes the properties of the control. The corresponding custom ancestor class (<var>TCustomXXX</var>) can be used to derive controls with special (customized) appearance or behavior.
          </p>
          <p>
            If you drop a component from the component palette on the form editor you don't need to add code explicitly to create it. The component is automatically created by the IDE together with the form, and destroyed when the form is destroyed.
          </p>
          <p>
            However, if you create the component yourself by code, and don't specify an Owner for it (Create(Nil)), you are responsible for freeing the component when it is no longer needed. You better construct it with Create(Self), where Self means the containing Form or Parent control.
          </p>
          <p>
            A control also must have a Parent control, maybe the Form, so that it can become visible within the client area of its Parent. The Top and Left properties specify the placement of the control within its <b>Parent</b>. The Object Tree reflects the Parent-Client relationships of all controls on the form.
          </p>
          <p>
            Unlike controls, mere <var>components</var> are invisible at run-time (Open Dialogs...). Controls can be made invisible at run-time as well, by setting their Visible property to <b>False</b>.
          </p>
          <p>
            If you place a component on the Form Designer and look at the Object Inspector, you can observe the Top and Left properties change as you move the component around. The same for the Width and Height properties, when you resize a control by dragging it's size grips.
          </p>
          <p>
            When you modify the properties in the Object Inspector, the control on the form will reflect the changes as well.
          </p>
          <p>
            You can also explicitly change the properties of the object in code by typing (in the appropriate Implementation section of the Source editor), for example
          </p>
          <code>Form1.Button1.Height := 48;</code>
          <p>
            In summary, there are usually about three different ways to determine each property of a component:
          </p>
          <ul>
            <li>by using the mouse,</li>
            <li>by setting the values in the Object Inspector,</li>
            <li>or explicitly by writing code.</li>
          </ul>
          <p>
            The components defined in these Units have several properties that are common to most of them, and other properties that are specific to the individual components. We shall describe the most common ones here. Unusual or control-specific properties will be described for the individual controls.
          </p>
          <p>
            Additional Help can always be obtained by selecting a property or keyword,  in either the Object Inspector or the Source Editor, and pressing <b>F1</b>. You will be taken by your Help browser to the appropriate page in the documentation.
          </p>
          <p>
            If the description of a property on that page is insufficient, you can navigate to the corresponding description in the ancestor classes, by selecting the links in the Inheritance listing or by selecting the ancestor Type in the declaration of the object.
          </p>
          <table>
            <caption>Some commonly listed properties</caption>
            <th>
              <td>Property</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>Action</td>
              <td>
                Use Action when e.g. a button and a menu entry shall perform the same task, e.g. the <var>Close</var> action.
              </td>
            </tr>
            <tr>
              <td>Align</td>
              <td>
                Defines how a control is lined up within its parent control. Possible values are alTop, alBottom (stacked at the top or bottom, using the full available width), alLeft, alRight (placed at the left or right, using the full available height), alNone (place anywhere on parent control) or alClient (takes all available space left over by other controls).
              </td>
            </tr>
            <tr>
              <td>Anchor</td>
              <td>
                Used to keep a control at a fixed distance from the edges of its Parent control, when the Parent is resized. For example <b>[akBottom, akRight]</b> will keep the control a fixed distance from the bottom right corner. Anchoring both [akLeft, akRight] will make the control extend or shrink in Width, together with its Parent.
              </td>
            </tr>
            <tr>
              <td>AutoSelect</td>
              <td>
                When <b>True</b>, a text control will select all its text when it receives focus or when the Enter key is pressed.
              </td>
            </tr>
            <tr>
              <td>AutoSelected</td>
              <td>
                <b>True</b> indicate that the edit or combo-box control has performed an AutoSelect operation, so that subsequent mouse-clicks and keystrokes proceed normally without selecting the text.
            </td>
            </tr>
            <tr>
              <td>BorderSpacing</td>
              <td>The space around the edge between an control and its siblings.</td>
            </tr>
            <tr>
              <td>Caption</td>
              <td>
                The text that is displayed on the control; it should preferably give some clue as to the function of the control, or an instruction such as 'Close' or 'Execute'. By default Caption is set to be the same as the 'Name' property, and the application designer should substitute meaningful text instead of the default values.
              </td>
            </tr>
            <tr>
              <td>CharCase</td>
              <td>
                Indicates how text is displayed in a text editing control: Normal (retaining the case of the letters typed by the user), converted to uppercase, or converted to lowercase
              </td>
            </tr>
            <tr>
              <td>Constraints</td>
              <td>
                Sets the minimum and maximum sizes for a control. If a control is resized the new dimensions are always within the ranges given here. You should take care when setting these options that they do not conflict with the Anchors and Align settings.
              </td>
            </tr>
            <tr>
              <td>Color</td>
              <td>The Color to be used to draw the control's background.
              </td>
            </tr>
            <tr>
              <td>Enabled</td>
              <td>
                Determines whether a control can be selected or perform an action. If it is not <var>Enabled</var>, it is often <b>Grayed</b> out on the Form.
              </td>
            </tr>
            <tr>
              <td>Font</td>
              <td>
                The Font to be used for writing the text associated with the control - either the caption or label, or the text-strings contained within the control. The entry on the Object Inspector usually has a (+) box on the left, and selecting this box reveals further options such as character set, color and size.
              </td>
            </tr>
            <tr>
              <td>Hint</td>
              <td>A short informative pop-up text that appears when the mouse-cursor moves over the control.</td>
            </tr>
            <tr>
              <td>Items</td>
              <td>
                The list of 'Things' that the object contains, such as a group of images, a series of lines of text, a number of actions in an actionlist, etc.
              </td>
            </tr>
            <tr>
              <td>Lines</td>
              <td>
                An array of strings, containing the paragraph texts in Memo controls. The array index is zero-based, i.e. the lines are numbered 0..numLines-1.
              </td>
            </tr>
            <tr>
              <td>Name</td>
              <td>
                The identifier by which the control is known in the program. The IDE gives it a default name based on the underlying type, for example successive instances of TBitButton would be named Form1.BitBitton1 and Form1.BitButton2; it is up to the application programmer to give them more meaningful names such as ExitButton or OKButton. By default the Name of the control is applied to the Caption for the control, but the text of the Caption may be changed separately.
              </td>
            </tr>
            <tr>
              <td>PopUpMenu</td>
              <td>
                A window containing context-sensitive menu entries, that pops up when the right mouse button is clicked on the object.
              </td>
            </tr>
            <tr>
              <td>Position (or Top, Left)</td>
              <td>Determines where the control is located on the parent form or control.</td>
            </tr>
            <tr>
              <td>ReadOnly</td>
              <td>If <b>True</b>, the user cannot change the text in the control.</td>
            </tr>
            <tr>
              <td>ShowHint</td>
              <td>Allows to enable or suppress <var>Hints</var>.
              </td>
            </tr>
            <tr>
              <td>Size (or Height and Width)</td>
              <td>The dimensions of the control</td>
            </tr>
            <tr>
              <td>Style</td>
              <td>
                The options available for Style depend upon the sort of Control being considered: for instance the Style may be defined by TFormStyle, TBorderStyle, TButtonStyle etc.
              </td>
            </tr>
            <tr>
              <td>TabOrder</td>
              <td>
                Specifies the sequence of controls, that are entered when the user presses the Tab key.
              </td>
            </tr>
            <tr>
              <td>TabStop</td>
              <td>Specifies whether the control can be reached (or is skipped) by pressing the Tab key.</td>
            </tr>
            <tr>
              <td>Text</td>
              <td>
                Like Caption, the <b>user editable</b> text that appears in the control. Applies particularly to Edit, Memo and Combo-Box types of controls. Most of the editing operations (such as <var>Select</var>, <var>Clear</var>, <var>Cut</var>, <var>Copy</var>) are performed in this property. If the control contains more than a single line of text, then the textual elements are arranged as a zero-based array of strings in <var>Lines</var> (<var>TMemo</var>) or <var>Items</var> (<var>TListBox</var>, <var>TComboBox</var>).
              </td>
            </tr>
            <tr>
              <td>Visible</td>
              <td>If <b>True</b>, the control can be seen on the Form; if <b>False</b>, it is hidden.</td>
            </tr>
            <tr>
              <td>WordWrap</td>
              <td>
                Allows wrapping the Text into multiple lines. When <b>False</b>, the text is clipped at the right margin of the control, but it still can be inspected by moving the caret within the text.
              </td>
            </tr>
          </table>
          <p>
            The 'Events' tab in the Object Inspector contains a list with events, which can occur for this control. If you select an entry in the list, a combo-box appears with a drop-down list showing any event handlers that have already been defined, and allowing you to choose one for this event. Alternatively you can select the ellipsis (three dots ...) and you will be taken to the Source Editor, where the Object Inspector created an new event handler method for you. You also can type the name of your handler in the Object Inspector and press Enter, to create a new handler method.
          </p>
          <p>
            While a large number of events is available for any given control, in practice it is only necessary to populate a few of them. For most controls, it is sufficient to provide coding for 'OnClick'; for more complex controls it may be necessary also to provide for 'OnEntry' (when the control receives the focus) and 'OnExit' (when the control looses the focus); or you may need to write an event handler for 'OnChange' or 'OnScroll', depending on the nature of the particular control with which you are dealing.
          </p>
          <p>
            Many controls have a default event, usually OnClick, for which an handler is created with a double click on the control. Or right click on the control, and select the first entry: 'Create default event'.
          </p>
          <p>
            A common strategy in Object-Oriented programming is to provide an <link id="#lcl.ActnList.TActionList">ActionList</link> with the facility for entering, removing or editing a number of predefined actions, from which the most appropriate can be selected to use in any particular instance.
          </p>
          <table>
            <caption>Some commonly listed Actions</caption>
            <th>
              <td>Event</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>OnChange</td>
              <td>
                Action to be taken if any change is detected (e.g. by mouse click, key press, edit text, etc).
              </td>
            </tr>
            <tr>
              <td>OnClick</td>
              <td>
                Action to be taken when the (left) mouse button is clicked. This is usually the main or default action of the control; for example clicking on a button or check box initiates the action associated with the check box. It may alternatively initiate a process of selection, for instance in a TextBox or Memo.
              </td>
            </tr>
            <tr>
              <td>Click</td>
              <td>
                A method to emulate in code the effect of clicking on a control. This method is most often found in Button-type controls (TButton, TBitBtn, TSpeedButton etc). A procedure can be written that calls the same code as the OnClick action. This facility can be particularly useful if the activation of one control by clicking causes a cascade of other controls to be activated, and the Click method can be used to initiate the action rather than having the user explicitly click on a lot of controls.
              </td>
            </tr>
            <tr>
              <td>OnDragDrop</td>
              <td>
                Action to be taken when a dragged control has been dropped onto this control.
              </td>
            </tr>
            <tr>
              <td>OnEntry</td>
              <td>
                Action to be taken when the control receives the focus. This might include changes in the appearance of the object such as highlighting or raising the border.
              </td>
            </tr>
            <tr>
              <td>OnExit</td>
              <td>
                Action to be taken when control is about to loose the focus. This is the right place for validity checks of user input, with a chance to disallow moving to a different control when the input is invalid.
              </td>
            </tr>
            <tr>
              <td>OnKeyPress</td>
              <td>Action to be taken on an entered character. Checks...???</td>
            </tr>
            <tr>
              <td>OnKeyDown</td>
              <td>
                Action to be taken if a key is down while focus is in this control. This allows one to filter or process control characters in a special way.
              </td>
            </tr>
            <tr>
              <td>OnKeyUp</td>
              <td>
                Action to be taken if a key goes up. This event occurs only once, while auto-repeated keystrokes trigger multiple OnKeyDown or OnKeyPress events.
              </td>
            </tr>
            <tr>
              <td>OnMouseMove</td>
              <td>
                Action to be taken if the mouse cursor moves over the control. This event fires with every small move, while OnMouseEnter and OnMouseLeave occur only when the mouse enters or leaves the control.
              </td>
            </tr>
            <tr>
              <td>OnMouseDown</td>
              <td>Action to be taken when a mouse button is pressed over the control.</td>
            </tr>
            <tr>
              <td>OnMouseUp</td>
              <td>Action to be taken if a mouse button goes up over the control.
              </td>
            </tr>
            <tr>
              <td>OnResize</td>
              <td>
                Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. Do not mix up with AutoSize, or you ask for trouble!
              </td>
            </tr>
          </table>
          <p>
            <var>Constructors</var> such as <var>Create</var> allocate memory and system resources needed by the object. They also call the constructor of any sub-objects present in the class.
          </p>
          <p>
            <var>Destructors</var> remove the object and de-allocate memory and other resources. If you call <var>Destroy</var> for an object which hasn't being initialized yet it will generate an error. Always use the <var>Free</var> method to deallocate objects, because it checks whether an object's value is <b>nil</b> before invoking <var>Destroy</var>.
          </p>
          <p>
            Take the following precautions when creating your own <var>Destroy</var> method:
          </p>
          <ul>
            <li>
              Declare <var>Destroy</var> with the <b>override</b> directive, because it is a <b>virtual</b> method.
            </li>
            <li>
              Always call the <code>inherited Destroy;</code> method as the last action in the destructor code.
            </li>
            <li>
              Be aware that an <var>exception</var> may be raised by the <var>constructor</var> when  there is not enough memory to create an object, or something else goes wrong. If the <var>exception</var> is not handled inside the constructor, the object will be destroyed immediately. In this case <var>Destroy</var> will be called with a partially initialized object, so your destructor must check if the resources were really allocated before disposing of them.
            </li>
            <li>Remember to call <var>Free</var> for all objects created on the constructor.</li>
          </ul>
        </descr>
      </topic>

    </module>
    <!-- StdCtrls -->
  </package>
</fpdoc-descriptions>
