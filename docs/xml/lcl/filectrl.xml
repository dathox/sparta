<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
      ====================================================================
        FileCtrl
      ====================================================================
    -->
    <module name="FileCtrl">
      <short>Implements a list box used to select files on the local file system</short>
      <descr/>

      <element name="TFileAttr">
        <short>Enumerated type with file and directory attributes used in TFileListBox</short>
        <descr>
          <p>
            <var>TFileAttr</var> is an enumerated type with values that represent file and directory attributes for a selection in <var>TFileListBox</var>. Values from TFileAttr are stored in the <var>TFileType</var> set, which is used to implement the <var>FileType</var> property in TFileListBox.
          </p>
          <p>
            Values in TFileAttr generally correspond to the file attributes used in <var>TSearchRec</var> from the FreePascal RTL (Run-Time Library). The exceptions are:
          </p>
          <dl>
            <dt>ftNormal</dt>
            <dd>
              This represents a file lacking any other file attributes; repesented in TSearchRec with the Integer value <b>0</b> (<b>zero</b>).
            </dd>
            <dt>fsAnyFile</dt>
            <dd>
              This value from TSearchRec is not represented in TFileAttr; it is a search mask and not an actual  file attribute.
            </dd>
          </dl>
        </descr>
        <seealso>
          <link id="TFileListBox"/>
          <link id="TFileType"/>
          <link id="#rtl.sysutils.TSearchRec"/>
          <link id="#rtl.sysutils.FindFirst"/>
          <link id="#rtl.sysutils.FindNext"/>
          <link id="#rtl.sysutils.FindClose"/>
        </seealso>
      </element>
      <element name="TFileAttr.ftReadOnly">
        <short>File is read-only.</short>
      </element>
      <element name="TFileAttr.ftHidden">
        <short>
          File is hidden. For UNIX-like environments, the means that the file name starts with a '.' (Dot) character.
        </short>
      </element>
      <element name="TFileAttr.ftSystem">
        <short>
          File is a sytem file. For UNIX-like environements, this means it is a character, block, or FIFO file.
        </short>
      </element>
      <element name="TFileAttr.ftVolumeID">
        <short>
          Drive Volume label used on the Windows FAT (not FAT32) file system. Not used on UNIX-like file systems.
        </short>
      </element>
      <element name="TFileAttr.ftDirectory">
        <short>
          FIle is a directory.
        </short>
      </element>
      <element name="TFileAttr.ftArchive">
        <short>
          File is ready to be archived. Not used for UNIX-like file systems.
        </short>
      </element>
      <element name="TFileAttr.ftNormal">
        <short>
          File has no other file attribtes.
        </short>
      </element>

      <element name="TFileType">
        <short>Set used to store file attributes</short>
        <descr>
          <p>
            <var>TFileType</var> is a set type used to store zero (0) or more enumeration values from <var>TFileAttr</var>. TFileType is the type used to implement the <var>FileType</var> property in <var>TFileListBox</var>.
          </p>
        </descr>
        <seealso>
          <link id="TFileAttr"/>
          <link id="TFileListBox.FileType"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox">
        <short>Implements the base class for a file selection list box</short>
        <descr>
          <p>
            <var>TCustomFileListBox</var> is a TCustomListBox descendant which implements the base type for <var>TFileListBox</var>. TCustomFileListBox extends the ancestor with properties, methods, and events used to select a file or directory on the local file system in a list box control.
          </p>
          <p>
            Use the Drive and Directory properties to specify the location on the local file sytem displayed in the list box. Please note: Drive is not used on UNIX-like file systems.
          </p>
          <p>
            Use FileType to specify the files and/or directories which can be displayed in the control.
          </p>
          <p>
            Use Mask to specify a file mask (with optional wildcards) used to select the files displayed in the control. Please note: Wild cards may be implemented differently for some file systems. For example: '*' is the "all files" mask on UNIX-like file systems instead of "*.*".
          </p>
          <p>
            Use the Sorted property to control the order of files and directories displayed in the control.
          </p>
          <p>
            Use the FileName property to get the current file selection in the control.
          </p>
          <p>
            Assign an object procedure to the OnChange event handler to perform actions needed when a new item has been selected in the control.
          </p>
          <p>
            Do not create instances of TCustomFileListBox. Use the TFileListBox descendant which sets the visibility of properties used in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomListBox"/>
          <link id="TFileListBox"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.FDrive"/>
      <element name="TCustomFileListBox.FDirectory"/>
      <element name="TCustomFileListBox.FFileName"/>
      <element name="TCustomFileListBox.FFileType"/>
      <element name="TCustomFileListBox.FMask"/>
      <element name="TCustomFileListBox.FOnChange"/>
      <element name="TCustomFileListBox.FLastChangeFileName"/>

      <element name="TCustomFileListBox.MaskIsStored">
        <short>Storage specifier for the Mask property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.Mask"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.MaskIsStored.Result">
        <short>
          True when a value other than the all directory entries mask has been assigned to the property
        </short>
      </element>

      <element name="TCustomFileListBox.SetDirectory">
        <short>Sets the value for the Directory property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.Directory"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.SetDirectory.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFileListBox.SetDrive">
        <short>Sets the value for the Drive property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.Drive"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.SetDrive.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFileListBox.SetFileName">
        <short>Sets the value for the FileName property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.SetFileName.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFileListBox.SetFileType">
        <short>Sets the value for the FileType property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.FileType"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.SetFileType.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFileListBox.SetMask">
        <short>Sets the value for the Mask property</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.Mask"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.SetMask.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFileListBox.UpdateSelectedFileName">
        <short>Updates the value in FileName when a new item is selected in the list box</short>
        <descr/>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
          <link id="TCustomFileListBox.Directory"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="TCustomFileListBox.OnChange"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.DoChangeFile">
        <short>
          Performs actions needed when the selected file has changed in the control
        </short>
        <descr>
          <p>
            <var>DoChangeFile</var> is a method used to change the file selection in the control. It signals  the <var>OnChange</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
          <link id="TCustomFileListBox.OnChange"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.Loaded">
        <short>
          Performs actions needed when the control has finished loading using the LCL component streaming mechanism
        </short>
        <descr>
          <p>
            <var>Loaded</var> is an overridden method in <var>TCustomFileListBox</var>, and calls the inherited method on entry. Loaded calls the <var>UpdateFileList</var> method to load file and directory names into the Items property.
          </p>
        </descr>
        <seealso>
           <link id="#rtl.Classes.TComponent.Loaded"/>
          <link id="TCustomFileListBox.UpdateFileList"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.IndexOfFile">
        <short>Gets the ordinal position for the specifed file name in Items</short>
        <descr>
          <p>
            <var>IndexOfFile</var> is an Integer function used to get the ordinal position for the specified  file name in the list of file names in the control. <var>AFilename</var> contains the file name to locate in the method.
          </p>
          <p>
            IndexOfFile handles drive and volume entries that may be stored in <var>Items</var> by ignoring the square brackets ('<b>[]</b>') used to surround values with the corresponding file attributes. The <var>CompareFileNames</var> routine from <file>LazFileUtils</file> is used to perform file name comparisions.
          </p>
          <p>
            The return value is <b>-1</b> when AFilename is not stored in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="#lazutils.lazfileutils.CompareFileNames"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.IndexOfFile.Result">
        <short>Ordinal position in Items for the specified file name, or -1 when not found</short>
      </element>
      <element name="TCustomFileListBox.IndexOfFile.AFilename">
        <short>File name to locate in Items</short>
      </element>

      <element name="TCustomFileListBox.KeyUp">
        <short>Implements the handler for KeyUp events in the control</short>
        <descr>
          <p>
            Overridden in <var>TCustomFileListBox</var> to update the selected file name prior to calling the inherited method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
          <link id="TCustomFileListBox.UpdateFileList"/>
           <link id="#LCL.Controls.TWinControl.KeyUp"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.KeyUp.Key">
        <short>Virtual key code examined in the method</short>
      </element>
      <element name="TCustomFileListBox.KeyUp.Shift">
        <short>Shift, Alt, or Ctrl modifier for the virtual key</short>
      </element>

      <element name="TCustomFileListBox.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited constructor on entry. Create sets the default values for properties in the class instance, including:
          </p>
          <ul>
            <li>Mask</li>
            <li>FileType</li>
            <li>Drive</li>
            <li>Directory</li>
            <li>MultiSelect</li>
            <li>Sorted</li>
          </ul>
          <p>
            Create calls the <var>UpdateFileList</var> method to load the file and directory names for the current directory into the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.Mask"/>
          <link id="TCustomFileListBox.Drive"/>
          <link id="TCustomFileListBox.Directory"/>
          <link id="#lcl.stdctrls.TCustomListBox.MultiSelect"/>
          <link id="TCustomFileListBox.Sorted"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="TCustomFileListBox.UpdateFileList"/>
          <link id="#rtl.Classes.TComponent.Create"/>
        </seealso>
      </element>
      <element name="TCustomFileListBox.Create.TheOwner">
        <short>Owner for the class instance</short>
      </element>

      <element name="TCustomFileListBox.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance, and calls the inherited destructor on entry.
          </p>
        </descr>
        <seealso>
           <link id="#rtl.Classes.TComponent.Destroy"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.Click">
        <short>Performs actions needed when the mouse is clicked on the list box control</short>
        <descr>
          <p>
            <var>Click</var> is an overridden method in <var>TCustomFileListBox</var> used to perform actions needed when the mouse is clicked in the list box control. Click ensures that the value in the <var>FileName</var> property is updated to reflect the selected file name in <var>Items</var>. <var>ItemIndex</var> contains the position for the current selection in the list box.
          </p>
          <p>
            Click signals the <var>OnChange</var> event handler (when assigned) by calling the <var>DoChangeFile</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="#lcl.stdctrls.TCustomListBox.ItemIndex"/>
          <link id="#lcl.stdctrls.TCustomListBox.MultiSelect"/>
          <link id="TCustomFileListBox.DoChangeFile"/>
          <link id="#lcl.controls.TControl.Click"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.UpdateFileList">
        <short>Loads the list of files and/or directories for the list box control</short>
        <descr>
          <p>
            <var>UpdateFileList</var> is a method used to load the list of file and/or directory names in the Items for the control. No actions are performed in the method at design-time, or when the component is being loaded using the LCL streaming mechanism.
          </p>
          <p>
            UpdateFileList calls <var>Clear</var> to remove any existing values in the <var>Items</var> property.
          </p>
          <p>
            Values in <var>FileType</var> are used to construct the corresponding file attributes needed for use with <var>TSearchRec</var>. The <var>FindFirstUTF8</var> and <var>FindNextUTF8</var> routines from <file>LazFileUtils</file> are used to find matching file or directory names in the <var>Directory</var> for the control. Each value returned for the TSearchRec is compared to the <var>Mask</var> and <var>FileType</var> defined in the control. Acceptable values are added to the <var>Items</var> property. Please note: Directory names are surrounded by <b>square brackets</b> (<b>'[]'</b>) when added to the Items property.
          </p>
          <p>
            The private <var>UpdateSelectedFileName</var> method is called to include path information in <var>FileName</var> for the selected item in the control.
          </p>
          <p>
            UpdateFileList is called in the implementation of the <var>Create</var> and <var>Loaded</var> methods. It is also called when a new value is assigned to <var>Drive</var>, <var>Directory</var>, <var>FileType</var>, or <var>Mask</var>.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomFileListBox.Drive">
        <short>The <var>Drive</var> on which the file is located (applies to Windows systems)</short>
        <descr>
          <p>
            <var>Drive</var> is a Char property which indicates the current drive letter for the Directory in the list box control. Drive is relevant for file systems which use drive designations (Windows).
          </p>
          <p>
            The default value for the property is <b>' '</b> (space character). Changing the value in Drive causes the UpdateFileList method to be called to fill the list of Items displayed in the list box control.
          </p>
          <p>
            Use Directory to specify the path on the local file system to the entries displayed in the control.
          </p>
        </descr>
        <seealso>
          <list id="TCustomFileListBox.Create"/>
          <list id="TCustomFileListBox.Directory"/>
          <list id="TCustomFileListBox.UpdateFileList"/>
          <list id="TCustomFileListBox.Items"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.Directory">
        <short>The <var>Directory</var> or Folder in which the file is located</short>
        <descr>
          <p>
            <var>Directory</var> is a <var>String</var> property which contains the path on the local file system to the files or and/or directories displayed in the list box control. The initial value for Directory is assigned in the constructor and uses the current directory for the application.
          </p>
          <p>
            The value in Directory is prepended to the value used in <var>Filename</var> in the private  <var>UpdateSelectedFileName</var> method.
          </p>
          <p>
            Changing the value in Directory causes the <var>UpdateFileList</var> method to be called to reload the file and or directory names stored in the <var>Items</var> property.
          </p>
        </descr>
        <seealso/>
      </element>

      <element name="TCustomFileListBox.FileName">
        <short>
          <var>FileName</var> - the name of the selected file</short>
        <descr>
          <p>
            <var>FileName</var> is a <var>String</var> property which contains the file name for the currently selected item in the list box control. The value in FileName is updated when an item in the control is selected, or when a new value is assigned to the <var>ItemIndex</var> property.
          </p>
          <p>
            Assigning a new value to the property causes the <var>IndexOfFile</var> method to be called to locate the specified value in the <var>Items</var> for the control. The private <var>UpdateSelectedFileName</var> method is called to ensure that the new file name includes the path information in <var>Directory</var>, and to signal the <var>OnChange</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.Directory"/>
          <link id="TCustomFileListBox.IndexOfFile"/>
          <link id="TCustomFileListBox.UpdateFileList"/>
          <link id="TCustomFileListBox.OnChange"/>
          <link id="#lcl.stdctrls.TCustomListBox.ItemIndex"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.FileType">
        <short>
          <var>FileType</var> - the type or attributes of the selected file</short>
        <descr>
          <p>
            <var>FileType</var> is a <var>TFileType</var> set property which contains zero (0) or more values from the <var>TFileAttr</var> enumeration. FileType determines the file system entries displayed in the list box control. See <link id="TFileAttr">TFileAttr</link> for more information about the enumeration values and their meanings.
          </p>
          <p>
            The default value for the property is <b>[ftNormal]</b>.
          </p>
          <p>
            Assigning a new set value for the property causes the <var>UpdateFileList</var> method to be called to reload the file system entries stored in the <var>Items</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.UpdateFileList"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="TFileType"/>
          <link id="TFileAttr"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.Mask">
        <short>Contains the mask for files selected for the control</short>
        <descr>
          <p>
            <var>Mask</var> should be filled with one or more file masks separated by semi-colons. For example: "*.pdf;*.svg" will show all files with the extensions pdf and svg. The default value for the property is "*" which is the generic mask meaning any file. Do not use the Windows specific mask "*.*" to attempt to show all files, which is the behavior from Delphi. In the LCL version of the control "*.*" will require the file name to have an extension.
          </p>
          <p>
            Allowed wildcards include "*" which means zero or more characters, and "?" which means exactly 1 character of any kind. Other characters represent themselves with one important detail: The file matching algorithm is <b>not</b> case sensitive. So if you set "*.PDF" in the mask, then "PostScript.pdf" will also be shown, even on Linux which is a case sensitive file system.
          </p>
          <p>
            This property has exactly the same rules and behavior as the <var>Mask</var> property in <var>TFilterComboBox</var>.
          </p>
          <p>
            Changing the value in Mask causes the <var>UpdateFileList</var> method to be called to reload the file information in the Items property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.UpdateFileList"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
          <link id="TCustomFilterComboBox.Mask"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.OnChange">
        <short>Event handler signalled when the selected file in the list box control is changed</short>
        <descr>
          <p>
            <var>OnChange</var> is a <var>TNotifyEvent</var> property which contains the event handler signalled when the selected file for the control has been changed. This can occur when clicking on an entry in list box, when assigning a value directly to the <var>FileName</var> property, and when the list of file system entries in the control is reloaded.
          </p>
          <p>
            OnChange is triggered (when assigned) from the <var>DoChangeFile</var> method. An application must implement and assign an object procedure to the handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox.FileName"/>
          <link id="TCustomFileListBox.UpdateFileList"/>
          <link id="TCustomFileListBox.DoChangeFile"/>
        </seealso>
      </element>

      <element name="TCustomFileListBox.Sorted">
        <short>Indicates if values in Items are sort in ascending alphanumeric order</short>
        <descr>
          <p>
            <var>Sorted</var> is a public property in <var>TCustomFileListBox</var>, and indicates if values stored in <var>Items</var> are sorted in ascending alphanumeric order.  The default value for the property is <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomListBox.Sorted"/>
          <link id="#lcl.stdctrls.TCustomListBox.Items"/>
        </seealso>
      </element>

      <element name="TFileListBox">
        <short>Implements a file selection list box control</short>
        <descr>
          <p>
            <var>TFileListBox</var> is a <var>TCustomFileListBox</var> descendant which implements a file selection list box control. It is used to select a file or directory on the local file system. TFileListBox sets the visibility for properties introduced in an ancestor class, and does not contains any new properties, methods, or events.
          </p>
          <p>
            Use the Drive and Directory properties to specify the location on the local file sytem displayed in the list box. Please note: Drive is not used on UNIX-like file systems.
          </p>
          <p>
            Use FileType to specify the files and/or directories which can be displayed in the control.
          </p>
          <p>
            Use Mask to specify a file mask (with optional wildcards) used to select the files displayed in the control. Please note: Wild cards may be implemented differently for some file systems. For example: '*' is the "all files" mask on UNIX-like file systems instead of "*.*".
          </p>
          <p>
            Use the Sorted property to control the order of files and directories displayed in the control.
          </p>
          <p>
            Use the FileName property to get the current file selection in the control.
          </p>
          <p>
            Assign an object procedure to the OnChange event handler to perform actions needed when a new item has been selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFileListBox"/>
        </seealso>
      </element>

      <element name="TFileListBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFileListBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFileListBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TFileListBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFileListBox.ExtendedSelect" link="#LCL.StdCtrls.TCustomListBox.ExtendedSelect"/>
      <element name="TFileListBox.FileType" link="#LCL.FileCtrl.TCustomFileListBox.FileType"/>
      <element name="TFileListBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFileListBox.IntegralHeight" link="#LCL.StdCtrls.TCustomListBox.IntegralHeight"/>
      <element name="TFileListBox.ItemHeight" link="#LCL.StdCtrls.TCustomListBox.ItemHeight"/>
      <element name="TFileListBox.Mask" link="#LCL.FileCtrl.TCustomFileListBox.Mask"/>
      <element name="TFileListBox.MultiSelect" link="#LCL.StdCtrls.TCustomListBox.MultiSelect"/>
      <element name="TFileListBox.OnChange" link="#LCL.FileCtrl.TCustomFileListBox.OnChange"/>
      <element name="TFileListBox.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TFileListBox.Directory" link="#LCL.FileCtrl.TCustomFileListBox.Directory"/>
      <element name="TFileListBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFileListBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFileListBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFileListBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFileListBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFileListBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFileListBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TFileListBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFileListBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFileListBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFileListBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFileListBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TFileListBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TFileListBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TFileListBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFileListBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFileListBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFileListBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TFileListBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TFileListBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TFileListBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TFileListBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFileListBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFileListBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFileListBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFileListBox.Sorted" link="#LCL.StdCtrls.TCustomListBox.Sorted"/>
      <element name="TFileListBox.Style" link="#LCL.StdCtrls.TCustomListBox.Style"/>
      <element name="TFileListBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFileListBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFileListBox.TopIndex" link="#LCL.StdCtrls.TCustomListBox.TopIndex"/>
      <element name="TFileListBox.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TFileListBox.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TFileListBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TFileListBox.OnSelectionChange" link="#LCL.StdCtrls.TCustomListBox.OnSelectionChange"/>
      <element name="TFileListBox.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>

      <element name="TCustomFilterComboBox">
        <short>Specifies a combo-box used to select a file filter</short>
        <descr>
          <p>
            <var>TCustomFilterComboBox</var> is a <var>TCustomComboBox</var> descendant which defines a combo-box used to select files which match a selection filter.
          </p>
          <p>
            Use the <var>Filter</var> property to define the filter names and expressions available in the drop-down for the combo-box. Only the filter name is displayed in the combo-box.
          </p>
          <p>
            Use <var>AutoComplete</var> to enable or disable case-insensitive automatic text completion in the edit area for the combo-box. When set to <b>True</b>, the Filter which starts the the typed value is located and selected in the control. Please note: AutoComplete works when the text area is empty, or the entire contents of the editable are are selected.
          </p>
          <p>
            Use <var>ItemIndex</var> to get the ordinal position in Filter for the selected filter. Use the <var>OnSelect</var> event handler to perform actions needed when a new value is selected in the combo-box.
          </p>
          <p>
            TCustomFilterComboBox includes a <var>ShellListView</var> property with the <var>TShellListView</var> instance used to display the list of files matching the seleted filter. ShellListView is updated  (when assigned) in the <var>Select</var> method to use the value in <var>Mask</var> in the list view control. Set the <var>Root</var> property in ShellListView to control the directory displayed in the control.
          </p>
          <p>
            TCustomFilterComboBox sets the visibility for properties defined in an ancestor class, and does not introduce any new properties, methods, or events. Please note: Some properties are not published for the control, so do they do  not appear in the Object Inspector at design-time. For example: Mask.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomComboBox"/>
          <link id="TFilterComboBox"/>
          <link id="#lcl.shellctrls.TShellListView"/>
        </seealso>
      </element>

      <element name="TCustomFilterComboBox.FFilter"/>
      <element name="TCustomFilterComboBox.FShellTreeView"/>

      <element name="TCustomFilterComboBox.SetFilter">
        <short>Sets the value for the Filter property</short>
        <descr/>
        <seealso>
          <link id="TCustomFilterComboBox.Filter"/>
        </seealso>
      </element>
      <element name="TCustomFilterComboBox.SetFilter.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFilterComboBox.SetShellListView">
        <short>Sets the value for the ShellListView property</short>
        <descr/>
        <seealso>
          <link id="TCustomFilterComboBox.ShellListView"/>
        </seealso>
      </element>
      <element name="TCustomFilterComboBox.SetShellListView.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomFilterComboBox.Select">
        <short>Performs actions needed when the selected item (ItemIndex) has been changed</short>
        <descr>
          <p>
            <var>Select</var> is an overridden method in <var>TCustomFilterComboBox</var>. It ensures that the value in <var>Mask</var> is also applied to the <var>ShellListView</var> control (when assigned). This forces the ShellListView to reload the list of matching files displayed in the control.
          </p>
          <p>
            Select calls the inherited method to signal the <var>OnSelect</var> event handler (when assigned).
          </p>
        </descr>
        <seealso>
          <link id="TCustomFilterComboBox.Mask"/>
          <link id="TCustomFilterComboBox.ShellListView"/>
          <link id="#lcl.stdctrls.TCustomComboBox.OnSelect"/>
        </seealso>
      </element>

      <element name="TCustomFilterComboBox.Notification" link="#lcl.controls.TControl.Notification">
        <short>Handles notification messages for subcomponents in the control</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomFilterComboBox.Notification.AComponent">
        <short>Component for the notification message</short>
      </element>
      <element name="TCustomFilterComboBox.Notification.Operation">
        <short>Operation for the notification message</short>
      </element>

      <element name="TCustomFilterComboBox.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited method on entry. Create sets the value for the <var>Text</var> property to an empty string (<b>''</b>).
          </p>
        </descr>
        <seealso>
          <link id="#lcl.stdctrls.TCustomComboBox.Create"/>
        </seealso>
      </element>
      <element name="TCustomFilterComboBox.Create.TheOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomFilterComboBox.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            Destroy calls the inherited destructor.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TCustomFilterComboBox.ConvertFilterToStrings">
        <short>Parses the file filter(s) in AFilter and stores them in AStrings</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFilterComboBox.ConvertFilterToStrings.AFilter">
        <short>Values converted in the method</short>
      </element>
      <element name="TCustomFilterComboBox.ConvertFilterToStrings.AStrings">
        <short>TStrings instance where the filters are stored</short>
      </element>
      <element name="TCustomFilterComboBox.ConvertFilterToStrings.AClearStrings">
        <short>Indicates if existing values in AStrings are cleared</short>
      </element>
      <element name="TCustomFilterComboBox.ConvertFilterToStrings.AAddDescription">
        <short>True if the filter description is included in the converted values</short>
      </element>
      <element name="TCustomFilterComboBox.ConvertFilterToStrings.AAddFilter">
        <short>True if the filter mask expression is included in the converted values</short>
      </element>

      <element name="TCustomFilterComboBox.Mask">
        <short>File mask for the selected filter in the control</short>
        <descr>
        </descr>
        <seealso>
          <link id="TFilterComboBox.Filter"/>
          <link id="TFilterComboBox.ItemIndex"/>
          <link id="TCustomFilterComboBox.Select"/>
        </seealso>
      </element>

      <element name="TCustomFilterComboBox.ShellListView">
        <short>Connects the control to a TShellListView instance</short>
        <descr>
          <p>
            The files shown in the TShellListView will be limited to the Filter selected in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFilterComboBox.Mask"/>
          <link id="TCustomFilterComboBox.Select"/>
        </seealso>
      </element>

      <element name="TFilterComboBox">
        <short>Implements a combo-box used to select a file filter</short>
        <descr>
          <p>
            <var>TFilterComboBox</var> is a <var>TCustomFilterComboBox</var> descendant which implements a combo-box used to select files which match a selection filter. Use the <var>Filter</var> property to define the filter names and expressions available in the drop-down for the combo-box. Only the filter name is displayed in the combo-box.
          </p>
          <p>
            Use <var>AutoComplete</var> to enable or disable case-insensitive automatic text completion in the edit area for the combo-box. When set to <b>True</b>, the Filter which starts the the typed value is located and selected in the control. Please note: AutoComplete works when the text area is empty, or the entire contents of the editable are are selected.
          </p>
          <p>
            Use <var>ItemIndex</var> to get the ordinal position in Filter for the selected filter. Use the <var>OnSelect</var> event handler to perform actions needed when a new value is selected in the combo-box.
          </p>
          <p>
            TFilterComboBox includes a <var>ShellListView</var> property with the <var>TShellListView</var> instance used to display the list of files matching the seleted filter. ShellListView is updated  (when assigned) in the <var>Select</var> method to use the value in <var>Mask</var> in the list view control. Set the <var>Root</var> property in ShellListView to control the directory displayed in the control.
          </p>
          <p>
            TFilterComboBox sets the visibility for properties defined in an ancestor class, and does not introduce any new properties, methods, or events. Please note: Some properties are not published for the control, so do they do  not appear in the Object Inspector at design-time. For example: Mask.
          </p>
        </descr>
        <seealso>
          <link id="TCustomFilterComboBox"/>
          <link id="#lcl.shellctrls.TShellListView"/>
        </seealso>
      </element>

      <element name="TFilterComboBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFilterComboBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFilterComboBox.AutoComplete" link="#LCL.StdCtrls.TCustomComboBox.AutoComplete"/>
      <element name="TFilterComboBox.AutoDropDown" link="#LCL.StdCtrls.TCustomComboBox.AutoDropDown"/>
      <element name="TFilterComboBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TFilterComboBox.BidiMode" link="#LCL.Controls.TControl.BidiMode"/>
      <element name="TFilterComboBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TFilterComboBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TFilterComboBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFilterComboBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFilterComboBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TFilterComboBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFilterComboBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TFilterComboBox.Filter" link="#LCL.StdCtrls.TCustomComboBox.Filter"/>
      <element name="TFilterComboBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFilterComboBox.ItemIndex" link="#LCL.StdCtrls.TCustomComboBox.ItemIndex"/>
      <element name="TFilterComboBox.ParentBidiMode" link="#LCL.Controls.TControl.ParentBidiMode"/>
      <element name="TFilterComboBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TFilterComboBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFilterComboBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFilterComboBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFilterComboBox.ShellListView" link="#LCL.FileCtrl.TCustomFilterComboBox.ShellListView"/>
      <element name="TFilterComboBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFilterComboBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFilterComboBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFilterComboBox.TextHint" link="#lcl.stdctrls.TCustomComboBox.TextHint"/>
      <element name="TFilterComboBox.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TFilterComboBox.OnChange" link="#LCL.StdCtrls.TCustomComboBox.OnChange"/>
      <element name="TFilterComboBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFilterComboBox.OnCloseUp" link="#LCL.StdCtrls.TCustomComboBox.OnCloseUp"/>
      <element name="TFilterComboBox.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TFilterComboBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFilterComboBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFilterComboBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFilterComboBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFilterComboBox.OnDropDown" link="#LCL.StdCtrls.TCustomComboBox.OnDropDown"/>
      <element name="TFilterComboBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFilterComboBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFilterComboBox.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TFilterComboBox.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TFilterComboBox.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TFilterComboBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFilterComboBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFilterComboBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFilterComboBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFilterComboBox.OnSelect" link="#lcl.stdctrls.TCustomComboBox.OnSelect"/>
      <element name="TFilterComboBox.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>

      <element name="MiniMizeName">
        <short>Returns a shortened version of a file name, so that it fits within the given MaxWidth</short>
        <descr>
          <p>
            This function will return a shortened version of FileName, so that it fits within the given MaxWidth. It uses the Font currently assigned to the Canvas argument.
        </p>
          <p>
            For example: C:\Documents and Settings\User\Application Data\Microsoft\Word\custom.dic  would be shortened to a value like: C:\...\Word\custom.dic.
          </p>
        </descr>
      </element>
      <element name="MiniMizeName.Result">
        <short/>
      </element>
      <element name="MiniMizeName.FileName">
        <short/>
      </element>
      <element name="MiniMizeName.Canvas">
        <short/>
      </element>
      <element name="MiniMizeName.MaxWidth">
        <short/>
      </element>

      <element name="Register">
        <short>Registers components in the unit for use in the Lazarus IDE</short>
        <descr>
          <p>
            <var>Register</var> is a procedure used to register components in the unit for use in the Lazarus IDE. Register calls <var>RegisterComponents</var> to add the <var>TFileListBox</var> and <var>TFilterComboBox</var> comnponents on the <b>Misc</b> tab in the Lazarus IDE.
          </p>
        </descr>
      </element>

    </module>
    <!-- FileCtrl -->

  </package>
</fpdoc-descriptions>
