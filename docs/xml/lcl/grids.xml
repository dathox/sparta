<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
      ====================================================================
        Grids
      ====================================================================
    -->
    <module name="Grids">
      <short>
        Classes for displaying tabular data as a series of rows and columns
      </short>
      <descr></descr>

      <element name="Classes"/>
      <element name="SysUtils"/>
      <element name="Types"/>
      <element name="TypInfo"/>
      <element name="Math"/>
      <element name="FPCanvas"/>
      <element name="HtmlDefs"/>
      <element name="StrUtils"/>
      <element name="LCLStrConsts"/>
      <element name="LCLType"/>
      <element name="LCLIntf"/>
      <element name="Controls"/>
      <element name="Graphics"/>
      <element name="Forms"/>
      <element name="LMessages"/>
      <element name="StdCtrls"/>
      <element name="LResources"/>
      <element name="MaskEdit"/>
      <element name="Buttons"/>
      <element name="Clipbrd"/>
      <element name="Themes"/>
      <element name="ImgList"/>
      <element name="LazFileUtils"/>
      <element name="DynamicArray"/>
      <element name="Maps"/>
      <element name="LazUTF8"/>
      <element name="LazUtf8Classes"/>
      <element name="Laz2_XMLCfg"/>
      <element name="LazLoggerBase"/>
      <element name="LazUtilities"/>
      <element name="LCSVUtils"/>
      <element name="IntegerList"/>
      <element name="Messages"/>

      <element name="GRIDFILEVERSION">
        <short>Current revision level for the <file>grids.pas</file> file</short>
        <descr>
          <dl>
            <dt>1</dt>
            <dd>Initial revision</dd>
            <dt>2</dt>
            <dd>Introduced goSmoothScroll grid option</dd>
            <dt>3</dt>
            <dd>Introduced Col/Row FixedAttr and NormalAttr</dd>
          </dl>
        </descr>
        <seealso></seealso>
      </element>

      <element name="GM_SETVALUE">
        <short>Lazarus message for setting the value in a grid edit control</short>
      </element>

      <element name="GM_GETVALUE">
        <short>Lazarus message for getting the value in a grid edit control</short>
      </element>

      <element name="GM_SETGRID">
        <short>Lazarus message for setting the grid for an edit control</short>
      </element>

      <element name="GM_SETBOUNDS">
        <short>Lazarus message for setting the bounds for a grid edit control</short>
      </element>

      <element name="GM_SELECTALL">
        <short>Lazarus message for selecting the content in a grid edit control</short>
      </element>

      <element name="GM_SETMASK">
        <short>Lazarus message for setting the edit mask used in a grid edit control</short>
      </element>

      <element name="GM_SETPOS">
        <short>Lazarus message for setting the position of a grid edit control</short>
      </element>

      <element name="GM_READY">
        <short>Lazarus message sent when the grid can display its editing controls</short>
      </element>

      <element name="GM_GETGRID">
        <short>Lazarus message used to get the grid for an editing control</short>
      </element>

      <element name="EO_AUTOSIZE">
        <short>Represents the auto-size editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="EO_HOOKKEYDOWN">
        <short>Represents the hook key down editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="EO_HOOKKEYPRESS">
        <short>Represents the hook key press editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="EO_HOOKKEYUP">
        <short>Represents the hook key up editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="EO_SELECTALL">
        <short>Represents the select all content editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="EO_IMPLEMENTED">
        <short>Represents the implemented editor option in a grid message</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="DEFCOLWIDTH">
        <short>Default width for columns in a grid control</short>
        <descr>
          <p>
            <var>DEFCOLWIDTH</var> is a constant used as the default width for columns in a grid control. The value for the constant is <b>64</b> (pixels). DEFCOLWIDTH is used when getting the value for the <var>DefColWidth</var> in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultColWidth"/>
        </seealso>
      </element>

      <element name="DEFBUTTONWIDTH">
        <short>Default width for edit control buttons in a grid</short>
        <descr>
          <p>
            <var>DEFBUTTONWIDTH</var> is a constant that contains the default width for the button displayed in a grid cell editor. The value for the constant is <b>25</b> (pixels). DEFBUTTONWIDTH is used when setting the bounds for <var>TButtonCellEditor</var> controls.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor"/>
        </seealso>
      </element>

      <element name="DEFIMAGEPADDING">
        <short>Default padding used for title images displayed in a grid</short>
        <descr>
          <p>
            <var>DEFIMAGEPADDING</var> is a constant which contains the padding added to images displayed in the fixed title area for grid controls. The value for the constant is <b>2</b> (pixels). DEFIMAGEPADDING is used in methods like <var>TCustomGrid.DrawColumnTitleImage</var> and <var>TCustomStringGrid.AutoAdjustColumn</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="EGridException">
        <short>
          Exception raised for an error occurring in a Grid class
        </short>
        <descr>
          <p>
            Used mainly when a row or a column position is invalid for a grid control.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>

      <element name="TGridOption">
        <short>Represents grip option values available for grid controls</short>
        <descr>
          <p>
            <var>TGridOption</var> is an enumerated type with values that represent grid options available in LCL grid controls. Values from TGridOption are stored in a <var>TGridOptions</var> set type to indicate that the grid feature or behavior is enabled.
          </p>
          <p>
            Values from TGridOption are stored in the <var>DefaultGridOptions</var> constant which defines the default set of options for LCL grid controls.
          </p>
        </descr>
        <seealso>
          <link id="TGridOptions"/>
          <link id="TGridOptions2"/>
          <link id="DefaultGridOptions"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TGridOption.goFixedVertLine">
        <short>Shows vertical lines around fixed cells</short>
      </element>
      <element name="TGridOption.goFixedHorzLine">
        <short>Shows horizontal lines around fixed cells</short>
      </element>
      <element name="TGridOption.goVertLine">
        <short>Show vertical lines</short>
      </element>
      <element name="TGridOption.goHorzLine">
        <short>Show horizontal lines</short>
      </element>
      <element name="TGridOption.goRangeSelect">
        <short>Enables range selection for grid cells</short>
      </element>
      <element name="TGridOption.goDrawFocusSelected">
        <short>Enables focused drawing for selected cell(s)</short>
      </element>
      <element name="TGridOption.goRowSizing">
        <short>Allow user to change row height</short>
      </element>
      <element name="TGridOption.goColSizing">
        <short>Allow user to change column width</short>
      </element>
      <element name="TGridOption.goRowMoving">
        <short>Enables moving the position of an entire row in a grid</short>
      </element>
      <element name="TGridOption.goColMoving">
        <short>Enables moving the position of an entire column in a grid</short>
      </element>
      <element name="TGridOption.goEditing">
        <short>Allows editing in grid cells</short>
        <seealso>
          <link id="TGridOption.goAlwaysShowEditor"/>
        </seealso>
      </element>
      <element name="TGridOption.goAutoAddRows">
        <short>Automatically add new rows</short>
        <descr>
          Does not add rows if the last cell is empty and
          <link id="TGridOption.goAutoAddRowsSkipContentCheck">goAutoAddRowsSkipContentCheck</link> is not set.
        </descr>
        <seealso>
          <link id="TGridOption.goAutoAddRowsSkipContentCheck"/>
        </seealso>
      </element>
      <element name="TGridOption.goTabs">
        <short>Controls Tab key behavior in the grid</short>
        <descr>
          <p>
            When included in the <var>TCustomGrid.Options</var> property, the <b>Tab</b> key changes the active cell within the grid. When omitted from the grid <var>Options</var>, the <b>Tab</b> key changes to the next active control.
          </p>
          </descr>
          <seealso>
            <link id="TCustomGrid.Options"/>
          </seealso>
      </element>

      <element name="TGridOption.goRowSelect">
        <short>Select the whole row instead of only one cell</short>
      </element>
      <element name="TGridOption.goAlwaysShowEditor">
        <short>Always shows the cell editor</short>
        <descr>
          <p>
            Always shows the cell editor. If not set, the user has to enter edit mode by data characters for the cell, or by pressing the <b>F2</b> key.
          </p>
        </descr>
      </element>
      <element name="TGridOption.goThumbTracking">
        <short>Enables tracking of the thumb position in grid scroll bars</short>
      </element>
      <element name="TGridOption.goColSpanning">
        <short>Enable cellextent calculations</short>
      </element>
      <element name="TGridOption.goRelaxedRowSelect">
        <short>User can see focused cell on goRowSelect</short>
      </element>
      <element name="TGridOption.goDblClickAutoSize">
        <short>Double clicking column's borders (on headers) resize column</short>
      </element>
      <element name="TGridOption.goSmoothScroll">
        <short>Switch scrolling mode</short>
        <descr>Default is pixel scroll.</descr>
      </element>
      <element name="TGridOption.goFixedRowNumbering">
        <short>Show row numbers in first fixed column</short>
        <descr>
          <p>
            The displayed row numbers starts with 1. The row number is displayed when no text has been directly assigned to the fixed cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>
      <element name="TGridOption.goScrollKeepVisible">
        <short>Keeps focused cell visible while scrolling</short>
      </element>
      <element name="TGridOption.goHeaderHotTracking">
        <short>Header cells change look when mouse is over them</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goHeaderPushedLook">
        <short>Header cells looks pushed when clicked</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goSelectionActive">
        <short>Setting grid selection also moves the cell cursor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goFixedColSizing">
        <short>Allow to resize fixed columns</short>
        <seealso>
          <link id="TGridOption.goColSizing"/>
        </seealso>
      </element>
      <element name="TGridOption.goDontScrollPartCell">
        <short>Selecting a partially visible cell will not scroll the grid content</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goCellHints">
        <short>Show individual cell hints</short>
        <descr>
          Requires the <link id="TControl.ShowHint">ShowHint</link> to be set to <var>TRUE</var>. If set, the  <link id="TControl.Hint">Hint</link> will be ignored. Instead the  <link id="TCustomGrid.OnGetCellHint">OnGetCellHint</link> event will be called for each cell.
        </descr>
        <seealso>
          <link id="TControl.Hint"/>
          <link id="TControl.ShowHint"/>
          <link id="TCustomGrid.OnGetCellHint"/>
        </seealso>
      </element>
      <element name="TGridOption.goTruncCellHints">
        <short>Truncates cell hints when they are longer than the cell content</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goCellEllipsis">
        <short>Shows an Ellipsis (...) at the end of truncated cell hints</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption.goAutoAddRowsSkipContentCheck">
        <short>Also add a row if last row is empty</short>
        <seealso>
          <link id="TGridOption.goAutoAddRows"/>
        </seealso>
        <descr>
          <link id="TGridOption.goAutoAddRows">goAutoAddRows</link> must also be set. Otherwise this option does not take effect at all.
        </descr>
      </element>
      <element name="TGridOption.goRowHighlight">
        <short>Highlights the current Row in a grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridOptions">
        <short>Set type used to store enabled grid options</short>
        <descr>
          <p>
            <var>TGridOptions</var> is a set type used to store values from the <var>TGridOption</var> enumeration. The features or behaviors in TGridOption are enabled when their enumeration values are included in the set. TGridOptions is the type used for the <var>TCustomGrid.Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>

      <element name="TGridOption2">
        <short>Represents grid options introduced in Version 2 of grid controls</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridOption2.goScrollToLastCol">
        <short>Allows scrolling to last column (so that last column can be leftcol)</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridOption2.goScrollToLastRow">
        <short>Allows scrolling to last row (so that last row can be toprow)</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridOptions2">
        <short>Set type used to store enabled grid options from TGridOption2</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridSaveOptions">
        <short>Represents save options available for LCL grid controls</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TGridSaveOptions.soDesign">
        <short>Enables saving grid structure (col/row count and Options)</short>
      </element>
      <element name="TGridSaveOptions.soAttributes">
        <short>Enables saving grid attributes (Font, Brush, TextStyle)</short>
      </element>
      <element name="TGridSaveOptions.soContent">
        <short>Enables saving Grid content (Text in TStringGrid)</short>
      </element>
      <element name="TGridSaveOptions.soPosition">
        <short>Enables saving the Grid cursor and selection position</short>
      </element>

      <element name="TSaveOptions">
        <short>Set type used to store TGridSaveOptions values</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDrawState">
        <short>Enumeration with Grid draw state values</short>
        <descr>
          <p>
            <var>TGridDrawState</var> is an enumeration with values that represent grid drawing states for  a grid control. Values in TGridDrawState indicate the display attributes applied to a row, column, or individual cell in a grid control.
          </p>
          <p>
            TGridDrawState arguments are passed to event handlers and methods in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TOnDrawCell"/>
          <link id="TOnPrepareCanvasEvent"/>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.DrawCellGrid"/>
          <link id="TCustomGrid.DrawCellText"/>
          <link id="TCustomGrid.DrawButtonCell"/>
          <link id="TCustomGrid.DrawColumnText"/>
          <link id="TCustomGrid.DrawTextInCell"/>
          <link id="TCustomGrid.DrawThemedCell"/>
        </seealso>
      </element>
      <element name="TGridDrawState.gdSelected">
        <short>Drawn in its Selected state</short>
      </element>
      <element name="TGridDrawState.gdFocused">
        <short>Drawn in its Focused state</short>
      </element>
      <element name="TGridDrawState.gdFixed">
        <short>Drawn using the Fixed cell colors</short>
      </element>
      <element name="TGridDrawState.gdHot">
        <short>Drawn using the Hot display attributes</short>
      </element>
      <element name="TGridDrawState.gdPushed">
        <short>Drawn in a Pushed state</short>
      </element>
      <element name="TGridDrawState.gdRowHighlight">
        <short>Drawn using the row highlighting color</short>
      </element>

      <element name="TGridState">
        <short>Enumerated type with grid state values</short>
        <descr>
          <p>
            <var>TGridState</var> is an enumerated type with values that reflect the state in a grid control. TGridState values represent actions performed using a grid control, rather the display state for rows, columns, and/or cells.
          </p>
          <p>
            TCustomGrid maintains an internal TGridState member used to track the state for the grid control. Methods in TCustomGrid cause the value in the member to be read or updated to reflect the request and/or completion of an action in the grid control.
          </p>
          <p>
            Use the TCustomGrid.Options and TCustomGrid.Options2 properties to determine if specific features or behaviors are enabled for a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TGridState.gsNormal">
        <short>Normal state for the grid when navigation or editing can be performed</short>
      </element>
      <element name="TGridState.gsSelecting">
        <short>
          Grid is selecting a row, column, or cell after keyboard or mouse activity
        </short>
      </element>
      <element name="TGridState.gsRowSizing">
        <short>Grid is resizing a row</short>
      </element>
      <element name="TGridState.gsColSizing">
        <short>Grid is resizing a column</short>
      </element>
      <element name="TGridState.gsRowMoving">
        <short>Grid is moving or dragging a row</short>
      </element>
      <element name="TGridState.gsColMoving">
        <short>Grid is moving or dragging a column</short>
      </element>

      <element name="TGridState.gsHeaderClicking">
        <short>A fixed header cell has been clicked in the Grid</short>
      </element>
      <element name="TGridState.gsButtonColumnClicking">
        <short>A button in a column has been clicked</short>
      </element>

      <element name="TGridZone">
        <short>Enumerated type for grid zone values</short>
        <descr>
          <p>
            <var>TGridZone</var> is an enumeration type with values representing zones in a grid control which are monitored to determine activity and subsequent changes in the grid control state.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TGridZone.gzNormal">
        <short>Area normally used for cell data (not fixed row or column headers)</short>
      </element>
      <element name="TGridZone.gzFixedCols">
        <short>Area used for fixed column headers </short>
      </element>
      <element name="TGridZone.gzFixedRows">
        <short>Area used for fixed row headers </short>
      </element>
      <element name="TGridZone.gzFixedCells">
        <short>Area for cached fixed width cells</short>
      </element>
      <element name="TGridZone.gzInvalid">
        <short>Area not used for grid cells</short>
      </element>

      <element name="TGridZoneSet">
        <short>Set type used to store TGridZone enumeration values</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TAutoAdvance">
        <short>Enumerated type with values controlling grid auto advance behavior</short>
        <descr>
          <p>
            <var>TAutoAdvance</var> is an enumerated type with values that represent the auto advance behaviors available in a grid control. TAutoAdvance is the type used to represent the <var>AutoAdvance</var> and <var>TabAdvance</var> properties in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.AutoAdvance"/>
          <link id="TCustomGrid.TabAdvance"/>
          <link id="TCustomGrid.MoveNextSelectable"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.KeyDown"/>
        </seealso>
      </element>
      <element name="TAutoAdvance.aaNone">
        <short>Auto advance is not enabled</short>
      </element>
      <element name="TAutoAdvance.aaDown">
        <short>Advances down to the next row in the grid</short>
      </element>
      <element name="TAutoAdvance.aaRight">
        <short>Advances to the right (next cell) in the grid</short>
      </element>
      <element name="TAutoAdvance.aaLeft">
        <short>Advances to the left (previous cell) in the grid</short>
      </element>

      <element name="TAutoAdvance.aaRightDown">
        <short>Advances to the right and then to the next row</short>
      </element>
      <element name="TAutoAdvance.aaLeftDown">
        <short>Advances to the left and then to the next row</short>
      </element>
      <element name="TAutoAdvance.aaRightUp">
        <short>Advances to the right and then to the previous row</short>
      </element>
      <element name="TAutoAdvance.aaLeftUp">
        <short>Advances to the left and then to the previous row</short>
      </element>

      <element name="TRangeSelectMode">
        <short>Range selection modes available in a grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TRangeSelectMode.rsmSingle">
        <short>Allows range selection for a single range in a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TRangeSelectMode.rsmMulti">
        <short>Allows range selection for multiple ranges in a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TItemType">
        <short></short>
        <descr>
          Not used in the current implementation.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TItemType.itNormal">
        <short></short>
      </element>
      <element name="TItemType.itCell">
        <short></short>
      </element>
      <element name="TItemType.itColumn">
        <short></short>
      </element>
      <element name="TItemType.itRow">
        <short></short>
      </element>
      <element name="TItemType.itFixed">
        <short></short>
      </element>
      <element name="TItemType.itFixedColumn">
        <short></short>
      </element>
      <element name="TItemType.itFixedRow">
        <short></short>
      </element>
      <element name="TItemType.itSelected">
        <short></short>
      </element>

      <element name="TColumnButtonStyle">
        <short>Enumeration with cell editor types available in a grid control</short>
        <descr>
          <p>
            <var>TColumnButtonStyle</var> is an enumerated type with values that represent the different cell editor types available in a grid control. TColumnButtonStyle is the type used for the <var>TGridColumn.ButtonStyle</var> property, and passed as an argument when an editor is requested for a column definition. It is also used when the <var>TCustomGrid.GetDefaultEditor</var> method is called to get the default cell editor for a given column.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
          <link id="TCustomGrid.GetDefaultEditor"/>
        </seealso>
      </element>

      <element name="TColumnButtonStyle.cbsAuto">
        <short>
          Button style is automatically determined by the grid control. Results in a TStringCellEditor being used for the cell
        </short>
      </element>
      <element name="TColumnButtonStyle.cbsEllipsis">
        <short>
          Button style with an Ellipsis (<b>...</b>) is displayed as the cell editor. Results in a TCompositeCellEditor being used for the cell
        </short>
      </element>
      <element name="TColumnButtonStyle.cbsNone">
        <short>Indicates no editor is required for a cell</short>
      </element>
      <element name="TColumnButtonStyle.cbsPickList">
        <short>
          Indicates a Pick List is used as the cell editor. Results in a TPickListCellEditor being used for the cell
        </short>
      </element>
      <element name="TColumnButtonStyle.cbsCheckboxColumn">
        <short>Indicates a CheckBox is displayed as the editor for the grid column</short>
      </element>
      <element name="TColumnButtonStyle.cbsButton">
        <short>Indicates a cell editor with a Button is used as the cell editor. Results in a TButtonCellEditor being used</short>
      </element>
      <element name="TColumnButtonStyle.cbsButtonColumn">
        <short>Indicates a button centered in the cell is used as the cell editor</short>
      </element>

      <element name="TTitleStyle">
        <short>
          Enumeration with values that control the display style for fixed title cells
        </short>
        <descr>
          <p>
            <var>TTitleStyle</var> is an enumerated type with values that determine the drawing style used for fixed title cells in a grid. TTitleStyle is the type used to implement the <var>TCustomGrid.TitleStyle</var> property, and used in the implementation of the <var>TCustomGrid.DrawCellGrid</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleStyle"/>
          <link id="TCustomGrid.DrawCellGrid"/>
        </seealso>
      </element>
      <element name="TTitleStyle.tsLazarus">
        <short>Titles are displayed using the Lazarus drawing style</short>
      </element>
      <element name="TTitleStyle.tsStandard">
        <short>Titles are displayed using the standard drawing style (higher contrast)</short>
      </element>
      <element name="TTitleStyle.tsNative">
        <short>Titles are displayed using the drawing style Native to the OS or platform</short>
      </element>

      <element name="TGridFlagsOption">
        <short>Represents state flags used in a grid control</short>
        <descr>
          <p>
            <var>TGridFlagsOption</var> is an enumerated type with values which reflect temporal state changes in a grid control. Values from TGridFlagsOption are stored at run-time in the <var>TGridFlags</var> set type used for the <var>TCustomGrid.GridFlags</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TGridFlags"/>
        </seealso>
      </element>
      <element name="TGridFlagsOption.gfEditorUpdateLock">
        <short>Indicates a cell is locked during a cell editor update</short>
      </element>
      <element name="TGridFlagsOption.gfNeedsSelectActive">
        <short>
          Indicates a selection needs to be active prior to mouse down or move actions
        </short>
      </element>
      <element name="TGridFlagsOption.gfEditorTab">
        <short>Indicates a Tab key can be applied to focus the next cell in the grid</short>
      </element>
      <element name="TGridFlagsOption.gfRevEditorTab">
        <short>
          Indicates a Shift+Tab key combination can be applied to select the previous cell in the grid
        </short>
      </element>
      <element name="TGridFlagsOption.gfVisualChange">
        <short>
          Indicates visible changes to row or column sizes can be applied to the grid
        </short>
      </element>
      <element name="TGridFlagsOption.gfColumnsLocked">
        <short>Indicates columns in the grid are locked and cannot be reordered</short>
      </element>
      <element name="TGridFlagsOption.gfEditingDone">
        <short>Indicates editing using a cell editor has been completed</short>
      </element>
      <element name="TGridFlagsOption.gfSizingStarted">
        <short>Indicates a row or column sizing action is in effect</short>
      </element>
      <element name="TGridFlagsOption.gfPainting">
        <short>Indicates the grid is being redrawn</short>
      </element>
      <element name="TGridFlagsOption.gfUpdatingSize">
        <short>Indicates the grid is updating its size</short>
      </element>
      <element name="TGridFlagsOption.gfClientRectChange">
        <short>Indicates the client rectangle for the grid has changed</short>
      </element>
      <element name="TGridFlagsOption.gfAutoEditPending">
        <short>
          Indicates a cell editor is being prepared for a newly selected cell in the grid
        </short>
      </element>
      <element name="TGridFlagsOption.gfUpdatingScrollbar">
        <short>Indicates the visibility of scrollbar(s) has been changed for a grid</short>
      </element>

      <element name="TGridFlags">
        <short>Set type used to store TGridFlagsOption enumeration values</short>
        <descr>
          <p>
            <var>TGridFlags</var> is a set type used to store <var>TGridFlagsOption</var> enumeration values. TGridFlags is the type used to implement the <var>TCustomGrid.GridFlags</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridFlagsOption"/>
          <link id="TCustomGrid.GridFlags"/>
        </seealso>
      </element>

      <element name="TSortOrder">
        <short>Enumerated type with sort orders supported in a grid control</short>
        <descr>
          <p>
            <var>TSortOrder</var> is an enumerated type with values for sort orders supported in a grid control. TSortOrder is the type used to implement the <var>TCustomGrid.SortOrder</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SortOrder"/>
        </seealso>
      </element>
      <element name="TSortOrder.soAscending">
        <short>Rows are sorted such that the column is in ascending order</short>
      </element>
      <element name="TSortOrder.soDescending">
        <short>Rows are sorted such that the column is in descending order</short>
      </element>

      <element name="TPrefixOption">
        <short>Indicates if Accelerator keys if column titles are handled for a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TPrefixOption.poNone">
        <short>Accelerator keys are ignored in the grid</short>
      </element>
      <element name="TPrefixOption.poHeaderClick">
        <short>Accelerator keys emulate a mouse click on the column title</short>
      </element>

      <element name="TMouseWheelOption">
        <short>Enumerated type with values that control mouse wheel operation in a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TMouseWheelOption.mwCursor">
        <short>Causes the mouse wheel to move the cursor on the screen</short>
      </element>
      <element name="TMouseWheelOption.mwGrid">
        <short>Causes the mouse wheel to scroll the content in the grid</short>
      </element>

      <element name="TCellHintPriority">
        <short>Represents cell hint display priorities</short>
        <descr>
          <p>
            A grid control can display three types of hint: the default hint (in the Hint property), individual cell hints (using the OnCellHint event), and hints for truncated cells. TCellHintPriority determines how the hint text is determined when multiple hint text values are displayed.
          </p>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCellHintPriority.chpAll">
        <short>
          Uses all hints (both control and cell hints) including short and long display text values
        </short>
      </element>
      <element name="TCellHintPriority.chpAllNoDefault">
        <short>Uses all hints except the default hint for the grid control</short>
      </element>
      <element name="TCellHintPriority.chpTruncOnly">
        <short>Uses the truncated cell hint text</short>
      </element>

      <element name="TCellProcessType">
        <short>Identifies the action performed for cell content</short>
        <descr>
          <p>
            <var>TCellProcessType</var> is an enumerated type with values that identify the action performed for the content in a grid cell. Values in the enumeration indicate whether cell content is copied or pasted in event handlers. TCellProcessType arguments are passed  to the <var>TCustomStringGrid.OnCellProcess</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCellProcessEvent"/>
          <link id="TCustomStringGrid.OnCellProcess"/>
        </seealso>
      </element>
      <element name="TCellProcessType.cpCopy">
        <short>Copies the content in a grid cell</short>
      </element>
      <element name="TCellProcessType.cpPaste">
        <short>Pastes content into the grid cell</short>
      </element>

      <element name="soAll">
        <short>All save options available in LCL grid controls</short>
        <descr>
          <p>
            <var>soAll</var> is a <var>TSaveOptions</var> constant with the set representing all of the TGridSaveOptions values available for a LCL grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridSaveOptions"/>
        </seealso>
      </element>

      <element name="DefaultGridOptions">
        <short>Set with the default grid options enabled for LCL grid controls</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="DefaultGridOptions2">
        <short>Default grid options enabled for version 2 of the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="constRubberSpace">
        <short>Default spacing around rubber band rectangles</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="constCellPadding">
        <short>Default padding for the content in grid cells</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="constColRowBorderTolerance">
        <short>Minimum proximity to row or column borders for resizing operations</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="PCellProps">
        <short>Pointer to a TCellProps type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCellProps">
        <short>Contains attributes, data, and text for grid cells</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCellProps.Attr">
        <short>Attributes for a grid cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCellProps.Data">
        <short>Data for a grid cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCellProps.Text">
        <short>Display text for a grid cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="PColRowProps">
        <short>Pointer to a TColRowProps type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TColRowProps">
        <short>Contains the size and display attributes for a column or row in a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TColRowProps.Size">
        <short>Not used in the current implementation</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TColRowProps.FixedAttr">
        <short>Not used in the current implementation</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TColRowProps.NormalAttr">
        <short>Not used in the current implementation</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="PGridMessage">
        <short>Pointer to a TGridMessage type</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridMessage">
        <short>Contains a LCL message and its auxiliary values</short>
        <descr>
          <p>
            <var>TGridMessage</var> is a record type with members representing an LCL message passed to cell editors in a string grid. It is passed as an argument to <var>TStringCellEditor</var> methods (msg_SetMask, msg_GetGrid, et. al.) which handle and apply a specific LCL message.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TGridMessage.LclMsg">
        <short>The LCL message value</short>
      </element>
      <element name="TGridMessage.Grid">
        <short>Grid for the LCL message</short>
      </element>
      <element name="TGridMessage.Col">
        <short>Grid column for the LCL message</short>
      </element>
      <element name="TGridMessage.Row">
        <short>Grid row for the LCL message</short>
      </element>
      <element name="TGridMessage.Value">
        <short>Cell value for the LCL message</short>
      </element>
      <element name="TGridMessage.CellRect">
        <short>Rectangle coordinates for the LCL message</short>
      </element>
      <element name="TGridMessage.Options">
        <short>Options for the LCL message</short>
      </element>

      <element name="TStringCellEditor">
        <short>
          Implements the default editor for cells in <var>TCustomGrid</var>
        </short>
        <descr>
          <p>
            <var>TStringCellEditor</var> is a <var>TCustomMaskEdit</var> descendant that implements the default editor for cells in <var>TCustomGrid</var>. TStringCellEditor contains internal members used to reference its Grid control, and to access the row and column numbers for the underlying grid cell. TStringCellEditor also implements methods needed for LCL message passing using <var>TGridMessage</var>. An event handler is also published to perform actions needed when editing has been completed in the cell editor.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TGridMessage"/>
        </seealso>
      </element>

      <element name="TStringCellEditor.FGrid"/>
      <element name="TStringCellEditor.FCol"/>
      <element name="TStringCellEditor.FRow"/>

      <element name="TStringCellEditor.WndProc">
        <short>Window handling procedure for the cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.WndProc.TheMessage">
        <short>LCL message for the window handling procedure</short>
      </element>

      <element name="TStringCellEditor.Change" link="#lcl.stdctrls.TCustomEdit.Change" />

      <element name="TStringCellEditor.KeyDown"  link="#lcl.controls.TWinControl.KeyDown"/>
      <element name="TStringCellEditor.KeyDown.Key">
        <short></short>
      </element>
      <element name="TStringCellEditor.KeyDown.Shift">
        <short></short>
      </element>

      <element name="TStringCellEditor.msg_SetMask">
        <short>
          <var>msg_SetMask</var> - issues message for specifying mask</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_SetMask.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issue message for specifying value</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_SetValue.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues message for obtaining value</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_GetValue.Msg">
        <short>Message for the control</short>
      </element>
      <element name="TStringCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_SetGrid.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.msg_SelectAll">
        <short>
          <var>msg_SelectAll</var> - issues message for Selecting All</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_SelectAll.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues message for specifying position</short>
      </element>
      <element name="TStringCellEditor.msg_SetPos.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.msg_GetGrid">
        <short>Message used to get the grid control for the cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringCellEditor.msg_GetGrid.Msg">
        <short>Message for the control</short>
      </element>

      <element name="TStringCellEditor.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance. Create calls the inherited constructor using the value in <var>AOwner</var> as an argument. Create sets the value in the <var>AutoSize</var> property to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.StdCtrls.TCustomEdit.AutoSize"/>
        </seealso>
      </element>
      <element name="TStringCellEditor.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TStringCellEditor.EditingDone">
        <short>
          Performs actions needed when the cell editor has finished editing the value in a cell
        </short>
        <descr>
          <p>
            <var>EditingDone</var> is an overridden procedure used to perform actions required when the cell editor has finished editing the value in a cell. EditingDone calls the inherited method, and calls the EditingDone method in the attached Grid control (when assigned) for the cell editor.
          </p>
        </descr>
        <seealso>
        <link id="TCustomGrid.EditingDone"/>
        </seealso>
      </element>

      <element name="TStringCellEditor.EditText" link="#lcl.maskedit.TCustomMaskEdit.EditText">
        <short></short>
        <descr>
          EditText is a published property in TStringCellEditor.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TStringCellEditor.OnEditingDone" link="#lcl.maskedit.TCustomMaskEdit.OnEditingDone">
        <short></short>
        <descr>
          OnEditingDone is a published property in TStringCellEditor.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TButtonCellEditor">
        <short>
          <var>TButtonCellEditor</var> - the editor for button cells in a grid</short>
        <descr>
          <p>
            <var>TButtonCellEditor</var> is a <var>TButton</var> descendant which implements a grid cell editor which uses a button to activate the editor control. TButtonCellEditor maintains interval member variables for the TCustomGrid hosting the editor control. The row and column numbers for the underlying cell for the editor control are available in the <var>Row</var> and <var>Col</var> properties. TButtonCellEditor includes methods used to perform LCL message passing using a <var>TGridMessage</var> message type.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
          <link id="TGridMessage"/>
          <link id="TButtonCellEditor.Col"/>
          <link id="TButtonCellEditor.Row"/>
        </seealso>
      </element>

      <element name="TButtonCellEditor.FGrid"/>
      <element name="TButtonCellEditor.FCol"/>
      <element name="TButtonCellEditor.FRow"/>

      <element name="TButtonCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TButtonCellEditor.msg_SetGrid.Msg">
        <short></short>
      </element>

      <element name="TButtonCellEditor.msg_SetBounds">
        <short>
          <var>msg_SetBounds</var> - issues message for specifying bounds</short>
        </element>
      <element name="TButtonCellEditor.msg_SetBounds.Msg">
        <short></short>
        </element>

      <element name="TButtonCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues message for specifying position</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TButtonCellEditor.msg_SetPos.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TButtonCellEditor.msg_Ready">
        <short>
          <var>msg_Ready</var> - issues message when ready</short>
      </element>
      <element name="TButtonCellEditor.msg_Ready.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TButtonCellEditor.Col">
        <short>Column number for the grid cell editor</short>
        <descr>
          <p>
            <var>Col</var> is a public read-only <var>Integer</var> which contains  the column number for the cell hosting the editor control.
          </p>
          <p>
            Use <var>Row</var> to access the row number for the cell hosting the editor control.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor.Row"/>
        </seealso>
      </element>

      <element name="TButtonCellEditor.Row">
        <short>Row number for the grid cell editor</short>
        <descr>
          <p>
            <var>Row</var> is a public read-only <var>Integer</var> which contains the row number for the cell hosting the editor control.
          </p>
          <p>
            Use <var>Col</var> to access the column number for the cell hosting the editor control.
          </p>
        </descr>
        <seealso>
          <link id="TButtonCellEditor.Col"/>
        </seealso>
      </element>

      <element name="TPickListCellEditor">
        <short>Implements a cell editor control which displays a Pick List</short>
        <descr>
          <p>
            <var>TPickListCellEditor</var> is a <var>TCustomComboBox</var> descendant which implements a cell editor control that displays a Pick List. TPickListCellEditor provides overridden methods to alter the behavior of the TCustomComboBox ancestor.
          </p>
          <p>
            TPickListCellEditor has an internal member used to store the <var>TCustomGrid</var> for the cell editor. In addition, the <var>Row</var> and <var>Column</var> numbers for the underlying cell are stored in internal members. TPickListCellEditor provides methods needed to implement LCL message passing using the TGridMessage message type.
          </p>
        </descr>
        <seealso>
          <link id="TGridMessage"/>
        </seealso>
      </element>

      <element name="TPickListCellEditor.FGrid"/>
      <element name="TPickListCellEditor.FCol"/>
      <element name="TPickListCellEditor.FRow"/>

      <element name="TPickListCellEditor.WndProc" link="#lcl.controls.TControl.WndProc"/>
      <element name="TPickListCellEditor.WndProc.TheMessage">
        <short></short>
      </element>

      <element name="TPickListCellEditor.KeyDown" link="#lcl.controls.TWinControl.KeyDown"/>
      <element name="TPickListCellEditor.KeyDown.Key">
        <short></short>
      </element>
      <element name="TPickListCellEditor.KeyDown.Shift">
        <short></short>
      </element>

      <element name="TPickListCellEditor.DropDown" link="#lcl.stdctrls.TCustomComboBox.DropDown"/>
      <element name="TPickListCellEditor.CloseUp" link="#lcl.stdctrls.TCustomComboBox.CloseUp"/>
      <element name="TPickListCellEditor.Select" link="#lcl.stdctrls.TCustomComboBox.Select"/>

      <element name="TPickListCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues a message to find the value</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TPickListCellEditor.msg_GetValue.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TPickListCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues a message to specify the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TPickListCellEditor.msg_SetGrid.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TPickListCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issues a message to specify the value</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TPickListCellEditor.msg_SetValue.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TPickListCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues a message to specify the position</short>
      </element>
      <element name="TPickListCellEditor.msg_SetPos.Msg">
        <short>LCL message for the grid control</short>
      </element>

      <element name="TPickListCellEditor.EditingDone" link="#lcl.controls.TControl.EditingDone"/>
      <element name="TPickListCellEditor.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>

      <element name="TEditorItem">
        <short>
          <var>TEditorItem</var> - a single item on which a Composite Cell Editor operates</short>
      </element>
      <element name="TEditorItem.Editor">
        <short>The <var>Editor</var> to be used for this item</short>
      </element>
      <element name="TEditorItem.Align">
        <short>
          <var>Align</var> - how this item is to be aligned</short>
      </element>
      <element name="TEditorItem.ActiveControl">
        <short>
          <var>ActiveControl</var> - returns True if this item is part of an active control</short>
      </element>

      <element name="TCompositeCellEditor">
        <short>
          <var>TCompositeCellEditor</var> - a general purpose editor for cells in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCompositeCellEditor.DoUTF8KeyPress" link="#lcl.controls.TWinControl.DoUTF8KeyPress"/>
      <element name="TCompositeCellEditor.SetFocus" link="#lcl.controls.TWinControl.SetFocus"/>
      <element name="TCompositeCellEditor.VisibleChanging" link="#lcl.controls.TControl.VisibleChanging"/>

      <element name="TCompositeCellEditor.msg_GetValue">
        <short>
          <var>msg_GetValue</var> - issues a message to find the value
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SetGrid">
        <short>
          <var>msg_SetGrid</var> - issues message for specifying grid
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SetValue">
        <short>
          <var>msg_SetValue</var> - issues a message to specify the value
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SetBounds">
        <short>
          <var>msg_SetBounds</var> - issues message for specifying bounds
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SetMask">
        <short>
          <var>msg_SetMask</var> - issues message for specifying mask
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SelectAll">
        <short>
          <var>msg_SelectAll</var> - issues message for Selecting All
        </short>
      </element>
      <element name="TCompositeCellEditor.CMControlChange">
        <short>
          <var>CMControlChange</var> - issues Control Message for a change in a control
        </short>
      </element>
      <element name="TCompositeCellEditor.msg_SetPos">
        <short>
          <var>msg_SetPos</var> - issues a message to specify the position
        </short>
      </element>

      <element name="TCompositeCellEditor.SendChar">
        <short>
          <var>SendChar</var> - transmits the specified character and returns an integer status result
        </short>
        <descr>0 - failure, 1 - success</descr>
      </element>

      <element name="TCompositeCellEditor.WndProc" link="#lcl.controls.TControl.WndProc"/>
      <element name="TCompositeCellEditor.Destroy" link="#rtl.Classes.TComponent.Destroy"/>

      <element name="TCompositeCellEditor.AddEditor">
        <short>
          <var>AddEditor</var> - adds the specified Editor with the given alignment and specified ActiveControl property
        </short>
      </element>

      <element name="TOnDrawCell">
        <short>Defines the event handler signalled to draw a cell a grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TOnDrawCell.Sender">
        <short>Grid control for the event notification</short>
      </element>
      <element name="TOnDrawCell.aCol">
        <short>Column number to draw in the event handler</short>
      </element>
      <element name="TOnDrawCell.aRow">
        <short>Row number to draw in the event handler</short>
      </element>
      <element name="TOnDrawCell.aRect">
        <short>Rectangle to draw in the event handler</short>
      </element>
      <element name="TOnDrawCell.aState">
        <short>Grid drawing state used in the event handler</short>
      </element>

      <element name="TOnSelectCellEvent">
        <short>
          Specifies the event handler signalled when a cell is selected in a grid control
        </short>
        <descr>
          <p>
            <var>TOnSelectCellEvent</var> specifies the event handler signalled when a cell is selected in a custom-drawn grid control. TOnSelectCellEvent is the type used to implement the OnSelectCell in TCustomDrawGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSelectCell"/>
        </seealso>
      </element>
      <element name="TOnSelectCellEvent.Sender">
        <short>Control for the event notification</short>
      </element>
      <element name="TOnSelectCellEvent.aCol">
        <short>Column number for the selection notification</short>
      </element>
      <element name="TOnSelectCellEvent.aRow">
        <short>Row number for the selection notification</short>
      </element>
      <element name="TOnSelectCellEvent.CanSelect">
        <short>Set to True if the specified cell can be selected</short>
      </element>

      <element name="TOnSelectEvent">
        <short>
          Specifies an event handler signalled for a selection in a grid control
        </short>
        <descr>
          <p>
            <var>TOnSelectEvent</var> specifies an event handler signalled when a selection is made in a grid control. TOnSelectEvent is the type used to implement event handler properties in TCustomGrid, including:
          </p>
          <ul>
            <li>OnAfterSelection</li>
            <li>OnBeforeSelection</li>
            <li>OnButtonClick</li>
            <li>OnSelection</li>
          </ul>
          <p>
            Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnAfterSelection"/>
          <link id="TCustomGrid.OnBeforeSelection"/>
          <link id="TCustomGrid.OnButtonClick"/>
          <link id="TCustomGrid.OnSelection"/>
        </seealso>
      </element>
      <element name="TOnSelectEvent.Sender">
        <short>Control generating the event notification</short>
      </element>
      <element name="TOnSelectEvent.aCol">
        <short>Column number for the selection</short>
      </element>
      <element name="TOnSelectEvent.aRow">
        <short>Row number for the selection</short>
      </element>

      <element name="TGridOperationEvent">
        <short>
          Event handler signalled when rows or columns are added, deleted or moved in a grid
        </short>
        <descr>
          <p>
            <var>TGridOperationEvent</var> specifies an event handler signalled when rows or columns are added, deleted or moved in a custom-drawn grid control. TGridOperationEvent is the type used to implement event handler properties in <var>TCustomDrawGrid</var>, including:
          </p>
          <ul>
            <li>OnColRowDeleted</li>
            <li>OnColRowExchanged</li>
            <li>OnColRowInserted/</li>
            <li>OnColRowMoved</li>
          </ul>
          <p>
            Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnColRowDeleted"/>
          <link id="TCustomDrawGrid.OnColRowExchanged"/>
          <link id="TCustomDrawGrid.OnColRowInserted"/>
          <link id="TCustomDrawGrid.OnColRowMoved"/>
        </seealso>
      </element>
      <element name="TGridOperationEvent.Sender">
        <short>Control for the event notification</short>
      </element>
      <element name="TGridOperationEvent.IsColumn">
        <short>True when the notification is for a column and not a row</short>
      </element>
      <element name="TGridOperationEvent.sIndex">
        <short>Starting index position for the row or column</short>
      </element>
      <element name="TGridOperationEvent.tIndex">
        <short>Final index position for the row or column</short>
      </element>

      <element name="THdrEvent">
        <short>
          Specifies an event handler signalled when an event occurs in a fixed header cell
        </short>
        <descr>
          <p>
            <var>THdrEvent</var> specifies an event handler signalled when an event occurs in a column header. Arguments passed to the event handler indicate whether the action occurred for a column or a row header, and the index position for the row or column.
          </p>
          <p>
            <var>THdrEvent</var> is the type used to implement the <var>OnHeaderClick</var> and <var>OnHeaderSized</var> properties in <var>TCustomDrawGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderClick"/>
          <link id="TCustomDrawGrid.OnHeaderSized"/>
        </seealso>
      </element>
      <element name="THdrEvent.Sender">
        <short>Control generating the event notification</short>
      </element>
      <element name="THdrEvent.IsColumn">
        <short>
          True if the event applies to a column header; False when a row header is affected
        </short>
      </element>
      <element name="THdrEvent.Index">
        <short>Index position for the row or column in the event notification</short>
      </element>

      <element name="TOnCompareCells">
        <short>Specifies an event handler signalled to compare cell values</short>
        <descr>
          <p>
            <var>TOnCompareCells</var> specifies an event handler signalled to compare the cells at the coordinates in <var>ACol</var>, <var>ARow</var>, <var>BCol</var>, and <var>BRow</var>. ACol and ARow are the column and row numbers for the first value in the comparison. BCol and BRow are the column and row number for the second value in the comparison.
          </p>
          <p>
            <var>Result</var> is a variable <var>Integer</var> argument used to return the relative sort order for the compared values. The event handler must perform the actions needed to compare the cell values, and set the value in Result accordingly. <var>Result</var> should contain the following values:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The cell value at ACol, ARow occurs before the value at BCol, BRow</dd>
            <dt>0</dt>
            <dd>The compared cells contain the same values</dd>
            <dt>1</dt>
            <dd>The cell value at ACol, ARow occurs after the cell value at BCol, BRow</dd>
          </dl>
          <p>
            TOnCompareCells is the type used to implement the <var>OnCompareCells</var> in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCompareCells"/>
        </seealso>
      </element>
      <element name="TOnCompareCells.Result">
        <short>Relative sort order for the compared values</short>
      </element>
      <element name="TOnCompareCells.Sender">
        <short>Control generating the event notification</short>
      </element>
      <element name="TOnCompareCells.ACol">
        <short>Column number for the first compared cell value</short>
      </element>
      <element name="TOnCompareCells.ARow">
        <short>Row number for the first compared cell value</short>
      </element>
      <element name="TOnCompareCells.Bcol">
        <short>Column number for the second compared cell value</short>
      </element>
      <element name="TOnCompareCells.BRow">
        <short>Row number for the second compared cell value</short>
      </element>

      <element name="TSelectEditorEvent">
        <short>
          Specifies an event handler signalled to get an editor control for the specified cell
        </short>
        <descr>
          <p>
            <var>TSelectEditorEvent</var> specifies an event handler signalled to get an editor control for the cell at the coordinates in <var>ACol</var> and <var>ARow</var>.
          </p>
          <p>
            <var>Editor</var> is the <var>TWinControl</var> or descendent class instance to use as the cell editor for the given cell.
          </p>
          <p>
            TSelectEditorEvent is the type used to implement the <var>OnSelectEditor</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnSelectEditor"/>
        </seealso>
      </element>
      <element name="TSelectEditorEvent.Sender">
        <short>Control generating the event notification</short>
      </element>
      <element name="TSelectEditorEvent.aCol">
        <short>Column number for the cell editor</short>
      </element>
      <element name="TSelectEditorEvent.aRow">
        <short>Row number for the cell editor</short>
      </element>
      <element name="TSelectEditorEvent.Editor">
        <short>Editor control to use for the specified cell</short>
      </element>

      <element name="TOnPrepareCanvasEvent">
        <short>
          Specifies an event handler signalled when preparing the canvas for a grid control
        </short>
        <descr>
          <p>
            <var>TOnPrepareCanvasEvent</var> specifies an event handler signalled when the canvas for a grid control is prepared for rendering. TOnPrepareCanvasEvent allows the canvas for the grid control to be altered prior to rendering cell data.
          </p>
          <p>
            <var>Sender</var> is the grid control triggering the event notification.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> are the column and row numbers (respectively) for the grid cell in the event notification.
          </p>
          <p>
            <var>AState</var> contains the grid drawing state for the cell data.
          </p>
          <p>
            TOnPrepareCanvasEvent is the type used to implement the <var>OnPrepareCanvas</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnPrepareCanvas"/>
          <link id="TCustomGrid.PrepareCanvas"/>
          <link id="TCustomGrid.DoPrepareCanvas"/>
          <link id="TCustomGrid.DrawCell"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
        </seealso>
      </element>
      <element name="TOnPrepareCanvasEvent.Sender">
        <short>Grid control for the event notification</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aCol">
        <short>Column number for the cell in the event notification</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aRow">
        <short>Row number for the cell in the event notification</short>
      </element>
      <element name="TOnPrepareCanvasEvent.aState">
        <short>Grid drawing state for the cell in the event notification</short>
      </element>

      <element name="TUserCheckBoxImageEvent">
        <short>
          Specifies the event handler used to get the image drawn for a Checkbox column in a grid
        </short>
        <descr>
          <p>
            <var>TUserCheckBoxImageEvent</var> specifies an event handler signalled to get the image drawn for a grid cell which displays a Checkbox.
          </p>
          <p>
            <var>Sender</var> is the grid control generating the event notification.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> are the column and row numbers (respectively) for the cell where the Checkbox is drawn.
          </p>
          <p>
            <var>CheckedState</var> indicates whether the Checkbox is drawn using the Checked state.
          </p>
          <p>
            <var>ImageList</var> contains the images used for the Unchecked and Checked states.
          </p>
          <p>
            <var>ImageIndex</var> indicates the image in ImageList used for the drawing operation.
          </p>
          <p>
            TUserCheckBoxImageEvent is the type used to implement the <var>OnUserCheckboxImage</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnUserCheckboxImage"/>
          <link id="TCustomGrid.GetImageForCheckBox"/>
        </seealso>
      </element>
      <element name="TUserCheckBoxImageEvent.Sender">
        <short>Grid generating the event notification</short>
      </element>
      <element name="TUserCheckBoxImageEvent.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TUserCheckBoxImageEvent.aRow">
        <short>Row number for the cell</short>
      </element>
      <element name="TUserCheckBoxImageEvent.CheckedState">
        <short>State for the Checkbox</short>
      </element>
      <element name="TUserCheckBoxImageEvent.ImageList">
        <short>Image list with unchecked and checked images</short>
      </element>
      <element name="TUserCheckBoxImageEvent.ImageIndex">
        <short>Position of the image to use in ImageList</short>
      </element>

      <element name="TValidateEntryEvent">
        <short>Specifies the event handler used to validate the content in a grid cell</short>
        <descr>
          <p>
            <var>TValidateEntryEvent</var> specifies an event handler used to validate the content in a grid cell. TValidateEntryEvent is the type used to implement the <var>OnValidateEntry</var> in <var>TCustomGrid</var>. Applications must implement an object procedure using the event signature to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnValidateEntry"/>
          <link id="TCustomGrid.ValidateEntry"/>
          <link id="TCustomGrid.EditorDoGetValue"/>
          <link id="TCustomStringGrid.SelectionSetText"/>
        </seealso>
      </element>
      <element name="TValidateEntryEvent.Sender">
        <short>Grid generating the event notification</short>
      </element>
      <element name="TValidateEntryEvent.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TValidateEntryEvent.aRow">
        <short>Row number for the cell</short>
      </element>
      <element name="TValidateEntryEvent.OldValue">
        <short>Value checked in the event handler</short>
      </element>
      <element name="TValidateEntryEvent.NewValue">
        <short>Value returned from the event handler</short>
      </element>

      <element name="TToggledCheckboxEvent">
        <short>
          Specifies an event handler signalled when the value in a CheckBox cell is changed
        </short>
        <descr>
          <p>
            <var>TToggledCheckboxEvent</var> specifies an event handler signalled when the value in CheckBox-style cell is changed in a grid. Arguments passed to the event handler identify the grid control for the event notification, the row and column numbers for the altered cell, and the state for a CheckBox cell editor.
          </p>
          <p>
            <var>TToggledCheckboxEvent</var> is the type used to implement the <var>OnCheckboxToggled</var> in <var>TCustomGrid</var> and descendent classes. Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCheckboxToggled"/>
          <link id="TCustomDrawGrid.ToggleCheckbox"/>
        </seealso>
      </element>
      <element name="TToggledCheckboxEvent.Sender">
        <short>Grid control for the event notification</short>
      </element>
      <element name="TToggledCheckboxEvent.aCol">
        <short>Column number for the altered cell</short>
      </element>
      <element name="TToggledCheckboxEvent.aRow">
        <short>Row number for the altered cell</short>
      </element>
      <element name="TToggledCheckboxEvent.aState">
        <short>State for the CheckBox in the associated cell editor</short>
      </element>

      <element name="THeaderSizingEvent">
        <short>
          Specifies an event handler signalled when a fixed cell header in a grid is resized
        </short>
        <descr>
          <p>
            <var>THeaderSizingEvent</var> specifies an event handler signalled when a fixed cell header in a grid is resized. Arguments passed to the event handler identify the grid control for the event, and information the row or column  affected by the operation.
          </p>
          <p>
            THeaderSizingEvent is the type used to implement the <var>OnHeaderSizing</var> property in TCustomDrawGrid. Applications must implement an object procedure using the signature for the event to allow responding to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnHeaderSizing"/>
        </seealso>
      </element>
      <element name="THeaderSizingEvent.Sender">
        <short>Grid control for the event notification</short>
      </element>
      <element name="THeaderSizingEvent.IsColumn">
        <short>
          True when the affected cell is a column header; False when it is a row header
        </short>
      </element>
      <element name="THeaderSizingEvent.aIndex">
        <short>Position of the row or column in the grid control</short>
      </element>
      <element name="THeaderSizingEvent.aSize">
        <short>Size (in pixels) for the resized cell</short>
      </element>

      <element name="TCellProcessEvent">
        <short>Specifies an event handler used to process the value in a grid cell</short>
        <descr>
          <p>
            <var>TCellProcessEvent</var> specifies an event handler used to process the value in a grid cell in <var>TCustomStringGrid</var>. Arguments to the event handler identify the grid generating the event notification, the row and column numbers for the affected cell, and the value for the cell after processing. The <var>processType</var> argument specifies whether <var>aValue</var> is copied from or pasted to the cell.
          </p>
          <p>
            TCellProcessEvent is the type used to implement the <var>OnCellProcess</var> in <var>TCustomStringGrid</var>. Applications must implement an object procedure using the signature for the event handler to respond to the event notification.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.OnCellProcess"/>
        </seealso>
      </element>
      <element name="TCellProcessEvent.Sender">
        <short>Grid control generating the event notification</short>
      </element>
      <element name="TCellProcessEvent.aCol">
        <short>Column number for the cell in the event notification</short>
      </element>
      <element name="TCellProcessEvent.aRow">
        <short>Row number for the cell in the event notification</short>
      </element>
      <element name="TCellProcessEvent.processType">
        <short>Process to perform on the cell value</short>
      </element>
      <element name="TCellProcessEvent.aValue">
        <short>Value for the cell after processing has been applied</short>
      </element>

      <element name="TGetCellHintEvent">
        <short>Event used to get cell hints</short>
        <descr>
          <p>
            <var>TGetCellHintEvent</var> is an object procedure type used to get a hint for a string grid cell. TGetCellHintEvent is the type used for the <var>OnGetCellHint</var> property in <var>TCustomGrid</var>.
          </p>
          <p>
            Arguments passed to the procedure can be used to determine the content in HintText displayed as the cell hint.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnGetCellHint"/>
        </seealso>
      </element>
      <element name="TGetCellHintEvent.Sender">
        <short>The grid for the notification</short>
      </element>
      <element name="TGetCellHintEvent.ACol">
        <short>Column index for the notification</short>
      </element>
      <element name="TGetCellHintEvent.ARow">
        <short>Row index  for the notification</short>
      </element>
      <element name="TGetCellHintEvent.HintText">
        <short>Text displayed as hint for the cell</short>
      </element>

      <element name="TSaveColumnEvent">
        <short>
          Specifies an event handler used to load/save the configuration for a column in a grid
        </short>
        <descr>
          <p>
            <var>TSaveColumnEvent</var> is the type used to implement the <var>OnLoadColumn</var> and <var>OnSaveColumn</var> properties in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnLoadColumn"/>
          <link id="TCustomGrid.OnSaveColumn"/>
        </seealso>
      </element>
      <element name="TSaveColumnEvent.Sender">
        <short>Grid for the event notification</short>
      </element>
      <element name="TSaveColumnEvent.aColumn">
        <short>Column object for the event notification</short>
      </element>
      <element name="TSaveColumnEvent.aColIndex">
        <short>Index of the column in the grid</short>
      </element>
      <element name="TSaveColumnEvent.aCfg">
        <short>XML configuration file for the column information</short>
      </element>
      <element name="TSaveColumnEvent.aVersion">
        <short>Grid version for the event</short>
      </element>
      <element name="TSaveColumnEvent.aPath">
        <short>Path expression in the configuration file the column</short>
      </element>

      <element name="TVirtualGrid">
        <short>
          Implements a grid for metadata where rows and columns are stored as arrays of Pointers
        </short>
        <descr>
          <p>
            <var>TVirtualGrid</var> is a class used to represent a grid where the rows and columns containing grid metadata are stored as arrays of Pointers. Data stored in the grid includes the Size for data in a cell, and pointers to attributes for fixed and normal cell display.
          </p>
          <p>
            TVirtualGrid is the type used for an internal member in TCustomDrawGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.FColCount"/>
      <element name="TVirtualGrid.FRowCount"/>
      <element name="TVirtualGrid.FCellArr"/>
      <element name="TVirtualGrid.FColArr"/>
      <element name="TVirtualGrid.FRowArr"/>

      <element name="TVirtualGrid.GetCells">
        <short>Gets the value for the indexed Celda property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetCells.Result">
        <short>Value for the property</short>
      </element>
      <element name="TVirtualGrid.GetCells.Col">
        <short>Column number for the cell value</short>
      </element>
      <element name="TVirtualGrid.GetCells.Row">
        <short>Row number for the cell value</short>
      </element>

      <element name="TVirtualGrid.GetRows">
        <short>Gets the value for the indexed Rows property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Rows"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetRows.Result">
        <short>Value for the property</short>
      </element>
      <element name="TVirtualGrid.GetRows.Row">
        <short>Row number for the property value</short>
      </element>

      <element name="TVirtualGrid.GetCols">
        <short>Gets the value for the indexed Cols property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Cols"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetCols.Result">
        <short>Value for the property</short>
      </element>
      <element name="TVirtualGrid.GetCols.Col">
        <short>Column number for the property value</short>
      </element>

      <element name="TVirtualGrid.SetCells">
        <short>Sets the value for the indexed Celda property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetCells.Col">
        <short>Column number for the cell value</short>
      </element>
      <element name="TVirtualGrid.SetCells.Row">
        <short>Row number for the cell value</short>
      </element>
      <element name="TVirtualGrid.SetCells.AValue">
        <short>Pointer to the properties for the cell</short>
      </element>

      <element name="TVirtualGrid.SetRows">
        <short>Sets the value for the indexed Rows property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Rows"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetRows.Row">
        <short>Row number for the property value</short>
      </element>
      <element name="TVirtualGrid.SetRows.AValue">
        <short>Pointer to the properties for the row</short>
      </element>

      <element name="TVirtualGrid.SetColCount">
        <short>Sets the value for the ColCount property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetColCount.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TVirtualGrid.SetRowCount">
        <short>Sets the value for the RowCount property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetRowCount.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TVirtualGrid.SetCols">
        <short>Sets the value for the indexed Cols property</short>
        <descr></descr>
        <seealso>
          <link id="TVirtualGrid.Cols"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.SetCols.Col">
        <short>Column number for the properties stored in the method</short>
      </element>
      <element name="TVirtualGrid.SetCols.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TVirtualGrid.doDestroyItem">
        <short>
          <var>doDestroyItem</var> - method for destroying an Item at the given Row and Column location
        </short>
        <descr>
          <p>
            Performs actions needed to free the Item at the specified column and row numbers.
          </p>
          <p>
            <var>Item</var> is a <var>Pointer</var> to the column/row properties for the cell at the coordinates in <var>Col</var> and <var>Row</var>. No actions are performed in the method when Item is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            <var>Sender</var> contains the object instance for the column, row, or cell affected in the method. Calls the <var>DisposeColRow</var> method when Sender is for a column or row array. Calls <var>DisposeCell</var> when Sender contains a pointer to another object class.
          </p>
          <p>
            The value in Item is set to <b>Nil</b> prior to exiting from the method.
          </p>
          <p>
            doDestroyItem is the default handler assigned to the <var>OnDestroyItem</var> event handler  for the cell, column and row arrays used in the virtual grid.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Sender">
        <short>Column, row, or cell properties affected in the method</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Col">
        <short>Column number freed  in the method</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Row">
        <short>Row number freed in the method</short>
      </element>
      <element name="TVirtualGrid.doDestroyItem.Item">
        <short>Pointer to the column, row, or cell properties freed in the method</short>
      </element>

      <element name="TVirtualGrid.doNewItem">
        <short>
          <var>doNewItem</var> - method for producing a new item at the given location specified by Row, Col
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.doNewItem.Sender">
        <short></short>
      </element>
      <element name="TVirtualGrid.doNewItem.Col">
        <short></short>
      </element>
      <element name="TVirtualGrid.doNewItem.Row">
        <short></short>
      </element>
      <element name="TVirtualGrid.doNewItem.Item">
        <short></short>
      </element>

      <element name="TVirtualGrid.DeleteColRow">
        <short>
          <var>DeleteColRow</var> - remove either a column or a row, depending on the value of
          <var>IsColumn</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.DeleteColRow.IsColumn">
        <short></short>
      </element>
      <element name="TVirtualGrid.DeleteColRow.Index">
        <short></short>
      </element>

      <element name="TVirtualGrid.MoveColRow">
        <short>
          <var>MoveColRow</var> - move either a column or a row (depending on value of <var>IsColumn</var>) at <var>FromIndex</var> to the location <var>ToIndex</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.MoveColRow.IsColumn">
        <short></short>
      </element>
      <element name="TVirtualGrid.MoveColRow.FromIndex">
        <short></short>
      </element>
      <element name="TVirtualGrid.MoveColRow.ToIndex">
        <short></short>
      </element>

      <element name="TVirtualGrid.ExchangeColRow">
        <short>
          <var>ExchangeColRow</var> - exchange either the current column or row (depending on the value of <var>IsColumn</var>) with the entity specified by <var>WithIndex</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.IsColumn">
        <short></short>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.Index">
        <short></short>
      </element>
      <element name="TVirtualGrid.ExchangeColRow.WithIndex">
        <short></short>
      </element>

      <element name="TVirtualGrid.DisposeCell">
        <short>
          <var>DisposeCell</var> - dispose of the resources and pointer for the given cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.DisposeCell.P">
        <short></short>
      </element>

      <element name="TVirtualGrid.DisposeColRow">
        <short>
          <var>DisposeColRow</var> - dispose of the specified row or column, freeing its pointer
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.DisposeColRow.p">
        <short></short>
      </element>

      <element name="TVirtualGrid.IsColumnIndexValid">
        <short></short>
        <descr></descr>
      </element>
      <element name="TVirtualGrid.IsColumnIndexValid.Result">
        <short></short>
      </element>
      <element name="TVirtualGrid.IsColumnIndexValid.AIndex">
        <short></short>
      </element>

      <element name="TVirtualGrid.IsRowIndexValid">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.IsRowIndexValid.Result">
        <short></short>
      </element>
      <element name="TVirtualGrid.IsRowIndexValid.AIndex">
        <short></short>
      </element>

      <element name="TVirtualGrid.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the overridden constructor for the class instance, and calls the inherited method on entry.
          </p>
          <p>
            Create allocates TPointerPointerArray resources needed for the column, row, and cell arrays used in the class instance. OnDestroyItem and OnNewItem event handlers in the array classes are set to the <var>doDestroyItem</var> and <var>doNewItem</var> methods in the class instance.
          </p>
          <p>
            Creates sets the default values for the <var>RowCount</var> and <var>ColCount</var> properties to 4 (for both).
          </p>
        </descr>
        <seealso>
          <link id="#rtl.System.TObject.Create"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.Destroy">
        <short>Destructor for the class instance</short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy calls <var>Clear</var> to free content in the internal cell, column, and row arrays used in the class instance. Resource allocated to the cell, row, and column arrays are freed. The row and column counts for the virtual grid are reset to 0 (zero).
          </p>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.System.TObject.Destroy"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.Clear">
        <short>Clears the content in the virtual grid</short>
        <descr>
          <p>
            <var>Clear</var> is a method used to remove the content in the virtual grid. Clear ensures that values in the cell, column, and row arrays used in the class instance are cleared. Values in the <var>ColCount</var> and <var>RowCount</var> properties are reset to <b>0</b> (<b>zero</b>).
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TVirtualGrid.GetDefaultCell">
        <short>Gets the default values for a new cell added to the grid</short>
        <descr>
          <p>
            <var>GetDefaultCell</var> is a <var>PCellProps</var> function used to get the default values for a new cell added to the grid. GetDefaultCell calls New to allocate resources for the PCellProps instance in the return value. Nil values are explicitly assigned to the <var>Text</var> and <var>Attr</var> members in the new instance.
          </p>
          <p>
            GetDefaultCell is called when a value is assigned to a cell in the <var>Celda</var> property and its PCellProps instance has not already been allocated.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.GetDefaultCell.Result">
        <short>Pointer to the cell properties with the default values for a cell</short>
      </element>

      <element name="TVirtualGrid.GetDefaultColRow">
        <short>
          Gets a pointer to the default values used in a new column and row properties instance
        </short>
        <descr>
          <p>
            Used in the implementation of the doNewItem method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.doNewItem"/>
          <link id="PColRowProps"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.GetDefaultColRow.Result">
        <short>Pointer to the PColRowProps allocated in the method</short>
      </element>

      <element name="TVirtualGrid.ColCount">
        <short>Number of columns defined for the grid</short>
        <descr>
          <p>
            <var>ColCount</var> is an <var>Integer</var> property which indicates the number of columns defined for the grid. When a new value for the property is specified, the internal arrays used for column and cell properties are resized to the length in the property value.
          </p>
        </descr>
        <seealso>
          <link id="TPointerPointerArray"/>
        </seealso>
      </element>

      <element name="TVirtualGrid.RowCount">
        <short>Number of rows defined for the grid</short>
        <descr>
          <p>
            <var>RowCount</var> is an <var>Integer</var> property which contains the number of rows defined for the grid. When setting a new value for the property, the internal arrays used for rows and cells are resized to the length in the new property value.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TVirtualGrid.Celda">
        <short>Provides indexed access to cell properties by their column and row numbers</short>
        <descr>
          <var>Celda</var> is an indexed <var>PCellProps</var> property which provides access to the data, attributes, and text for a given cell. Values are accessed by their column and row numbers. Setting a new value for the indexed property causes an existing cell to be freed from the internal cell array (when assigned) by calling <var>DisposeCell</var>.
        </descr>
        <seealso>
          <link id="TVirtualGrid.DisposeCell"/>
          <link id="PCellProps"/>
        </seealso>
      </element>
      <element name="TVirtualGrid.Celda.Col">
        <short>Column number for the cell</short>
      </element>
      <element name="TVirtualGrid.Celda.Row">
        <short>Row number for the cell</short>
      </element>

      <element name="TVirtualGrid.Cols">
        <short>Provides indexed access to column properties by their ordinal column number</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.Cols.Col">
        <short>Column number to access in the grid</short>
      </element>

      <element name="TVirtualGrid.Rows">
        <short>Provides indexed access to row properties by their ordinal row number</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.Rows.Row">
        <short>Row number to access in the grid</short>
      </element>

      <element name="TVirtualGrid.InsertColRow">
        <short>
          <var>InsertColRow</var> - insert either a column or a row (depending on value of <var>IsColumn</var>) at the specified index position
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TVirtualGrid.InsertColRow.IsColumn">
        <short></short>
      </element>
      <element name="TVirtualGrid.InsertColRow.Index">
        <short></short>
      </element>

      <element name="TGridColumnTitle">
        <short>Provides properties and methods relevant to the title for a column in a grid</short>
        <descr>
          <p>
            <var>TGridColumnTitle</var> is <var>TPersistent</var> descendant used to represent properties and methods relevant to the title for a column in a grid. Use the published properties in the class to access the layout and display attributes for the column title, including:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Color</li>
            <li>Font</li>
            <li>ImageIndex</li>
            <li>ImageLayout</li>
            <li>Layout</li>
            <li>MultiLine</li>
            <li>PrefixOption</li>
          </ul>
          <p>
            Use the <var>Caption</var> to read or write the text displayed as the title for a grid column.
          </p>
          <p>
            Use the <var>Column</var> to read the column reference (assigned in the constructor for the class instance) to which the column title is attached.
          </p>
          <p>
            <var>TGridColumnTitle</var> is the type used to implement the <var>TGridColumn.Title</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumnTitle.Caption"/>
          <link id="TGridColumnTitle.Column"/>
          <link id="TGridColumnTitle.Alignment"/>
          <link id="TGridColumnTitle.Color"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.ImageIndex"/>
          <link id="TGridColumnTitle.ImageLayout"/>
          <link id="TGridColumnTitle.Layout"/>
          <link id="TGridColumnTitle.MultiLine"/>
          <link id="TGridColumnTitle.PrefixOption"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.FColumn"/>
      <element name="TGridColumnTitle.FCaption"/>
      <element name="TGridColumnTitle.FColor"/>
      <element name="TGridColumnTitle.FAlignment"/>
      <element name="TGridColumnTitle.FFont"/>
      <element name="TGridColumnTitle.FIsDefaultTitleFont"/>
      <element name="TGridColumnTitle.FLayout"/>

      <element name="TGridColumnTitle.FontChanged">
        <short>Updates the column for when font for the title has changed</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.FontChanged.Sender">
        <short>Class generating the notification</short>
      </element>

      <element name="TGridColumnTitle.GetAlignment" link="#lcl.grids.TGridColumnTitle.Alignment">
        <short>Gets the value for the Alignment property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetAlignment.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumnTitle.GetCaption">
        <short>Gets the value for the Caption property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetCaption.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumnTitle.GetColor">
        <short>Gets the value for the Color property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetColor.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumnTitle.GetFont">
        <short>Gets the value for the Font property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetFont.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumnTitle.GetLayout">
        <short>Gets the value for the Layout property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetLayout.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumnTitle.IsAlignmentStored">
        <short>
          Indicates if the Alignment is used when saving the component
        </short>
        <descr>
          <p>
            <var>IsAlignmentStored</var> indicates if the Alignment is used for the component. <var>IsAlignmentStored</var> contains <b>True</b> when the Alignment has been assigned (is not <b>Nil</b>) for the class instance.
          </p>
          <p>
            It is used in the TCustomGrid.SaveColumns method. It is also used as the storage specifier for the Alignment as used in LCL component streaming.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Alignment"/>
          <link id="TCustomGrid.SaveColumns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsAlignmentStored.Result">
        <short>True if Alignment is available for the column title</short>
      </element>

      <element name="TGridColumnTitle.IsCaptionStored">
        <short>Indicates if the Caption is available in the component</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Caption"/>
          <link id="TCustomGrid.SaveColumns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsCaptionStored.Result">
        <short>True when Caption is available for the column title</short>
      </element>

      <element name="TGridColumnTitle.IsColorStored">
        <short>Indicates if the Color is assigned for the column title</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Color"/>
          <link id="TCustomGrid.SaveColumns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsColorStored.Result">
        <short>True when Color has been assigned </short>
      </element>

      <element name="TGridColumnTitle.IsFontStored">
        <short>Indicates if the Font has been assigned for the column title</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
          <link id="TCustomGrid.SaveColumns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsFontStored.Result">
        <short>True when Font has been assigned in the column title</short>
      </element>

      <element name="TGridColumnTitle.IsLayoutStored">
        <short>Indicates if the Layout has been assigned in the column title</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Layout"/>
          <link id="TCustomGrid.SaveColumns"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.IsLayoutStored.Result">
        <short>True when the Layout has been assigned in the column title</short>
      </element>

      <element name="TGridColumnTitle.SetAlignment" link="#lcl.grids.TGridColumnTitle.Alignment">
        <short>Sets the value in the Alignment property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetAlignment.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumnTitle.SetColor" link="#lcl.grids.TGridColumnTitle.Color">
        <short>Sets the value in the Color property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Color"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumnTitle.SetFont" link="#lcl.grids.TGridColumnTitle.Font">
        <short>Sets the value in the Font property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetFont.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumnTitle.SetLayout" link="#lcl.grids.TGridColumnTitle.Layout">
        <short>Sets the value in the Layout property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumnTitle.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumnTitle.SetLayout.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumnTitle.IsDefaultFont">
        <short>Indicates if the Font contains a default value</short>
        <descr>
          <p>
            <var>IsDefaultFont</var> is a read-only <var>Boolean</var> that indicates if the <var>Font</var> contains a default value. The value in <var>IsDefaultFont</var> is set to <b>False</b> when a new value is assigned to the <var>Font</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.IsDefault"/>
          <link id="TGridColumnTitle.IsFontStored"/>
          <link id="TGridColumn.IsDefaultTitleFont"/>
          <link id="TGridColumn.Title"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.Assign" link="#rtl.Classes.TPersistent.Assign"/>
      <element name="TGridColumnTitle.Assign.Source">
        <short></short>
      </element>

      <element name="TGridColumnTitle.GetDefaultCaption">
        <short>
          <var>GetDefaultCaption</var> - returns the e default caption for this column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetDefaultCaption.Result">
        <short>Default value for the Caption property</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultAlignment">
        <short>
          <var>GetDefaultAlignment</var> - returns the default alignment
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetDefaultAlignment.Result">
        <short>Default value for the Alignment property</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultColor">
        <short>
          <var>GetDefaultColor</var> - returns the default color</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetDefaultColor.Result">
        <short>Default value for the Color property</short>
      </element>

      <element name="TGridColumnTitle.GetDefaultLayout">
        <short>
          <var>GetDefaultLayout</var> - returns the default layout
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.GetDefaultLayout.Result">
        <short>Default value for the Layout property</short>
      </element>

      <element name="TGridColumnTitle.SetCaption">
        <short>
          <var>SetCaption</var> - specifies the caption to use (rather than using default)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.SetCaption.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumnTitle.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          <p>
            <var>Create</var> is the virtual constructor for the class instance. Create calls the inherited constructor, allocates resources, and sets the default values for members in the class instance.
          </p>
          <p>
            Create calls the <var>FillTitleDefaultFont</var> method to get the default value used in the <var>Font</var> property. It can contain either the font for titles in the Grid instance or the font for the Column definition; preference is given to the value in the Grid.
          </p>
          <p>
            Create assigns the <var>FontChanged</var> method as the <var>OnChange</var> event handler for the <var>Font</var> property.
          </p>
          <p>
            <var>TheColumn</var> contains contains the <var>TGridColumn</var> instance where the column title is used.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TGridColumnTitle.Create.TheColumn">
        <short>Column class instance where the column title is used</short>
      </element>

      <element name="TGridColumnTitle.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TGridColumnTitle</var>: frees form, disconnects alignments, disposes of captions and colors then calls inherited <var>Destroy</var>
        </short>
        <descr></descr>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Destroy">TPersistent.Destroy</link>
        </seealso>
      </element>

      <element name="TGridColumnTitle.FillTitleDefaultFont">
        <short>
          <var>FillTitleDefaultFont</var> - use the default font for the whole of the title
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.FixDesignFontsPPI">
        <short></short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is a procedure used to...
          </p>
        </descr>
        <seealso></seealso>
        <notes><note>TODO</note></notes>
      </element>
      <element name="TGridColumnTitle.FixDesignFontsPPI.ADesignTime">
        <short></short>
      </element>

      <element name="TGridColumnTitle.ScaleFontsPPI">
        <short></short>
        <descr>
          <p>
            <var>ScaleFontsPPI</var> is an overridden procedure used to...
          </p>
        </descr>
        <seealso></seealso>
        <notes><note>TODO</note></notes>
      </element>
      <element name="TGridColumnTitle.ScaleFontsPPI.AToPPI">
        <short></short>
      </element>
      <element name="TGridColumnTitle.ScaleFontsPPI.AProportion">
        <short></short>
      </element>

      <element name="TGridColumnTitle.IsDefault">
        <short>
          <var>IsDefault</var> - returns True if this is the default title
        </short>
        <descr></descr>
         <seealso></seealso>
      </element>
      <element name="TGridColumnTitle.IsDefault.Result">
        <short></short>
      </element>

      <element name="TGridColumnTitle.Column">
        <short>The <var>Column</var> to which the title applies</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.Alignment">
        <short>The <var>Alignment</var> (whether justified or centered) for this title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.Caption">
        <short>The <var>Caption</var> for this title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.Color">
        <short>The <var>Color</var> to use for this title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.Font">
        <short>The <var>Font</var> for this title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.ImageIndex">
        <short>
          <var>ImageIndex</var> - the index for any image to be used in the title (default=0, i.e. no image)
        </short>
      </element>

      <element name="TGridColumnTitle.ImageLayout">
        <short>
          <var>ImageLayout</var> - the layout to use for any image in the title
        </short>
      </element>

      <element name="TGridColumnTitle.Layout">
        <short>The <var>Layout</var> for the text of the title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumnTitle.MultiLine">
        <short>Indicates if the column title can be displayed as multiple lines</short>
        <descr>
          <p>
            <var>MultiLine</var> is a <var>Boolean</var> that indicates if the column title can be displayed as multiple lines. The default value for the is <b>False</b>. Changing the value in MultiLine cause the <var>ColumnChanged</var> method for the <var>TGridColumn</var> class instance to be called.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ColumnChanged"/>
        </seealso>
      </element>

      <element name="TGridColumnTitle.PrefixOption">
        <short>Indicates if accelerator keys are used in the column title</short>
        <descr>
          <p>
            <var>PrefixOption</var> is a <var>TPrefixOption</var> that indicates if accelerator keys are recognized and displayed in the column title. The default value for the is <var>poNone</var>, and indicates Accelerator keys are ignored for the column title. Changing the value in <var>PrefixOption</var> causes the <var>ColumnChanged</var> method for the <var>TGridColumn</var> class instance to be called.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.ColumnChanged"/>
          <link id="TPrefixOption"/>
        </seealso>
      </element>

      <element name="TGridColumn">
        <short>Implements a column definition used for tabular data in TCustomGrid</short>
        <descr>
          <p>
            <var>TGridColumn</var> is a <var>TCollectionItem</var> descendant which implements a column definition for grid controls. TGridColumn contains properties which control the appearance, layout, and editing behavior used for a column in <var>TCustomGrid</var> and descendent classes. For instance:
          </p>
          <ul>
            <li>Alignment</li>
            <li>ButtonStyle</li>
            <li>Color</li>
            <li>DropDownRows</li>
            <li>Font</li>
            <li>Layout</li>
            <li>MinSize</li>
            <li>MaxSize</li>
            <li>PickList</li>
            <li>ReadOnly</li>
            <li>Width</li>
            <li>Visible</li>
            <li>ValueChecked</li>
            <li>ValueUnchecked</li>
          </ul>
          <p>
            The column has an associated <var>TGridColumnTitle</var> class instance in <var>Title</var> that defines the fixed cell header displayed for the column. As a convenience, the column includes a reference to the <var>TCustomGrid</var> which uses the column definition.
          </p>
          <p>
            Instances of <var>TGridColumn</var> are created by and stored in the <var>TGridColumns</var> collection class. Use the methods in <var>TGridColumns</var> to create, access, and maintain the items in the collection.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumnTitle"/>
        </seealso>
      </element>

      <element name="TGridColumn.FButtonStyle"/>
      <element name="TGridColumn.FDropDownRows"/>
      <element name="TGridColumn.FTitle"/>
      <element name="TGridColumn.FWidthChanged"/>
      <element name="TGridColumn.FAlignment"/>
      <element name="TGridColumn.FColor"/>
      <element name="TGridColumn.FLayout"/>
      <element name="TGridColumn.FVisible"/>
      <element name="TGridColumn.FReadOnly"/>
      <element name="TGridColumn.FWidth"/>
      <element name="TGridColumn.FFont"/>
      <element name="TGridColumn.FIsDefaultFont"/>
      <element name="TGridColumn.FPickList"/>
      <element name="TGridColumn.FMinSize"/>
      <element name="TGridColumn.FMaxSize"/>
      <element name="TGridColumn.FSizePriority"/>

      <element name="TGridColumn.FontChanged">
        <short>
          Performs actions needed when the Font has been changed for the grid column
        </short>
        <descr>
          <p>
            <var>FontChanged</var> is a procedure used to perform actions needed when the <var>Font</var> for the grid column has been changed. For <var>TGridColumn</var>, it sets the value in <var>IsDefaultFont</var> to <b>False</b> and calls the <var>ColumnChanged</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.IsDefaultFont"/>
          <link id="TGridColumn.ColumnChanged"/>
        </seealso>
      </element>
      <element name="TGridColumn.FontChanged.Sender">
        <short>Class instance generating the notification</short>
      </element>

      <element name="TGridColumn.GetAlignment" link="#lcl.grids.TGridColumn.Alignment">
        <short>Gets the value for the Alignment property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetAlignment.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetColor" link="#lcl.grids.TGridColumn.Color">
        <short>Gets the value for the Color property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetColor.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetExpanded">
        <short>Gets the value for the Expanded property</short>
        <descr>
          Always returns True in the current implementation.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetExpanded.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetFont" link="#lcl.grids.TGridColumn.Font">
        <short>Gets the value for the Font property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetFont.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetGrid" link="#lcl.grids.TGridColumn.Grid">
        <short>Gets the value for the Grid property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetGrid.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetLayout" link="#lcl.grids.TGridColumn.Layout">
        <short>Gets the value for the Layout property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetLayout.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetMaxSize" link="#lcl.grids.TGridColumn.MaxSize">
        <short>Gets the value for the MaxSize property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetMaxSize.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetMinSize" link="#lcl.grids.TGridColumn.MinSize">
        <short>Gets the value for the MinSize property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetMinSize.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetSizePriority" link="#lcl.grids.TGridColumn.SizePriority">
        <short>Gets the value for the SizePriority property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetSizePriority.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetPickList" link="#lcl.grids.TGridColumn.PickList">
        <short>
          <var>GetPickList</var> - returns the picklist as a list of strings
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetPickList.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetReadOnly" link="#lcl.grids.TGridColumn.ReadOnly">
        <short>Gets the value for the ReadOnly property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetReadOnly.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetVisible" link="#lcl.grids.TGridColumn.Visible">
        <short>Gets the value for the Visible property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetVisible.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.GetWidth" link="#lcl.grids.TGridColumn.Width">
        <short>Gets the value for the Width property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.GetWidth.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumn.IsAlignmentStored">
        <short>Indicates if the Alignment is used for the class instance</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsAlignmentStored.Result">
        <short>True when Alignment has been assigned in the class instance</short>
      </element>

      <element name="TGridColumn.IsColorStored">
        <short>Indicates if the Color is used in the class instance</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Color"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsColorStored.Result">
        <short>True when Color has been assigned in the class instance</short>
      </element>

      <element name="TGridColumn.IsFontStored">
        <short>Indicates if the Font has been assigned for the column</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.IsFontStored.Result">
        <short>True when Font has a value other than the default font</short>
      </element>

      <element name="TGridColumn.IsLayoutStored">
        <short>Implements the storage specifier for the ImageLayout property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ImageLayout"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsLayoutStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.IsMinSizeStored">
        <short>Implements the storage specifier for the MinSize property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsMinSizeStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.IsMaxSizeStored">
        <short>Implements the storage specifier for the MaxSize property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsMaxSizeStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.IsReadOnlyStored">
        <short>Implements the storage specifier for the  ReadOnly property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsReadOnlyStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.IsSizePriorityStored">
        <short>Implements the storage specifier for the SizePriority property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsSizePriorityStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.IsVisibleStored">
        <short>Implements the storage specifier for the Visible property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsVisibleStored.Result">
        <short>True when the property member contains True</short>
      </element>

      <element name="TGridColumn.IsWidthStored">
        <short>Implements the storage specifier for the Width property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.IsWidthStored.Result">
        <short>True when the property member contains a value other than Nil</short>
      </element>

      <element name="TGridColumn.SetAlignment">
        <short>Sets the value in the Alignment property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Alignment"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetAlignment.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetButtonStyle">
        <short>Sets the value in the ButtonStyle property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetButtonStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetColor">
        <short>Sets the value in the Color property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Color"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetExpanded">
        <short>Sets the value in the Expanded property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Expanded"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetExpanded.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetFont">
        <short>Sets the value in the Font property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Font"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetFont.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetLayout">
        <short>Sets the value in the Layout property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetLayout.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetMaxSize">
        <short>Sets the value in the MaxSize property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetMaxSize.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetMinSize">
        <short>Sets the value for the MinSize property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetMinSize.Avalue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetPickList">
        <short>Sets the value for the PickList property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.PickList"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetPickList.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetReadOnly">
        <short>Sets the value for the ReadOnly property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetReadOnly.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetSizePriority">
        <short>Sets the value for the SizePriority property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetSizePriority.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetTitle">
        <short>Sets the value for the Title property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Title"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetTitle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetVisible">
        <short>Sets the value for the Visible property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetVisible.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.SetWidth">
        <short>Sets the value for the Width property</short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.SetWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TGridColumn.Assign" link="#rtl.classes.TPersistent.Assign" />
      <element name="TGridColumn.Assign.Source">
        <short></short>
      </element>

      <element name="TGridColumn.GetDisplayName" link="#rtl.Classes.TCollectionItem.GetDisplayName"/>
      <element name="TGridColumn.GetDisplayName.Result">
        <short></short>
      </element>

      <element name="TGridColumn.GetDefaultAlignment">
        <short>Gets the default value for the Alignment property</short>
        <descr>
          <p>
            <var>GetDefaultAlignment</var> is a <var>TAlignment</var> function used to get the default value for the <var>Alignment</var> property in the grid column.
          </p>
          <p>
            GetDefaultAlignment uses the value in <var>ButtonStyle</var> to determine the alignment needed for the grid column instance. When ButtonStyle contains <var>cbsCheckboxColumn</var> or <var>cbsButtonColumn</var>, the alignment is set to <var>taCenter</var>. Otherwise, the alignment is set to <var>taLeftJustify</var>.
          </p>
          <p>
            GetDefaultAlignment is called when reading the value for the Alignment property, and the value in the property member has not been assigned (contains <b>Nil</b>). It is also called when setting a new value in Alignment, and determines whether the property member needs to be re-allocated for the modified value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Alignment"/>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultAlignment.Result">
        <short>TAlignment instance with the default alignment for the grid column</short>
      </element>

      <element name="TGridColumn.GetDefaultColor">
        <short>Gets the default value for the Color property</short>
        <descr>
          <p>
            <var>GetDefaultColor</var> is a <var>TColor</var> function used to get the default value for the <var>Color</var> property in the grid column. The return value is set to the Color property in <var>Grid</var>, when it has been assigned. When Grid contains <b>Nil</b>, the value <var>clWindow</var> is used as the return value.
          </p>
          <p>
            GetDefaultColor is called when reading the value for the Color property, and the property has not been assigned. It is also called when setting a new value in Color, and determines whether the property member is re-allocated for the new value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Color"/>
          <link id="TGridColumn.Grid"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultColor.Result">
        <short>Default value for the Color property in the grid column</short>
      </element>

      <element name="TGridColumn.GetDefaultLayout">
        <short>Default layout used for text in the grid column</short>
        <descr>
          <p>
            <var>GetDefaultLayout</var> is a <var>TTextLayout</var> function used to get the default value for the <var>Layout</var> property in the grid column. The return value is always <var>tlCenter</var> in <var>TGridColumn</var>.
          </p>
          <p>
            GetDefaultLayout is called when reading the value for the  Layout property, and an explicit value has not been assigned for the property. It is also called when setting a new value in Layout, and determines whether the property member is re-allocated for the new value.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.Layout"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultLayout.Result">
        <short>Default value for the Layout property</short>
      </element>

      <element name="TGridColumn.GetDefaultMaxSize">
        <short>
          Gets the default value for the MaxSize property
        </short>
        <descr>
          <p>
            The return value is always <b>200</b> in <var>TGridColumn</var>.
          </p>
          <p>
            <var>GetDefaultMaxSize</var> is called when read or writing the value for the <var>MaxSize</var> property, and an explicit value has not already been assigned for the member.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn.MaxSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultMaxSize.Result">
        <short>Default value for the MaxSize property</short>
      </element>

      <element name="TGridColumn.GetDefaultMinSize">
        <short>
          Gets the default value for the MinSize property
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.MinSize"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultMinSize.Result">
        <short>Default value for the MinSize property</short>
      </element>

      <element name="TGridColumn.GetDefaultReadOnly">
        <short>
          <var>GetDefaultReadOnly</var> - returns the default value for the <var>ReadOnly</var> property
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultReadOnly.Result">
        <short>Default value for the ReadOnly property</short>
      </element>

      <element name="TGridColumn.GetDefaultSizePriority">
        <short>
          Gets the default value for the SizePriority property
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultSizePriority.Result">
        <short>Default value for the SizePriority property</short>
      </element>

      <element name="TGridColumn.GetDefaultVisible">
        <short>
          <var>GetDefaultVisible</var> - returns the default value for the <var>Visible</var> property
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Visible"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultVisible.Result">
        <short>Default value for the Visible property</short>
      </element>

      <element name="TGridColumn.GetDefaultWidth">
        <short>
          <var>GetDefaultWidth</var> - returns the default value for width
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.Width"/>
        </seealso>
      </element>
      <element name="TGridColumn.GetDefaultWidth.Result">
        <short>Default value for the Width property</short>
      </element>

      <element name="TGridColumn.ColumnChanged">
        <short>
          Performs actions needed when a column in the grid is changed
        </short>
        <descr>
          <p>
            Calls <var>Changed</var>  to update the current column instance in the <var>Columns</var> collection. The internal flag used to track changes to the column width is reset after updating the collection item.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.AllColumnsChange">
        <short>
          <var>AllColumnsChange</var> - method for processing a change in all columns
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.CreateTitle">
        <short>
          Creates a column title used for the grid column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.CreateTitle.Result">
        <short>TGridColumnTitle instance created in the method</short>
      </element>

      <element name="TGridColumn.IsDefaultFont">
        <short>
          Indicates if the default font is in use for the grid column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Create">
        <short>Constructor for the class instance</short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TGridColumn</var>. Create calls the  inherited <var>Create</var> method using <var>ACollection</var> as the owner for the collection item.
          </p>
          <p>
            Create allocates resources needed for members in the class instance, and sets the default values for properties such as: <var>Title</var>, <var>Font</var>, <var>IsDefaultFont</var>, <var>ButtonStyle</var> and <var>DropDownRows</var>.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
          <link id="TGridColumn.Title"/>
          <link id="TGridColumn.Font"/>
          <link id="TGridColumn.IsDefaultFont"/>
          <link id="TGridColumn.ButtonStyle"/>
          <link id="TGridColumn.DropDownRows"/>
        </seealso>
      </element>
      <element name="TGridColumn.Create.ACollection">
        <short>Collection which owns the collection item</short>
      </element>

      <element name="TGridColumn.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TGridColumn</var>: disposes of various local variables, frees picklist, font and title, then calls inherited <var>Destroy</var>
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the overridden destructor for the class instance. Destroy ensures that resources allocated for members in the class instance are freed (when needed), including:
          </p>
          <ul>
            <li>Alignment</li>
            <li>Color</li>
            <li>Visible</li>
            <li>ReadOnly</li>
            <li>Width</li>
            <li>Layout</li>
            <li>MaxSize</li>
            <li>SizePriority</li>
            <li>MinSize</li>
            <li>ValueChecked</li>
            <li>ValueUnchecked</li>
            <li>PickList</li>
            <li>Font</li>
            <li>Title</li>
          </ul>
          <p>
            Destroy calls the inherited destructor prior to exiting from the method.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TCollectionItem.Destroy"/>
        </seealso>
      </element>

      <element name="TGridColumn.FillDefaultFont">
        <short>
          <var>FillDefaultFont</var> - method to fill all cells in the column with the default font
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.FixDesignFontsPPI">
        <short></short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is a procedure used to...
          </p>
        </descr>
        <seealso></seealso>
        <notes><note>TODO</note></notes>
      </element>
      <element name="TGridColumn.FixDesignFontsPPI.ADesignTime">
        <short></short>
      </element>

      <element name="TGridColumn.ScaleFontsPPI">
        <short></short>
        <descr>
          <p>
            <var>ScaleFontsPPI</var> is an overridden procedure used to...
          </p>
        </descr>
        <seealso></seealso>
        <notes><note>TODO</note></notes>
      </element>
      <element name="TGridColumn.ScaleFontsPPI.AToPPI">
        <short></short>
      </element>
      <element name="TGridColumn.ScaleFontsPPI.AProportion">
        <short></short>
      </element>

      <element name="TGridColumn.IsDefault">
        <short>
          True if the column is the default column in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumn.IsDefault.Result">
        <short></short>
      </element>

      <element name="TGridColumn.Grid">
        <short>The <var>Grid</var> to which this column belongs</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.WidthChanged">
        <short>
          True when the width for the column has been changed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Alignment">
        <short>
          <var>Alignment</var> - whether justified, centered, etc
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.ButtonStyle">
        <short>
          <var>ButtonStyle</var> - the style of any column button
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Color">
        <short>Color used for the column</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.DropDownRows">
        <short>
          <var>DropDownRows</var> - the number of rows in the drop-down list
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Expanded">
        <short>
          Whether the column has been <var>Expanded</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Font">
        <short>The <var>Font</var> for the column</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Layout">
        <short>The <var>Layout</var> for text</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.MinSize">
        <short>
          <var>MinSize</var> - the minimum size
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.MaxSize">
        <short>
          <var>MaxSize</var> - the maximum size
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.PickList">
        <short>
          <var>PickList</var> - the list of items selected from this column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.ReadOnly">
        <short>
          <var>ReadOnly</var> - if True, only reading (not writing) is allowed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.SizePriority">
        <short>
          <var>SizePriority</var> - the value of the size priority in the sorted order
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Title">
        <short>The <var>Title</var> for the column</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Width">
        <short>The <var>Width</var> of the column</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.Visible">
        <short>
          <var>Visible</var> - if True, the column can be seen (i.e. not hidden)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumn.GetValueChecked">
        <short>
          <var>GetValueChecked</var> - returns a checked value as a string
        </short>
      </element>

      <element name="TGridColumn.GetValueUnchecked">
        <short>
          <var>GetValueUnchecked</var> - returns an unchecked value as a string
        </short>
      </element>

      <element name="TGridColumn.ValueChecked">
        <short>
          <var>ValueChecked</var> - a string value of a checked item
        </short>
      </element>

      <element name="TGridColumn.ValueUnchecked">
        <short>
          <var>ValueUnchecked</var> - a string value of an unchecked item
        </short>
      </element>

      <element name="TGridColumn.GetDefaultValueUnchecked">
        <short>
          <var>GetDefaultValueUnchecked</var> - returns the default value for an unchecked column
        </short>
      </element>

      <element name="TGridPropertyBackup">
        <short>
          Stores data about rows and columns used in a TCustomGrid class instance
        </short>
        <descr>
          TGridPropertyBackup is a record type used to store data about rows and columns, including fixed cells, used in a TCustomGrid class instance.
        </descr>
        <seealso>
          <link id="TCustomGrid"/>
        </seealso>
      </element>

      <element name="TGridPropertyBackup.ValidData">
        <short>
          Indicates if the grid contains valid row or column counts
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridPropertyBackup.FixedRowCount">
        <short>Number of fixed rows in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridPropertyBackup.FixedColCount">
        <short>Number of fixed columns in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridPropertyBackup.RowCount">
        <short>Number of rows in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridPropertyBackup.ColCount">
        <short>Number of columns in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumns">
        <short>Collection used to store column definitions for a grid control</short>
        <descr>
          <p>
            <var>TGridColumns</var> is a <var>TCollection</var> descendant that implements a container for column definitions used in <var>TCustomGrid</var> and descendent classes. TGridColumns is the type used to implement the Columns in TCustomGrid.
          </p>
          <p>
            TGridColumns is used to create, access, and maintain <var>TGridColumn</var> class instances representing the columns in a grid. Use the indexed <var>Items</var> to access a <var>TGridColumn</var> instance in the collection using its ordinal position.
          </p>
          <p>
            Additional properties and methods are included in the collection that are relevant to their use with grid column definitions. A reference to the <var>TCustomGrid</var> which owns the collection is maintained to provide access to the properties, methods, and events in the grid.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumn"/>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>

      <element name="TGridColumns.FGrid"/>

      <element name="TGridColumns.GetColumn">
        <short>Gets the value for the indexed Items property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.GetColumn.Result">
        <short>Collection the collection item at the specified position</short>
      </element>
      <element name="TGridColumns.GetColumn.Index">
        <short>Ordinal position for the requested collection item</short>
      </element>

      <element name="TGridColumns.GetEnabled">
        <short>Gets the value in the Enabled property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.GetEnabled.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumns.SetColumn">
        <short>Sets the item at the specified position in the Items property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.SetColumn.Index">
        <short>Ordinal position for the collection item updated in the method</short>
      </element>
      <element name="TGridColumns.SetColumn.Value">
        <short>Value stored at the specified position in the collection</short>
      </element>

      <element name="TGridColumns.GetVisibleCount">
        <short>Gets the value for the VisibleCount property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.GetVisibleCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TGridColumns.Update" link="#rtl.classes.TCollection.Update">
        <short>Notifies the Grid using the collection when a column is updated</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.Update.Item">
        <short>Collection item requiring the update notification</short>
      </element>

      <element name="TGridColumns.TitleFontChanged">
        <short>
          Performs action needed when the title font is changed for items in the collection
        </short>
        <descr>
          <p>
            <var>TitleFontChanged</var> is a procedure used to perform actions needed when the title font for a grid has been changed. TitleFontChanged examines each of the column definitions in the collection, and updates the default font for the column when it has not been set to another value. TitleFontChanged is called during execution of the <var>OnTitleFontChanged</var> event handler in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TGridColumnTitle.Font"/>
          <link id="TGridColumnTitle.IsDefault"/>
        </seealso>
      </element>

      <element name="TGridColumns.FontChanged">
        <short>
          Performs actions needed when the Font for the grid control is changed
        </short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method used to perform actions needed when the <var>Font</var> for the grid control has been changed.
          </p>
          <p>
            FontChanged ensures that the font used for the <var>Canvas</var> is updated to use the value in Font when <var>csCustomPaint</var> is included in the <var>ControlState</var> flags.
          </p>
          <p>
            Otherwise, the inherited method is called to signal the change in the Font property. The FontChanged method in the Columns collection is also called (when enabled). The new Font is assigned to <var>TitleFont</var> and <var>TitleFontIsDefault</var> is reset to <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TCustomGrid.TitleFontIsDefault"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn.FontChanged"/>
          <link id="#lcl.controls.TCustomControl.FontChanged"/>
          <link id="#lcl.controls.TControl.ControlState"/>
          <link id="#lcl.controls.TControl.Font"/>
        </seealso>
      </element>

      <element name="TGridColumns.RemoveColumn">
        <short>
          <var>RemoveColumn</var> - method to remove the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.RemoveColumn.Index">
        <short>Ordinal position of the column to remove in the method</short>
      </element>

      <element name="TGridColumns.MoveColumn">
        <short>
          <var>MoveColumn</var> from the first index to the second
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.MoveColumn.FromIndex">
        <short>Original position for the column moved in the method</short>
      </element>
      <element name="TGridColumns.MoveColumn.ToIndex">
        <short>New position for the column moved in the method</short>
      </element>

      <element name="TGridColumns.ExchangeColumn">
        <short>
          <var>ExchangeColumn</var> - exchange the position of the current column with the specified other column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.ExchangeColumn.Index">
        <short>Position of a column exchanged in the method</short>
      </element>
      <element name="TGridColumns.ExchangeColumn.WithIndex">
        <short>Position of the other column exchanged in the method</short>
      </element>

      <element name="TGridColumns.InsertColumn">
        <short>
          <var>InsertColumn</var> with the specified index
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.InsertColumn.Index">
        <short>Position in the collection where the column is inserted</short>
      </element>

      <element name="TGridColumns.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for the class instance, and calls the inherited method on entry using <var>aItemClass</var> as the class type for new items added to the collection. Create stores the value in <var>AGrid</var> to the <var>Grid</var> property.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Create"/>
        </seealso>
      </element>
      <element name="TGridColumns.Create.AGrid">
        <short>Grid which owns the collection of column definitions</short>
      </element>
      <element name="TGridColumns.Create.aItemClass">
        <short>Class reference used to create new items in the collection</short>
      </element>

      <element name="TGridColumns.Add" link="#rtl.classes.TCollection.Add"/>
      <element name="TGridColumns.Add.Result">
        <short>TGridColumn instance added to the collection</short>
      </element>

      <element name="TGridColumns.Clear">
        <short>Clears all items in the collection</short>
        <descr>
          <p>
            <var>Clear</var> calls <var>BeginUpdate</var> to suppress notifications when items are removed from the collection. It also calls <var>EndUpdate</var> when all items have been removed in the method. Clear calls the inherited method to remove the items in the collection.
          </p>
        </descr>
        <seealso>
          <link id="#rtl.classes.TCollection.Clear"/>
        </seealso>
      </element>

      <element name="TGridColumns.RealIndex">
        <short>
          <var>RealIndex</var> - the proper index for this column
        </short>
        <descr>
          Real in this sense means proper or correct, not a Real number (as it is specified as an integer)
        </descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.RealIndex.Result">
        <short></short>
      </element>
      <element name="TGridColumns.RealIndex.Index">
        <short></short>
      </element>

      <element name="TGridColumns.IndexOf">
        <short>
          Gets the ordinal position in the collection for the specified item
        </short>
        <descr>
          <p>
            <var>IndexOf</var> is an <var>Integer</var> function used to get the ordinal position in the collection for the <var>TGridColumn</var> instance specified in <var>Column</var>. The return value contains the ordinal position (in the range <b>0</b> to <b>Count-1</b>), or <b>-1</b> when no items exist in the collection or when <var>Column</var> cannot be located in the container.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Items"/>
          <link id="TGridColumn"/>
          <link id="#RTL.Classes.TCollection.Count"/>
        </seealso>
      </element>
      <element name="TGridColumns.IndexOf.Result">
        <short>Ordinal position for the collection item, or -1 when not found</short>
      </element>
      <element name="TGridColumns.IndexOf.Column">
        <short>Grid column to locate in the collection</short>
      </element>

      <element name="TGridColumns.IsDefault">
        <short>
          <var>IsDefault</var> returns True if this is the default column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.IsDefault.Result">
        <short></short>
      </element>

      <element name="TGridColumns.HasIndex">
        <short>
          <var>HasIndex</var> - returns True if the current column has an index value
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.HasIndex.Result">
        <short></short>
      </element>
      <element name="TGridColumns.HasIndex.Index">
        <short></short>
      </element>

      <element name="TGridColumns.VisibleIndex">
        <short>
          <var>VisibleIndex</var> - the index value of a visible column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGridColumns.VisibleIndex.Result">
        <short></short>
      </element>
      <element name="TGridColumns.VisibleIndex.Index">
        <short></short>
      </element>

      <element name="TGridColumns.Grid">
        <short>
          The <var>Grid</var> to which the current collection of columns belongs
        </short>
        <descr>
          <p>
            <var>Grid</var> is a read-only <var>TCustomGrid</var> which provides access to the grid which owns the column collection. The value in Grid is set in the constructor to an argument passed to the method, and used as the value for the <var>Owner</var> property.
          </p>
          <p>
            Grid can be used to access the properties, methods, and events in the grid class instance. It is used in the implementation of methods in the collection, such as <var>InsertColumn</var> and <var>Update</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CreateColumns"/>
          <link id="TGridColumns.InsertColumn"/>
          <link id="TCustomGrid.ColumnsChanged"/>
          <link id="#rtl.classes.TCollection.Owner"/>
        </seealso>
      </element>

      <element name="TGridColumns.Items">
        <short>
          Provides indexed access to column definitions in the collection
        </short>
        <descr>
          <p>
            <var>Items</var> is an indexed <var>TGridColumn</var> used to access column definitions in the collection by the ordinal position specified in the <var>Index</var> argument. Items is the default for the collection.
          </p>
          <p>
            Use <var>Add</var> to create and store a new instance of <var>TGridColumn</var> in the collection.
          </p>
          <p>
            Use <var>InsertColumn</var> to create and store a new collection item at a specific position in the collection.
          </p>
          <p>
            Use <var>RemoveColumn</var>, <var>Delete</var> or <var>Clear</var> to remove one or all item(s) in the collection.
          </p>
          <p>
            Use <var>IndexOf</var> to get the ordinal position in the collection for an existing <var>TGridColumn</var> class instance.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns.Clear"/>
          <link id="TGridColumns.IndexOf"/>
          <link id="TGridColumns.Add"/>
          <link id="TGridColumns.InsertColumn"/>
          <link id="TGridColumns.RemoveColumn"/>
          <link id="#RTL.Classes.TCollection.Delete"/>
        </seealso>
      </element>
      <element name="TGridColumns.Items.Index">
        <short>Ordinal position for the column definition used as the value</short>
      </element>

      <element name="TGridColumns.VisibleCount">
        <short>
          <var>VisibleCount</var> - the number of visible columns
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridColumns.Enabled">
        <short>
          If True, the columns are <var>Enabled</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridCoord">
        <short>Stores mouse coordinates in screen pixels</short>
        <descr>
          <p>
            <var>TGridCoordinate</var> is an alias for the <var>TPoint</var> type, and used to capture mouse coordinates in <var>TCustomGrid</var> and descendent classes. The <var>X</var> and <var>Y</var> coordinates refer to screen pixels, and are derived from the row and column numbers for the corresponding cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MouseCoord"/>
          <link id="TCustomGrid.MouseToCell"/>
        </seealso>
      </element>

      <element name="TGridRect">
        <short>Alias for the TRect type in RTL</short>
        <descr>
          <p>
            <var>TGridRect</var> is an alias for the <var>TRect</var> type in the FPC Run-time Library (RTL).
          </p>
        </descr>
        <seealso>
          <link id="TGridRectArray"/>
          <link id="#rtl.types.TRect"/>
        </seealso>
      </element>

      <element name="TGridRectArray">
        <short>Array type used to store TGridRect instances</short>
        <descr>
          <p>
            <var>TGridRectArray</var> is an array type used to store <var>TGridRect</var> instances. It is used to track cell selection ranges in a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridRect"/>
          <link id="TCustomGrid.SelectedRange"/>
          <link id="TCustomGrid.SelectedRangeCount"/>
        </seealso>
      </element>

      <element name="TSizingRec">
        <short>
          Stores size and movement data for columns or rows in a grid
        </short>
        <descr>
          <p>
            <var>TSizingRec</var> is a record type used to store size and movement information for columns or rows in TCustomGrid and descendent classes. TSizingRec is the type used for an internal member in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TCustomGrid.DblClick"/>
        </seealso>
      </element>
      <element name="TSizingRec.Index">
        <short></short>
      </element>
      <element name="TSizingRec.OffIni">
        <short></short>
      </element>
      <element name="TSizingRec.OffEnd">
        <short></short>
      </element>
      <element name="TSizingRec.DeltaOff">
        <short></short>
      </element>
      <element name="TSizingRec.PrevLine">
        <short></short>
      </element>
      <element name="TSizingRec.PrevOffset">
        <short></short>
      </element>

      <element name="TGridDataCache">
        <short>
          Stores cache information about a grid control
        </short>
        <descr>
          <p>
            <var>TGridDataCache</var> is a record type used to store and cache information about a grid control, its layout, and activity. TGridDataCache is the type used to implement the <var>GCache</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
        </seealso>
      </element>

      <element name="TGridDataCache.FixedWidth">
        <short>
          Sum of the column widths for fixed cells in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.FixedHeight">
        <short>
          Sum of the row heights for fixed cells in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.GridWidth">
        <short>
          Sum of the column widths for all cells in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.GridHeight">
        <short>
          Sum of the row heights for all cells in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ClientWidth">
        <short>
          Width of the grid control minus the width for the vertical scrollbar
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ClientHeight">
        <short>
          Height of the grid control minus the width of the horizontal scrollbar
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ScrollWidth">
        <short>
          The difference between ClientWidth and FixedWidth
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ScrollHeight">
        <short>
          The difference between ClientHeight and FixedHeight
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.HScrollBarNetRange">
        <short>
          Difference between the scrollbar range and the grid page
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.VisibleGrid">
        <short>
          Visible non-fixed cell coordinates rectangle
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.MaxClientXY">
        <short>
          Bottom/Right coordinates in (pixels) for the visible parts of a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ValidRows">
        <short>
          True when there are no fixed columns to display in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ValidCols">
        <short>
          True when there are no fixed rows to display in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ValidGrid">
        <short>
          True when there are no fixed cells for columns or rows in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.AccumWidth">
        <short>
          Cumulative preceeding width per grid column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.AccumHeight">
        <short>
          Cumulative preceeding height per grid row
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.TLColOff">
        <short>
          Offset in pixels for the Top/Left column in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.TLRowOff">
        <short>
          Offset in pixels for the Top/Left row in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.MaxTopLeft">
        <short>Cell coordinates for the last cell that can be used as the grid visual origin</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.MaxTLOffset">
        <short>Max Top left offset for the last cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.HotCell">
        <short>The current "hot" cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.HotCellPainted">
        <short>True if the current "hot" cell has already been painted</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.HotGridZone">
        <short>GridZone for the last MouseMove</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ClickCell">
        <short>Cell coordinates for the last mouse click event</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ClickMouse">
        <short>Mouse coordinates for the last mouse click event</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.PushedCell">
        <short>Cell coordinates for the cell drawn in the pushed state</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.PushedMouse">
        <short>Mouse Coordinates for the cell drawn in the pushed state</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.ClickCellPushed">
        <short>Indicates if the header cell is currently drawn in the pushed state</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.FullVisibleGrid">
        <short>
          Visible cells excluding partially visible cells
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.MouseCell">
        <short>Cell which contains the mouse pointer</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridDataCache.OldMaxTopLeft">
        <short>Previous MaxTopleft (before column sizing)</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TGridCursorState">
        <short>Enumerated type with cursors available in a grid</short>
        <descr>
          <p>
            <var>TGridCursorState</var> is the type used for the <var>CursorState</var> property in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CursorState"/>
        </seealso>
      </element>
      <element name="TGridCursorState.gcsDefault">
        <short>Normal cursor shape/style</short>
      </element>
      <element name="TGridCursorState.gcsColWidthChanging">
        <short>Cursor displayed when changing the size of a column</short>
      </element>
      <element name="TGridCursorState.gcsRowHeightChanging">
        <short>Cursor displayed when resizing the height of a row</short>
      </element>
      <element name="TGridCursorState.gcsDragging">
        <short>Cursor displayed when dragging a row or column</short>
      </element>

      <element name="TCustomGrid">
        <short>
          Implements the base class for grid controls
        </short>
        <descr>
          <p>
            A grid is a collection of cells that are organized in columns and rows. Grids are suitable for showing data that using a tabular layout. For example: tables in a database, or formulae and data in a spreadsheet.
          </p>
          <p>
            <b>Key properties:</b>
          </p>
          <p>
            The <link id="TCustomGrid.ColCount">ColCount</link> and  <link id="TCustomGrid.RowCount">RowCount</link> properties contain the column and row count of the grid.
          </p>
          <p>
            The <link id="TCustomGrid.FixedCols">FixedCols</link> and <link id="TCustomGrid.FixedRows">FixedRows</link> properties specify the count of fixed columns or rows that are used for headings.
          </p>
          <p>
            The column widths and row heights of the grid are accessible with the <link id="TCustomGrid.ColWidths">ColWidths</link> and <link id="TCustomGrid.RowHeights">RowHeights</link> properties.
          </p>
          <p>
            The <link id="TCustomGrid.DefaultColWidth">DefaultColWidth</link> and <link id="TCustomGrid.DefaultRowHeight">DefaultRowHeight</link> properties are used to specify default column widths or row heights respectively.
          </p>
          <p>
            The colors of the cells and the grid elements are specified with the <link id="TCustomGrid.AlternateColor">AlternateColor</link>, <link id="TCustomGrid.BorderColor">BorderColor</link>, <link id="TCustomGrid.FixedColor">FixedColor</link>, <link id="TCustomGrid.FixedHotColor">FixedHotColor</link>, <link id="TCustomGrid.FocusColor">FocusColor</link>, <link id="TCustomGrid.GridLineColor">GridLineColor</link> and <link id="TCustomGrid.SelectedColor">SelectedColor</link>   properties. The <link id="TCustomGrid.GridWidth">GridWidth</link> and <link id="TCustomGrid.GridHeight">GridHeight</link> properties contain the dimension of the entire grid.
          </p>
          <p>
            The <link id="TCustomGrid.ScrollBars">ScrollBars</link> controls the creation of scrollbars for the grid.
          </p>
          <p>
            The <link id="TCustomGrid.LeftCol">LeftCol</link>, <link id="TCustomGrid.TopRow">TopRow</link>, <link id="TCustomGrid.VisibleColCount">VisibleColCount</link> and <link id="TCustomGrid.VisibleRowCount">VisibleRowCount</link> properties contain information about the visible area of the grid.
          </p>
          <p>
            The <link id="TCustomGrid.Options">Options</link> controls options for the grid.
          </p>
          <p>
            <b>Key methods and events:</b>
          </p>
          <p>
            If the user highlights a cell of the grid, the <link id="TCustomGrid.SelectCell">SelectCell</link> method is called that triggers the OnSelectCell event. The position of the highlighted cell is stored within the <link id="TCustomGrid.Col">Col</link> and <link id="TCustomGrid.Row">Row</link> property.
          </p>
          <p>
            The <link id="TCustomGrid.MouseToCell">MouseToCell</link> method calculates a grid cell from a given screen position.
          </p>
          <p>
            Huge changes to the grid should be encapsulated in calls to <link id="TCustomGrid.BeginUpdate">BeginUpdate</link> and <link id="TCustomGrid.EndUpdate">EndUpdate</link> to speed up the application.
          </p>
          <p>
            Component developers must override the <link id="TCustomGrid.DrawCell">DrawCell</link> method in customized grids.
          </p>
        </descr>
        <seealso>
          <link id="TStringGrid"/>
          <link id="TDrawGrid"/>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FAlternateColor"/>
      <element name="TCustomGrid.FAutoAdvance"/>
      <element name="TCustomGrid.FAutoEdit"/>
      <element name="TCustomGrid.FAutoFillColumns"/>
      <element name="TCustomGrid.FBorderColor"/>
      <element name="TCustomGrid.FDefaultDrawing"/>
      <element name="TCustomGrid.FEditor"/>
      <element name="TCustomGrid.FEditorHidingCount"/>
      <element name="TCustomGrid.FEditorMode"/>
      <element name="TCustomGrid.FEditorOldValue"/>
      <element name="TCustomGrid.FEditorShowing"/>
      <element name="TCustomGrid.FEditorKey"/>
      <element name="TCustomGrid.FEditorOptions"/>
      <element name="TCustomGrid.FExtendedSelect"/>
      <element name="TCustomGrid.FFastEditing"/>
      <element name="TCustomGrid.FAltColorStartNormal"/>
      <element name="TCustomGrid.FFlat"/>
      <element name="TCustomGrid.FOnAfterSelection"/>
      <element name="TCustomGrid.FOnLoadColumn"/>
      <element name="TCustomGrid.FOnSaveColumn"/>
      <element name="TCustomGrid.FRangeSelectMode"/>
      <element name="TCustomGrid.FSelections"/>
      <element name="TCustomGrid.FOnUserCheckboxBitmap"/>
      <element name="TCustomGrid.FOnUserCheckboxImage"/>
      <element name="TCustomGrid.FSortOrder"/>
      <element name="TCustomGrid.FSortColumn"/>
      <element name="TCustomGrid.FSortLCLImages"/>
      <element name="TCustomGrid.FTabAdvance"/>
      <element name="TCustomGrid.FTitleImageList"/>
      <element name="TCustomGrid.FTitleImageListWidth"/>
      <element name="TCustomGrid.FTitleStyle"/>
      <element name="TCustomGrid.FAscImgInd"/>
      <element name="TCustomGrid.FDescImgInd"/>
      <element name="TCustomGrid.FOnCompareCells"/>
      <element name="TCustomGrid.FGridLineStyle"/>
      <element name="TCustomGrid.FGridLineWidth"/>
      <element name="TCustomGrid.FDefColWidth"/>
      <element name="TCustomGrid.FDefRowHeight"/>
      <element name="TCustomGrid.FRealizedDefColWidth"/>
      <element name="TCustomGrid.FRealizedDefRowHeight"/>
      <element name="TCustomGrid.FCol"/>
      <element name="TCustomGrid.FRow"/>
      <element name="TCustomGrid.FFixedCols"/>
      <element name="TCustomGrid.FFixedRows"/>
      <element name="TCustomGrid.FOnEditButtonClick"/>
      <element name="TCustomGrid.FOnButtonClick"/>
      <element name="TCustomGrid.FOnPickListSelect"/>
      <element name="TCustomGrid.FOnCheckboxToggled"/>
      <element name="TCustomGrid.FOnPrepareCanvas"/>
      <element name="TCustomGrid.FOnSelectEditor"/>
      <element name="TCustomGrid.FOnValidateEntry"/>
      <element name="TCustomGrid.FGridLineColor"/>
      <element name="TCustomGrid.FFixedGridLineColor"/>
      <element name="TCustomGrid.FFixedColor"/>
      <element name="TCustomGrid.FFixedHotColor"/>
      <element name="TCustomGrid.FFocusColor"/>
      <element name="TCustomGrid.FSelectedColor"/>
      <element name="TCustomGrid.FDisabledFontColor"/>
      <element name="TCustomGrid.FFocusRectVisible"/>
      <element name="TCustomGrid.FCols"/>
      <element name="TCustomGrid.FRows"/>
      <element name="TCustomGrid.FSaveOptions"/>
      <element name="TCustomGrid.FScrollBars"/>
      <element name="TCustomGrid.FSelectActive"/>
      <element name="TCustomGrid.FTopLeft"/>
      <element name="TCustomGrid.FPivot"/>
      <element name="TCustomGrid.FRange"/>
      <element name="TCustomGrid.FDragDx"/>
      <element name="TCustomGrid.FMoveLast"/>
      <element name="TCustomGrid.FUpdateCount"/>
      <element name="TCustomGrid.FGCache"/>
      <element name="TCustomGrid.FOptions"/>
      <element name="TCustomGrid.FOptions2"/>
      <element name="TCustomGrid.FOnDrawCell"/>
      <element name="TCustomGrid.FOnBeforeSelection"/>
      <element name="TCustomGrid.FOnSelection"/>
      <element name="TCustomGrid.FOnTopLeftChanged"/>
      <element name="TCustomGrid.FUseXORFeatures"/>
      <element name="TCustomGrid.FValidateOnSetSelection"/>
      <element name="TCustomGrid.FVSbVisible"/>
      <element name="TCustomGrid.FHSbVisible"/>
      <element name="TCustomGrid.FDefaultTextStyle"/>
      <element name="TCustomGrid.FLastWidth"/>
      <element name="TCustomGrid.FTitleFont"/>
      <element name="TCustomGrid.FLastFont"/>
      <element name="TCustomGrid.FTitleFontIsDefault"/>
      <element name="TCustomGrid.FColumns"/>
      <element name="TCustomGrid.FButtonEditor"/>
      <element name="TCustomGrid.FStringEditor"/>
      <element name="TCustomGrid.FButtonStringEditor"/>
      <element name="TCustomGrid.FPickListEditor"/>
      <element name="TCustomGrid.FExtendedColSizing"/>
      <element name="TCustomGrid.FExtendedRowSizing"/>
      <element name="TCustomGrid.FUpdatingAutoFillCols"/>
      <element name="TCustomGrid.FGridBorderStyle"/>
      <element name="TCustomGrid.FGridFlags"/>
      <element name="TCustomGrid.FGridPropBackup"/>
      <element name="TCustomGrid.FStrictSort"/>
      <element name="TCustomGrid.FIgnoreClick"/>
      <element name="TCustomGrid.FAllowOutboundEvents"/>
      <element name="TCustomGrid.FColumnClickSorts"/>
      <element name="TCustomGrid.FHeaderHotZones"/>
      <element name="TCustomGrid.FHeaderPushZones"/>
      <element name="TCustomGrid.FCursorChangeLock"/>
      <element name="TCustomGrid.FCursorState"/>
      <element name="TCustomGrid.FColRowDragIndicatorColor"/>
      <element name="TCustomGrid.FSavedCursor"/>
      <element name="TCustomGrid.FSpecialCursors"/>
      <element name="TCustomGrid.FSizing"/>
      <element name="TCustomGrid.FRowAutoInserted"/>
      <element name="TCustomGrid.FMouseWheelOption"/>
      <element name="TCustomGrid.FSavedHint"/>
      <element name="TCustomGrid.FCellHintPriority"/>
      <element name="TCustomGrid.FOnGetCellHint"/>

      <element name="TCustomGrid.AdjustCount">
        <short>Adjusts a row or column count</short>
        <descr>
          <p>
            <var>AdjustCount</var> is a procedure used to adjust the row or column count for the grid, and to update properties and cache information for the grid.
          </p>
          <p>
            <var>IsColumn</var> indicates if the <var>OldValue</var> and <var>NewValue</var> arguments refer to the column or row count for the grid; when IsColumn is <b>True</b>, the values refer to the column count.
          </p>
          <p>
            <var>OldValue</var> contains the previous row or column count in the grid.
          </p>
          <p>
            <var>NewValue</var> contains the row or column count on exit from the method.
          </p>
          <p>
            AdjustCount is called when the value in the <var>RowCount</var> or <var>ColCount</var> is changed. It calls the <var>UpdateCachedSizes</var> and <var>SizeChanged</var> methods. It may also call <var>FixPos</var> when NewValue causes the row or column to be out of range for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.SetColCount"/>
          <link id="TCustomGrid.InternalSetColCount"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.SetRowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustCount.IsColumn">
        <short>True when the count values are for a columns instead of rows</short>
      </element>
      <element name="TCustomGrid.AdjustCount.OldValue">
        <short>Count value before adjustment</short>
      </element>
      <element name="TCustomGrid.AdjustCount.NewValue">
        <short>Count value after adjustment</short>
      </element>

      <element name="TCustomGrid.CacheVisibleGrid">
        <short>
          Stores information about visible parts of the grid (excluding fixed cells) in the grid cache
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridDataCache"/>
          <link id="TCustomGrid.ScrollBy"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TCustomGrid.ResetSizes"/>
          <link id="TCustomGrid.ResetOffset"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CancelSelection">
        <short>Removes the active range selection for the grid</short>
        <descr>
          <p>
            Ensures that a selection range is re-created for the current cell, or the current row when <var>goRowSelect</var> is included in the <var>Options</var> for the grid. The value in <var>SelectActive</var> is set to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.SelectActive"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CheckFixedCount">
        <short>Ensures that column and row numbers for fixed cells are valid</short>
        <descr></descr>
        <errors>
          Raises an EGridException if values in column or row numbers for fixed cells contain negative values, or are not in range for the grid control.
        </errors>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aCol">
        <short>Column number examined in the method</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aRow">
        <short>Row number examined in the method</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aFCol">
        <short>Fixed column number examined in the method</short>
      </element>
      <element name="TCustomGrid.CheckFixedCount.aFRow">
        <short>Fixed row number examined in the method</short>
      </element>

      <element name="TCustomGrid.CheckCount">
        <short>
          Ensures that a handle has been allocated for the grid before updates to column or row counts
        </short>
        <descr>
          <p>
            Ensures that a handle has been allocated for the grid prior to actions that affect the row or column count.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckCount.aNewColCount">
        <short>New column count for the control</short>
      </element>
      <element name="TCustomGrid.CheckCount.aNewRowCount">
        <short>New row count for the control</short>
      </element>

      <element name="TCustomGrid.CheckIndex">
        <short>Ensures a row or column index is not out of range</short>
        <descr>
          <p>
            <var>CheckIndex</var> is a procedure used to ensure that an index value is within the range of values allowed for a row or column.
          </p>
          <p>
            <var>IsColumn</var> indicates whether a row or column index is being checked. When set to <b>True</b>, a column index is verified. When set to <b>False</b>, a row index is examined.
          </p>
          <p>
            <var>IsColumnIndexValid</var> or <var>IsRowIndexValid</var> is called to validate the value in <var>Index</var>. An <var>EGridException</var> exception is raised when Index in not allowed for the corresponding dimension.
          </p>
          <p>
            CheckIndex is called from methods like <var>Sort</var>, <var>DoOPMoveColRow</var>, and <var>DoOPDeleteColRow</var>.
          </p>
        </descr>
        <errors>
          Raises an EGridException exception with the message in rsGridIndexOutOfRange when Index is not valid for the row or column.
        </errors>
        <seealso>
          <link id="TCustomGrid.IsColumnIndexValid"/>
          <link id="TCustomGrid.IsRowIndexValid"/>
          <link id="TCustomGrid.Sort"/>
          <link id="TCustomGrid.DoOPMoveColRow"/>
          <link id="TCustomGrid.DoOPDeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CheckIndex.IsColumn">
        <short>True when the Index is for a column; False when it is for a Row</short>
      </element>
      <element name="TCustomGrid.CheckIndex.Index">
        <short>Column index examined in the method</short>
      </element>

      <element name="TCustomGrid.CheckTopLeft">
        <short>
          Determines whether the top left visible cell needs to change to match cached grid information
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckTopLeft.Result">
        <short>True when the top left cell is changed</short>
      </element>
      <element name="TCustomGrid.CheckTopLeft.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.CheckTopLeft.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.CheckTopLeft.CheckCols">
        <short></short>
      </element>
      <element name="TCustomGrid.CheckTopLeft.CheckRows">
        <short></short>
      </element>

      <element name="TCustomGrid.GetQuickColRow">
        <short>Gets the value for the ColRow property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetQuickColRow.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.SetQuickColRow">
        <short>Sets the value for the ColRow property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetQuickColRow.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.IsCellButtonColumn">
        <short>
          Indicates if the specified cell is a non-fixed cell using a button-style column editor
        </short>
        <descr></descr>
        <seealso>
          <link id="TGridColumn.ButtonStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsCellButtonColumn.Result">
        <short>True when the column exists and uses a button-style editor</short>
      </element>
      <element name="TCustomGrid.IsCellButtonColumn.ACell">
        <short>TPoint instance with the column and row numbers for the cell</short>
      </element>

      <element name="TCustomGrid.GetSelectedColumn" link="#lcl.grids.TCustomGrid.SelectedColumn">
        <short>Gets the value for the SelectedColumn property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SelectedColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedColumn.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.SetAlternateColor">
        <short>Sets the value in the AlternateColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.AlternateColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAlternateColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetAutoFillColumns">
        <short>Sets the value in the AutoFillColumns property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.AutoFillColumns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAutoFillColumns.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetBorderColor">
        <short>Sets the value for the BorderColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.BorderColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetBorderColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColumnClickSorts">
        <short>Sets the value for the ColumnClickSorts property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColumnClickSorts"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColumnClickSorts.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColumns">
        <short>Sets the value for the Columns property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColumns.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetEditorOptions">
        <short>Sets the value for the EditorOptions property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.EditorOptions"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditorOptions.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetEditorBorderStyle">
        <short>Sets the value for the EditorBorderStyle property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.EditorBorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditorBorderStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetAltColorStartNormal">
        <short>Sets the value for the AltColorStartNormal property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.AltColorStartNormal"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetAltColorStartNormal.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFlat">
        <short>Sets the value for the Flat property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Flat"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFlat.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFocusRectVisible">
        <short>Sets the value for the FocusRectVisible property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.FocusRectVisible"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFocusRectVisible.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetTitleImageList">
        <short>Sets the value for the TitleImageList property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TitleImageList"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleImageList.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetTitleImageListWidth">
        <short>Sets the value for the TitleImageListWidth property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TitleImageListWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleImageListWidth.aTitleImageListWidth">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetTitleFont">
        <short>Sets the value for the TitleFont property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TitleFont"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleFont.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetTitleStyle">
        <short>Sets the value for the TitleStyle property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TitleStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTitleStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetUseXorFeatures">
        <short>Sets the value for the UseXorFeatures property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.UseXorFeatures"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetUseXorFeatures.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.doColSizing">
        <short>Performs actions needed when a column in the grid is resized</short>
        <descr>
          <p>
            <var>doColSizing</var> is a <var>Boolean</var> function used to perform actions needed when a column in the grid is resized. <var>X</var> and <var>Y</var> contain the mouse coordinates where the action was initiated. The return value contains <b>True</b> when the resizing operation is successfully completed.
          </p>
          <p>
            No actions are performed in doColSizing if the GridState member contains any value other than <var>gsColSizing</var>. The GridFlags member is updated to include the value <var>gfSizingStarted</var>, and the <var>ResizeColumn</var> and <var>HeaderSizing</var> methods are called to reflect the altered column size.
          </p>
        </descr>
        <seealso>
          <link ied="TCustomGrid.Options"/>
          <link id="TGridOptions.goColSizing"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TGridFlagsOption.gfSizingStarted"/>
          <link id="TGridFlags"/>
        </seealso>
      </element>
      <element name="TCustomGrid.doColSizing.Result">
        <short>True when column resizing is successfully completed</short>
      </element>
      <element name="TCustomGrid.doColSizing.X">
        <short>Horizontal mouse coordinate where the action was started</short>
      </element>
      <element name="TCustomGrid.doColSizing.Y">
        <short>Vertical mouse coordinate where the action was started</short>
      </element>

      <element name="TCustomGrid.doRowSizing">
        <short>Performs actions needed when a grid row is resized</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.doRowSizing.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.doRowSizing.X">
        <short></short>
      </element>
      <element name="TCustomGrid.doRowSizing.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.doColMoving">
        <short>Performs actions needed to move or drag a grid column</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.doColMoving.X">
        <short></short>
      </element>
      <element name="TCustomGrid.doColMoving.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.doRowMoving">
        <short>Performs actions needed to move or drag a grid row</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.doRowMoving.X">
        <short></short>
      </element>
      <element name="TCustomGrid.doRowMoving.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.doPushCell">
        <short>Performs actions needed to render a cell using its "Pushed" appearance</short>
        <descr></descr>
        <seealso>
        <link id="TCustomGrid.StartPushCell"/>
        <link id="TCustomGrid.MouseDown"/>
      </seealso>
      </element>

      <element name="TCustomGrid.doTopleftChange">
        <short>
          Performs actions needed when the origin or dimensions for the grid are changed
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SetFixedCols"/>
          <link id="TCustomGrid.ScrollToCell"/>
          <link id="TCustomGrid.CheckTopLeft"/>
          <link id="TCustomGrid.FixScroll"/>
        </seealso>
      </element>
      <element name="TCustomGrid.doTopleftChange.DimChg">
        <short>True when the dimensions for the grid have been altered</short>
      </element>

      <element name="TCustomGrid.DrawXORVertLine">
        <short>
          Draws a vertical line at the specified horizontal location using XOR pen mode
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.doColSizing"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawXORVertLine.X">
        <short>Horizontal location where the vertical grid line is drawn</short>
      </element>

      <element name="TCustomGrid.DrawXORHorzLine">
        <short>
          Draws a horizontal line at the specified vertical location using XOR pen mode
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawXORHorzLine.Y">
        <short>Vertical location where the horizontal grid line is drawn</short>
      </element>

      <element name="TCustomGrid.EditorGetValue">
        <short>Gets the value for a cell editor</short>
        <descr>
          <p>
            <var>EditorGetValue</var> is a <var>Boolean</var> function used to get the value for a cell editor in the grid. EditorGetValue is used in the implementation of <var>TCustomGrid</var> methods like: <var>EditorShowInCell</var>, <var>ResetEditor</var>, <var>MoveExtend</var>, and <var>DestroyHandle</var>. It is used to get the cell value prior to editing, and to display the value from the cell editor when it is hidden.
          </p>
          <p>
            <var>Validate</var> is a <var>Boolean</var> argument that indicates if the <var>ValidateEntry</var> method is called to validate the edited cell value. When it contains <b>True</b>, <var>ValidateEntry</var> is called prior to calling <var>EditorDoSetValue</var> and/or <var>EditorHide</var>.
          </p>
          <p>
            The return value contains <b>True</b> when the edited cell value is valid. It also contains <b>True</b> if a cell editor has not been assigned or is not visible, or the method was called at design-time or during component destruction.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ResetEditor"/>
          <link id="TCustomGrid.DestroyHandle"/>
          <link id="TCustomGrid.MoveExtend"/>
          <link id="TCustomGrid.EditorShowInCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorGetValue.Result">
        <short>True when the cell is valid or has not been altered</short>
      </element>
      <element name="TCustomGrid.EditorGetValue.Validate">
        <short>Indicates the cell value is validated using ValidateEntry</short>
      </element>

      <element name="TCustomGrid.EditorPos">
        <short>Sets the position and size for an active cell editor in the grid</short>
        <descr>
          <p>
            <var>EditorPos</var> is a procedure used to set the position and size for an active cell editor in the grid. EditorPos posts messages to the <var>Editor</var> for the grid, and requires a valid handle for both the grid control and the editor control. No actions are performed in the method when a Handle has not been allocated for the grid or when Editor is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            A <var>TGridMessage</var> instance with the values in Grid, Col, and Row is dispatched to the Editor to set the Editor position. The bounds for the editor rectangle is calculated and adjusted when needed.
          </p>
          <p>
            The <var>Font</var> for the grid control is assigned to the <var>Canvas</var> where the editor control is drawn.
          </p>
          <p>
            A TGridMessage instance with the values in Grid, Col, Row, and the calculated bounds is dispatched to the Editor to set the Editor bounds.
          </p>
          <p>
            EditorPos is called when visual properties are modified in the control and the editor control is visible. For example: SetRowHeight, SetDefRowHeight, AdjustEditorBounds,  SetEditorBorderStyle, SetEditorValue, EditorWidthChanged, GridMouseWheel, WMHScroll, and WMVScroll.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.Grid"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="#lcl.controls.TCustomControl.Canvas"/>
          <link id="#lcl.controls.TControl.Font"/>
          <link id="TGridMessage"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorShowChar">
        <short>Applies a UTF-8-encoded character value to the active cell editor</short>
        <descr>
          <p>
            Calls <var>SelectEditor</var> to ensure that the cell <var>Editor</var> is active and enabled for the cell at <var>Col</var> and <var>Row</var>. The Editor is displayed (when available) if the value in Ch is handled in the editor control, and is not marked as read-only. The character in <var>Ch</var> is posted to the widgetset class for the grid.
          </p>
          <p>
            This method bypasses the <var>KeyDown</var> handler for the class instance, and as a result does not automatically reset <var>RowAutoInsert</var> when <var>Ch</var> contains the <b>Backspace</b> key (<b>Ctrl+H</b>). RowAutoInsert is manually set to <b>False</b> in the method when the Backspace character is detected.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.SelectEditor"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowAutoInsert"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorShowChar.Ch">
        <short>UTF-8-encoded character applied in the method</short>
      </element>

      <element name="TCustomGrid.EditorSetMode">
        <short>Sets the value for the EditorMode property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.EditorMode"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorSetMode.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.EditorSetValue">
        <short>Changes the cell editor value and position at run-time</short>
        <descr>
          <p>
            Calls <var>EditorPos</var> to the set the position for the <var>Editor</var> control used in the active cell. Calls <var>EditorDoSetValue</var> to update the content in the Editor control.
          </p>
          <p>
            No actions are performed in the method at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EditorPos"/>
          <link id="TCustomGrid.EditorDoSetValue"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorAlwaysShown">
        <short>
          Indicates if a cell editor is always displayed for an active cell in the grid
        </short>
        <descr>
          <p>
            The return value is <b>True</b> when editing is allowed for the cell, it is not a fixed cell, and <var>goAlwaysShowEditor</var> is included in the <var>Options</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EditingAllowed"/>
          <link id="TCustomGrid.FixedGrid"/>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorAlwaysShown.Result">
        <short>True when a cell editor is allowed and enabled in grid cells</short>
      </element>

      <element name="TCustomGrid.FixPosition">
        <short>
          Ensures that column and row positions, and selection(s) are valid for the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.FixPosition.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.FixPosition.aIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.FixScroll">
        <short>Ensures that scrollbars are updated to reflect the cached visible area in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.GetLeftCol">
        <short>Gets the value for LeftCol property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.LeftCol"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetLeftCol.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetColCount">
        <short>Gets the value for the ColCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetColWidths">
        <short>Gets the value for the indexed ColWidths property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColWidths.Result">
        <short>Value for the property</short>
      </element>
      <element name="TCustomGrid.GetColWidths.ACol">
        <short>Column number to examine in the method</short>
      </element>

      <element name="TCustomGrid.GetColumns">
        <short>Gets the value for the Columns property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetColumns.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetDefColWidth">
        <short>Gets the value for the DefaultColWidth property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DefColWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetDefColWidth.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetDefRowHeight">
        <short>Gets the value for the DefaultRowHeight property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DefRowHeight"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetDefRowHeight.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetEditorBorderStyle">
        <short>Gets the value for the EditorBorderStyle property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.EditorBorderStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetEditorBorderStyle.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetBorderWidth">
        <short>Gets the number of pixels needed for the grid border (when used)</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.InternalNeedBorder"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetBorderWidth.Result">
        <short>Number of pixels needed for the grid border</short>
      </element>

      <element name="TCustomGrid.GetTitleImageInfo">
        <short>
          Gets position and layout information for an image used in a column header
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.aColumnIndex">
        <short>Column number examined in the method</short>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.ImgIndex">
        <short>Position of the image used for the column</short>
      </element>
      <element name="TCustomGrid.GetTitleImageInfo.ImgLayout">
        <short>Image layout used for the column</short>
      </element>

      <element name="TCustomGrid.GetSortTitleImageInfo">
        <short>
          Gets image information displayed in a column header for a sortable grid column
        </short>
        <descr>
          <p>
            GetSortTitleImageInfo is used in the implementation of the methods like TCustomGrid.DrawColumnTitleImage and TCustomStringGrid.AutoAdjustColumn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.aColumnIndex">
        <short>Column index for the sort indicator</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgList">
        <short>List with images used for the indicator</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgIndex">
        <short>Image index used for the specified grid column</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.ImgListWidth">
        <short>Image width used for the indicator</short>
      </element>
      <element name="TCustomGrid.GetSortTitleImageInfo.NativeSortGlyphs">
        <short>Indicates if native sort indicators are defined in the grid column</short>
      </element>

      <element name="TCustomGrid.GetRowCount">
        <short>Gets the value for the RowCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetRowCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetRowHeights">
        <short>Gets the value for the indexed RowHeights property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.RowHeights"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetRowHeights.Result">
        <short>Height for the row in pixels</short>
      </element>
      <element name="TCustomGrid.GetRowHeights.ARow">
        <short>Row number for the property value</short>
      </element>

      <element name="TCustomGrid.GetSelectedRange">
        <short>Gets the value for the indexed SelectedRange property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SelectedRange"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedRange.Result">
        <short>Value for the property</short>
      </element>
      <element name="TCustomGrid.GetSelectedRange.AIndex">
        <short>Ordinal position for the grid selection rectangle</short>
      </element>

      <element name="TCustomGrid.GetSelectedRangeCount">
        <short>Gets the value for the SelectedRangeCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SelectedRangeCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelectedRangeCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetSelection">
        <short>Gets the value for the Selection property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSelection.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetSpecialCursor">
        <short>Gets a cursor for the specified grid cursor state</short>
        <descr>
          <p>
            <var>GetSpecialCursor</var> is used as the read access specifier for the <var>ColRowDraggingCursor</var>, <var>ColRowSizingCursor</var>, and <var>RowSizingCursor</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColRowDraggingCursor"/>
          <link id="TCustomGrid.ColRowSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetSpecialCursor.Result">
        <short>TCursor representing the specified cursor state</short>
      </element>
      <element name="TCustomGrid.GetSpecialCursor.ACursorState">
        <short>Grid cursor state retrieved in the method</short>
      </element>

      <element name="TCustomGrid.GetTopRow">
        <short>Gets the value for the TopRow property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TopRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetTopRow.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetVisibleColCount">
        <short>Gets the value for the VisibleRowCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.VisibleColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetVisibleColCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.GetVisibleGrid">
        <short>Gets a rectangle with the cell coordinates for the visible area in the grid</short>
        <descr>
          <p>
            Gets a TRect instance with the cell coordinates for the visible area in the grid control.
          </p>
          <p>
            The visible grid area depends on the values in TopLeft, ClientWidth, ClientHeight, ColCount and RowCount.  The method is called immediately after changing values in any of these properties. It provides the current values needed when the grid cache is updated in the CacheVisibleGrid method.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetVisibleGrid.Result">
        <short>TRect with the cell coordinates for the visible area in the control</short>
      </element>

      <element name="TCustomGrid.GetVisibleRowCount">
        <short>Gets the value for the VisibleRowCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.VisibleRowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetVisibleRowCount.Result">
        <short>Value for the property</short>
      </element>

      <element name="TCustomGrid.InternalAutoFillColumns">
        <short>
          Performs actions needed to resize one or more columns to fill the client area for the grid control
        </short>
        <descr>
          <p>
            <var>InternalAutoFillColumns</var> is a procedure used to resize one or more columns to fill the client area for the grid control. No actions are performed in the method if <var>AutoFillColumns</var> contains <b>False</b>, or when the method has already been called but has not yet completed.
          </p>
          <p>
            InternalAutoFillColumns calls <var>GetAutoFillColumnInfo</var> to accumulate the fixed cell width,  data width, and sizing priority for each of the <var>Columns</var> defined in the grid. At least one of the cells in the grid must have sizing priority; the last non-fixed column is expanded to fill the client area in the grid when no other column has sizing priority.
          </p>
          <p>
            InternalAutoFillColumns is called from the UpdateCachedSizes method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.AutoFillColumns"/>
          <link id="TCustomGrid.GetAutoFillColumnInfo"/>
          <link id="TCustomGrid.UpdateCachedSizes"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InternalNeedBorder">
        <short>Indicates if borders are needed to render the grid control</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DrawBorder"/>
          <link id="TCustomGrid.GetBorderWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.InternalNeedBorder.Result">
        <short>True when a border is drawn around the grid control</short>
      </element>

      <element name="TCustomGrid.InternalSetColWidths">
        <short>
          Performs internal actions needed to set a column width to the specified value
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SetColWidths"/>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.InternalSetColWidths.aCol">
        <short>Column number affected in the method</short>
      </element>
      <element name="TCustomGrid.InternalSetColWidths.aValue">
        <short>Width applied to the column</short>
      </element>

      <element name="TCustomGrid.InternalUpdateColumnWidths">
        <short>
          Performs internal actions needed to update columns widths from the grid Columns
        </short>
        <descr>
          Not used in the current implementation.
        </descr>
        <seealso></seealso>
      </element>

      <!-- WIP -->
      <element name="TCustomGrid.InvalidateMovement">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InvalidateMovement.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.InvalidateMovement.DRow">
        <short></short>
      </element>
      <element name="TCustomGrid.InvalidateMovement.OldRange">
        <short></short>
      </element>

      <element name="TCustomGrid.IsAltColorStored">
        <short>
          Indicates if AlternateColor has a value different than the Color for the grid control
        </short>
        <descr>
          Used as the storage specifier for the AlternateColor property.
        </descr>
        <seealso>
          <link id="TCustomGrid.AlternateColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsAltColorStored.Result">
        <short>True when AlternateColor is different than Color</short>
      </element>

      <element name="TCustomGrid.IsColumnsStored">
        <short>
          Indicates if Columns has been enabled for the grid control
        </short>
        <descr>
          Used as the storage specifier for the Columns property.
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsColumnsStored.Result">
        <short>True when the Enabled in Columns is True</short>
      </element>

      <element name="TCustomGrid.IsPushCellActive">
        <short>Indicates if the pushed cell for the grid is visible</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TCustomGrid.HeadersMouseMove"/>
          <link id="TCustomGrid.GetGridDrawState"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsPushCellActive.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.LoadColumns">
        <short>
          Loads column settings from the specified XML configuration file
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.LoadContent"/>
        </seealso>
      </element>
      <element name="TCustomGrid.LoadColumns.cfg">
        <short>XML configuration file with values loaded in the method</short>
      </element>
      <element name="TCustomGrid.LoadColumns.Version">
        <short>Version number requested from the XML configuration</short>
      </element>

      <element name="TCustomGrid.LoadResBitmapImage">
        <short>
          Loads a bitmap with the specified name from the resource file for the control instance
        </short>
        <descr>
          Assumes the resource in ResName can be loaded using TPortableNetworkGraphic, and assigned to the TBitmap return value.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.LoadResBitmapImage.Result">
        <short>TBitmap with the image loaded in the method</short>
      </element>
      <element name="TCustomGrid.LoadResBitmapImage.ResName">
        <short>Resource name loaded in the method</short>
      </element>

      <!-- WIP -->
      <element name="TCustomGrid.LoadSub">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.LoadSub.ACfg">
        <short>XML configuration file with values loaded in the method</short>
      </element>

      <element name="TCustomGrid.OnTitleFontChanged">
        <short>
          Event handler signalled when the font used for fixed title cells has been changed
        </short>
        <descr>
          <p>
            <var>OnTitleFontChanged</var> is a procedure which implements the event handler signalled when the <var>TitleFont</var> for fixed cells has been changed. OnTitleFontChanged is assigned to the <var>OnChange</var> event handler in TitleFont in the constructor for the class instance.
          </p>
          <p>
            OnTitleFontChanged sets the value in <var>TitleFontIsDefault</var> to <b>False</b> to reflect the change in the font setting. When <var>Columns</var> have been enabled (<var>VisibleCount</var> contains a non-zero value), the <var>TitleFontChanged</var> method in Columns is called. The <var>ColumnsChanged</var> method is called to force the grid to be updated. If Columns have not been enabled, the <var>VisualChange</var> method is called to update the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TCustomGrid.TitleFontIsDefault"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.VisibleCount"/>
          <link id="TCustomGrid.ColumnsChanged"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TGridColumns.Enabled"/>
          <link id="TGridColumns.TitleFontChanged"/>
        </seealso>
      </element>
      <element name="TCustomGrid.OnTitleFontChanged.Sender">
        <short>Object generating the event notification</short>
      </element>

      <element name="TCustomGrid.ReadColumns">
        <short>Reads values for the Columns collection using the specified TReader class instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ReadColumns.Reader">
        <short>TReader used to load values during LCL component streaming</short>
      </element>

      <element name="TCustomGrid.ReadColWidths">
        <short>
          Reads the list of Integer values in ColWidths using  the specified TReader class instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ReadColWidths.Reader">
        <short>TReader used to load values during LCL component streaming</short>
      </element>

      <element name="TCustomGrid.ReadRowHeights">
        <short>
          Reads the list of Integer values in RowHeights using the specified TReader class instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ReadRowHeights.Reader">
        <short>TReader used to load values during LCL component streaming</short>
      </element>

      <element name="TCustomGrid.ResetPushedCell">
        <short>Resets cached grid information for the "pushed" cell</short>
        <descr>
          <p>
            <var>ResetPushedCell</var> refreshes cached information for the grid related to the current <var>PushedCell</var>. It invalidates the cell at the position in PushedCell when the cached values indicate it is "pushed". Resets coordinates in PushedCell when <var>ResetColRow</var> is set to <b>True</b>. Sets the ClickCellPushed member in the cached data to <b>False</b> prior to exit.
          </p>
          <p>
            ResetPushedCell is called from methods like <var>HeadersMouseMove</var> and <var>MouseUp</var>. It is also called from the constructor for the <var>TCustomGrid</var> instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.HeadersMouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
          <link id="TGridDataCache.PushedCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ResetPushedCell.ResetColRow">
        <short></short>
      </element>

      <element name="TCustomGrid.RestoreCursor">
        <short>
          Restores the SavedCursor for the grid, and resets CursorState to its default value
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.SaveColumns">
        <short>
          Saves configuration, layout, and appearance information in Columns to an XML configuration file
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SaveColumns.cfg">
        <short>XML configuration file where the values are written</short>
      </element>
      <element name="TCustomGrid.SaveColumns.Version">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollToCell">
        <short>Scrolls the grid until the cell at the specified location is visible</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollToCell.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollToCell.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollToCell.aRow">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollGrid">
        <short>
          Scrolls the grid until the cell at the specified location is the new origin (top, left)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollGrid.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollGrid.Relative">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollGrid.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollGrid.DRow">
        <short></short>
      </element>

      <element name="TCustomGrid.SetCol">
        <short>Sets the value in the Col property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetCol.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColWidths">
        <short>Sets the value in the indexed ColWidths property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColWidths.ACol">
        <short>Column number for the update width value</short>
      </element>
      <element name="TCustomGrid.SetColWidths.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColRowDragIndicatorColor">
        <short>Sets the value for the ColRowDragIndicatorColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColRowDragIndicatorColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColRowDragIndicatorColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetDefColWidth">
        <short>Sets the value for the DefColWidth property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DefColWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefColWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetDefRowHeight">
        <short>Sets the value for the DefRowHeight property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DefRowHeight"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefRowHeight.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetDefaultDrawing">
        <short>Sets the value for the DefaultDrawing property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.DefaultDrawing"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetDefaultDrawing.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetEditor">
        <short>Sets the value for the Editor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Editor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetEditor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFocusColor">
        <short>Sets the value for the FocusColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.FocusColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFocusColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetGridLineColor">
        <short>Sets the value for the GridLineColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.GridLineColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFixedGridLineColor">
        <short>Sets the value for the FixedGridLineColor property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.FixedGridLineColor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedGridLineColor.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetGridLineStyle">
        <short>Sets the value for the GridLineStyle property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.GridLineStyle"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineStyle.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetGridLineWidth">
        <short>Sets the value for the GridLineWidth property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.GridLineWidth"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetGridLineWidth.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetLeftCol">
        <short>Sets the value for the LeftCol property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.LeftCol"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetLeftCol.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetOptions">
        <short>Sets the value for the Options property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetOptions.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetOptions2">
        <short>Sets the value for the Options2 property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetOptions2.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetRangeSelectMode">
        <short>Sets the value for the RangeSelectMode property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.RangeSelectMode"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRangeSelectMode.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetRow">
        <short>Sets the value for the Row property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRow.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetRowCount">
        <short>Sets the value for the RowCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRowCount.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetRowHeights">
        <short>Sets the value in the indexed RowHeights property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.RowHeights"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetRowHeights.ARow">
        <short>Row number affected in the method</short>
      </element>
      <element name="TCustomGrid.SetRowHeights.AValue">
        <short>New value for the specified row number</short>
      </element>

      <element name="TCustomGrid.SetScrollBars">
        <short>Sets the value for the ScrollBars property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ScrollBars"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetScrollBars.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetSelectActive">
        <short>Sets the value for the SelectActive property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SelectActive"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSelectActive.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetSelection">
        <short>Sets the value for the Selection property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSelection.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetSpecialCursor">
        <short>Sets the value for the indexed cursor states in the grid control</short>
        <descr>
          <p>
            <var>SetSpecialCursor</var> is used as the write access specifier for the <var>ColRowDraggingCursor</var>, <var>ColRowSizingCursor</var>, and <var>RowSizingCursor</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColRowDraggingCursor"/>
          <link id="TCustomGrid.ColRowSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetSpecialCursor.ACursorState">
        <short>Cursor state located in the method</short>
      </element>
      <element name="TCustomGrid.SetSpecialCursor.AValue">
        <short>New value for the cursor state</short>
      </element>

      <element name="TCustomGrid.SetTopRow">
        <short>Sets the value for the TopRow property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.TopRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetTopRow.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.StartColSizing">
        <short>
          Updates the grid to begin a column sizing operation for the cell at the specified location
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.StartColSizing.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.StartColSizing.X">
        <short></short>
      </element>
      <element name="TCustomGrid.StartColSizing.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.ChangeCursor">
        <short>Changes the cursor shape to the specified value</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SetCursor"/>
          <link id="TCustomGrid.CursorState"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ChangeCursor.ACursor">
        <short>Cursor shape applied in the method</short>
      </element>
      <element name="TCustomGrid.ChangeCursor.ASaveCurrentCursor">
        <short>Indicates if the existing cursor shape is stored for later reuse</short>
      </element>

      <element name="TCustomGrid.TrySmoothScrollBy">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.aColDelta">
        <short></short>
      </element>
      <element name="TCustomGrid.TrySmoothScrollBy.aRowDelta">
        <short></short>
      </element>

      <element name="TCustomGrid.TryScrollTo">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.TryScrollTo.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.TryScrollTo.aRow">
        <short></short>
      </element>

      <element name="TCustomGrid.UpdateCachedSizes">
        <short>
          Performs actions needed when the size used for columns or rows in the grid are changed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.UpdateSBVisibility">
        <short>
          Updates the visibility for horizontal and/or vertical scrollbars
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.UpdateSizes">
        <short>
          Updates the Cache information for the grid when visual aspects of columns or rows are changed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.WriteColumns">
        <short>
          Writes the Columns collection using the specified TWriter instance
        </short>
        <descr>
          <p>
            A Nil collection is written using Writer when Column contains the default column definitions (has not been modified at design-time or run-time).
          </p>
          <remark>
            Not used in the current implementation of TCustomGrid.DefineProperties.
          </remark>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefineProperties"/>
        </seealso>
      </element>
      <element name="TCustomGrid.WriteColumns.Writer">
        <short>TWriter instance used for the class</short>
      </element>

      <element name="TCustomGrid.WriteColWidths">
        <short>
          Writes the list of Integers in ColWidths using the specified TWriter instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WriteColWidths.Writer">
        <short>TWriter instance used to write the values</short>
      </element>

      <element name="TCustomGrid.WriteRowHeights">
        <short>
          Writes the list of Integers in RowHeights using the specified TWriter instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WriteRowHeights.Writer">
        <short>TWriter instance used to write the values</short>
      </element>

      <element name="TCustomGrid.WMEraseBkgnd">
        <short>Handles the Window Message used to erase the background for the control</short>
        <descr>
          <notes>
            <note>Always returns 1 as the Message result.</note>
          </notes>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WMEraseBkgnd.message">
        <short>Lazarus message applied in the method</short>
      </element>

      <element name="TCustomGrid.WMGetDlgCode">
        <short>
          Handles the Window Message which applies Tab and Arrow keys in dialog boxes and custom controls
        </short>
        <descr>
          Examines the Options property for the presence of the goTabs enumeration value. When present, the DLGC_WANTTAB value is OR'd to the result value in Msg.
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TGridOption.goTabs"/>
        </seealso>
      </element>
      <element name="TCustomGrid.WMGetDlgCode.Msg">
        <short>Lazarus message processed in the method</short>
      </element>

      <element name="TCustomGrid.fGridState">
        <short>
          <var>fGridState</var> - local variable to hold current state of the grid (whether being edited, updated etc)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.RTLSign">
        <short>
          Gets the positive or negative multiplier used to adjust scroll values for BiDi mode
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.RTLSign.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.WSRegisterClass"
         link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>

      <element name="TCustomGrid.AddSelectedRange">
        <short>Adds the current selection range to the array of rectangles in Selections</short>
        <descr>
          <p>
            Called from the MouseDown method when Options includes the value which enables multi-select.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.HasMultiSelection"/>
        </seealso>
      </element>

      <element name="TCustomGrid.AdjustClientRect">
        <short>
          Adjusts the client rectangle and sets the grid flag to reflect the change
        </short>
        <descr>
          <p>
            <var>AdjustClientRect</var> is an overridden method used to adjust the client rectangle for the control, and set the grid flag to reflect the change. Calls the inherited method on entry. Updates the <var>GridFlags</var> property to included the value <var>gfClientRectChange</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridFlags"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.controls.TWinControl.AdjustClientRect"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustClientRect.ARect">
        <short>Client rectangle adjusted in the method</short>
      </element>

      <element name="TCustomGrid.AdjustEditorBounds">
        <short>
          Updates the selected cell and sets the bounds for the optional cell Editor
        </short>
        <descr>
          <p>
            Calls <var>SetColRow</var> to update the values in the <var>Col</var> and <var>Row</var> properties. Values in <var>NewCol</var> and <var>NewRow</var> are stored in the corresponding property.
          </p>
          <p>
            When <var>EditorMode</var> is set to <b>True</b>, the <var>EditorPos</var> method is called to position the <var>Editor</var> to the new cell selection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.EditorMode"/>
          <link id="TCustomGrid.EditorPos"/>
          <link id="TCustomGrid.SetColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AdjustEditorBounds.NewCol">
        <short>Column number for the current cell selection in the grid</short>
      </element>
      <element name="TCustomGrid.AdjustEditorBounds.NewRow">
        <short>Row number for the current cell selection in the grid</short>
      </element>

      <element name="TCustomGrid.AfterMoveSelection">
        <short>Signals the OnAfterSelection event handler</short>
        <descr>
          <p>
            <var>AfterMoveSelection</var> is a procedure used to signal the <var>OnAfterSelection</var> event handler when it has been assigned (does not contain <b>Nil</b>). Values in <var>prevCol</var> and <var>prevRow</var> are passed as arguments to the OnAfterSelection event handler.
          </p>
          <p>
            AfterMoveSelection is called from the <var>MoveExtend</var> method when the move operation has been completed.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnAfterSelection"/>
          <link id="TCustomGrid.MoveExtend"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AfterMoveSelection.prevCol">
        <short>Column number for the selection before it was moved</short>
      </element>
      <element name="TCustomGrid.AfterMoveSelection.prevRow">
        <short>Row number for the selection before it was moved</short>
      </element>

      <element name="TCustomGrid.AssignTo">
        <short>
          Stores properties from the current grid class instance to the specified target
        </short>
        <descr>
          <p>
            AssignTo is an overridden method used to store values from the current class instance to the persistent object specified in Dest. AssignTo is overridden to provide support for TCustomGrid properties in the object persistence mechanism.
          </p>
          <p>
            When Dest is a TCustomGrid descendant, the following properties are copied from the current class instance to the target:
          </p>
          <p>
            <b>Structure</b>
          </p>
          <ul>
            <li>Columns (When Columns has been Enabled)</li>
            <li>ColCount (When Columns has not been Enabled)</li>
            <li>RowCount</li>
            <li>FixedCols</li>
            <li>FixedRows</li>
            <li>DefaultRowHeight (when it contains a value other than the default)</li>
            <li>DefaultColWidth (when it contains a value other than the default)</li>
            <li>The internal Rows list</li>
            <li>The internal Cols list (when Columns has not been enabled)</li>
          </ul>
          <p>
            <b>Display Settings</b>
          </p>
          <ul>
            <li>Options</li>
            <li>Color</li>
            <li>FixedColor</li>
            <li>AlternateColor</li>
            <li>Font</li>
            <li>TitleFont</li>
          </ul>
          <p>
            <b>Position and Selection</b>
          </p>
          <ul>
            <li>TopRow</li>
            <li>LeftCol</li>
            <li>Col</li>
            <li>Row</li>
            <li>Current selection range for the grid</li>
          </ul>
          <p>
            When Dest is not a TCustomGrid descendant, the inherited AssignTo method is called using Dest as an argument.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.AssignTo"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AssignTo.Dest">
        <short>Grid instance where value are stored</short>
      </element>

      <element name="TCustomGrid.AutoAdjustColumn">
        <short>
          Adjusts column properties to accommodate the largest value in the specified column
        </short>
        <descr>
          <p>
            <var>AutoAdjustColumn</var> is called from the <var>DblClick</var> method when the values <var>goColSizing</var> and <var>goDblClickAutoSize</var> have been included in the <var>Options</var> property.
          </p>
          <p>
            <var>AutoAdjustColumn</var> has an empty implementation in <var>TCustomGrid</var>, and must be overridden in a descendent class.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.DblClick"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.AutoAdjustColumn.aCol">
        <short>Column number adjusted in the method</short>
      </element>

      <element name="TCustomGrid.BeforeMoveSelection">
        <short>
          <var>BeforeMoveSelection</var> - method to use before a selection is moved
        </short>
        <descr>
          <p>
            <var>BeforeMoveSelection</var> is called from the <var>MoveExtend</var> method whenever the current grid cursor location is about to change. The destination column and row are specified in the <var>DCol</var> and <var>DRow</var> parameters respectively.
          </p>
          <p>
            The new location is known to be a valid selectable cell (see <link id="TCustomGrid.SelectCell"/>), and is given in absolute cell coordinates. At this point the current grid location has not changed and can be retrieved with Col and Row properties.
          </p>
          <p>
            The purpose of this method is to call the <var>OnBeforeSelection</var> event handler.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.MoveExtend"/>
          <link id="TCustomGrid.SelectCell"/>
          <link id="TCustomDrawGrid.OnBeforeSelection"/>
        </seealso>
      </element>
      <element name="TCustomGrid.BeforeMoveSelection.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.BeforeMoveSelection.DRow">
        <short></short>
      </element>

      <element name="TCustomGrid.BeginAutoDrag">
        <short>Starts an auto-drag operation in the grid control</short>
        <descr>
          <p>
            <var>BeginAutoDrag</var> is an overridden procedure used to start an auto-dragging operation. Auto-dragging is in effect when <var>DragMode</var> contains the value <var>dmAutomatic</var>.
          </p>
          <p>
            BeginAutoDrag examines the <var>Options</var> property to determine if column sizing (<var>goColSizing</var>) or row sizing (<var>goRowSizing</var>) have been enabled for the grid control. In addition, the <var>CursorState</var> property must contain a value that represents the action (<var>gcsColWidthChanging</var> or <var>gcsRowHeightChanging</var>). If either condition is not met, <var>BeginDrag</var> is called using <b>False</b> as an argument.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CursorState"/>
          <link id="TGridOption.goColSizing"/>
          <link id="TGridOption.goRowSizing"/>
          <link id="TGridCursorState.gcsColWidthChanging"/>
          <link id="TGridCursorState.gcsRowHeightChanging"/>
        </seealso>
      </element>

      <element name="TCustomGrid.BoxRect">
        <short></short>
        <descr></descr>
        <seealso></seealso>
        <notes>
          <note>Not currently used in the grid implementation.</note>
        </notes>
      </element>
      <element name="TCustomGrid.BoxRect.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.BoxRect.ALeft">
        <short></short>
      </element>
      <element name="TCustomGrid.BoxRect.ATop">
        <short></short>
      </element>
      <element name="TCustomGrid.BoxRect.ARight">
        <short></short>
      </element>
      <element name="TCustomGrid.BoxRect.ABottom">
        <short></short>
      </element>

      <element name="TCustomGrid.CacheMouseDown">
        <short>
          Updates cached grid information when a mouse click occurs in the grid control
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CacheMouseDown.X">
        <short>Horizontal screen coordinate for the mouse click</short>
      </element>
      <element name="TCustomGrid.CacheMouseDown.Y">
        <short>Vertical screen coordinate for the mouse click</short>
      </element>

      <element name="TCustomGrid.CalcAutoSizeColumn">
        <short>
          Automatically calculates the size for the column at the specified position
        </short>
        <descr>
          Sets the value for aPriority to 0 (zero).
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.AMin">
        <short></short>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.AMax">
        <short></short>
      </element>
      <element name="TCustomGrid.CalcAutoSizeColumn.APriority">
        <short></short>
      </element>

      <element name="TCustomGrid.CalcCellExtent">
        <short>Deprecated</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.CalcCellExtent.aRect">
        <short></short>
      </element>

      <element name="TCustomGrid.CalcFocusRect">
        <short>
          Calculates the bounds for a focus rectangle in the grid control
        </short>
        <descr>
          <p>
            When row selection is enabled in the grid <var>Options</var>, the <var>Left</var> and <var>Right</var> values in <var>ARect</var> are updated to use cached grid information in <var>GCache</var>. Calls <var>FlipRect</var> to account for Right-to-Left alignment when needed.
          </p>
          <p>
            <var>Adjust</var> indicates whether values in ARect are adjusted for horizontal or vertical grid lines drawn in the control. No additional actions are performed when Adjust is set to <b>False</b>. The default value for the parameter is <b>True</b>.
          </p>
          <p>
            When <var>goHorzLine</var> is included in Options, the Bottom value in ARect is decremented to accommodate the horizontal grid line.
          </p>
          <p>
            When <var>goVertLine</var> is included in Options, the Left or Right value in ARect is adjusted to accommodate the vertical grid line. Left is incremented when <var>UseRightToLeftAlignment</var> is set to <b>True</b>. Right is decremented when UseRightToLeftAlignment is set to <b>False</b>.
          </p>
          <p>
            CalcFocusRect is called from the <var>DrawRow</var> and <var>DrawFocusRect</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.DrawFocusRect"/>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.FlipRect"/>
          <link id="TGridFlagsOption"/>
          <link id="#lcl.controls.TControl.UseRightToLeftAlignment"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CalcFocusRect.ARect">
        <short></short>
      </element>

      <!-- WIP -->
      <element name="TCustomGrid.CalcMaxTopLeft">
        <short>
          Updates cached grid information to reflect the visible area and scrollbars for the control
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.CalcScrollbarsRange">
        <short>Updates the range,  page, and thumb position for visible scrollbars</short>
        <descr>
          <p>
            <var>CalcScrollbarsRange</var> is a procedure used to update the range, page, and thumb position for visible scrollbars in the grid control. CalcScrollbarsRange accesses the cached grid data in <var>GCache</var> to calculate values needed in the method. The visibility for both horizontal and vertical scrollbars is determined, and the range, page and thumb position is applied in the <var>UpdateHorzScrollBar</var> and <var>UpdateVertScrollbar</var> methods.
          </p>
          <p>
            CalcScrollbarsRange is used in the implementation of the <var>ScrollBy</var> and <var>UpdateSizes</var> methods in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GCache"/>
          <link id="TCustomGrid.GetSBRanges"/>
          <link id="TCustomGrid.UpdateHorzScrollBar"/>
          <link id="TCustomGrid.UpdateVertScrollBar"/>
          <link id="TCustomGrid.ScrollBy"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CalculatePreferredSize">
        <short>Gets the preferred width and height for the control</short>
        <descr>
          <p>
            Always returns 0 (zero) in the PreferredWidth and PreferredHeight variable arguments.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.CalculatePreferredSize"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomGrid.CalculatePreferredSize.WithThemeSpace">
        <short></short>
      </element>

      <element name="TCustomGrid.CanEditShow">
        <short>
          Indicates whether the cell editor can be displayed and focused in the current grid column
        </short>
        <descr>
          <p>
            <var>CanEditShow</var> is a <var>Boolean</var> function which Indicates whether the cell <var>Editor</var> can be displayed and focused in the current grid column. The return value is <b>False</b> at design-time. The return value is <b>True</b> if <var>Options</var> includes the value <var>goEditing</var>, and the column number in <var>Col</var> is valid and not in a fixed row.
          </p>
          <p>
            When <var>Columns</var> have been Enabled in the grid control, the return value is set to <b>False</b> when the column is marked as ReadOnly in the column definition.
          </p>
          <p>
            CanEditShow is called from the <var>EditorShow</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.Editor"/>
          <link id="TCustomGrid.EditorShow"/>
          <link id="TCustomGrid.IMEStartComposition"/>
          <link id="TCustomGrid.IMEComposition"/>
          <link id="TCustomGrid.IMEEndComposition"/>
          <link id="TGridColumns.Enabled"/>
          <link id="TGridColumn.ReadOnly"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CanEditShow.Result">
        <short>True at run-time when the column allows focus and editing</short>
      </element>

      <element name="TCustomGrid.CanGridAcceptKey">
        <short>
          Returns True if the grid is able to accept the given key
        </short>
        <descr>
          <p>
            Always returns True in TCustomGrid.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Result">
        <short>True if the grid is able to accept the given key</short>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Key">
        <short>Not used in the current implementation</short>
      </element>
      <element name="TCustomGrid.CanGridAcceptKey.Shift">
        <short>Not used in the current implementation</short>
      </element>

      <element name="TCustomGrid.CellClick">
        <short>
          Processes a mouse click in the cell at the given coordinates
        </short>
        <descr>
          <p>
            CellClick has an empty implementation in TCustomGrid.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CellClick.aCol">
        <short>Column number for the click event</short>
      </element>
      <element name="TCustomGrid.CellClick.aRow">
        <short>Row number for the clisck event</short>
      </element>

      <element name="TCustomGrid.CellExtent">
        <short>
          Gets the last column number for the cell extent at the specified column and row
        </short>
        <descr>
          <p>
            CellExtent gets the extent rectangle for the cell at the coordinated in ACol and ARow. The rectangle bounds in R are updated by calling the CalcCellExtent method.
          </p>
          <p>
            exCol is updated in the method to reflect the last visible column in the cached grid information for the cell extent. The ColRowToOffset is iteratively called until the extent exceeds the cached right-most column for the visible area in the grid.
          </p>
          <p>
            CellExtent is called from the DrawRow method when column spanning is enabled in the Options for the grid control.
          </p>
          <remark>
            The current implementation does not account for BIDI mode or Right-to-Left usage.
          </remark>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CellExtent.aCol">
        <short>Column number for the cell extent</short>
      </element>
      <element name="TCustomGrid.CellExtent.aRow">
        <short>Row number for the cell extent</short>
      </element>
      <element name="TCustomGrid.CellExtent.R">
        <short>TRect with the bounds for the cell extent</short>
      </element>
      <element name="TCustomGrid.CellExtent.exCol">
        <short>Last usable column number for the cell extent</short>
      </element>

      <element name="TCustomGrid.CheckLimits">
        <short>
          <var>CheckLimits</var> - method for checking limits of specified cell
        </short>
        <descr>
          <p>
            <var>CheckLimits</var> is a procedure used to constrain the specified cell coordinates to the valid values for grid control.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> contain the column and row number for a cell in the grid control. CheckLimits ensures that the values represent a valid, non-fixed cell in the grid control.
          </p>
          <p>
            ACol must contain a value in the range <b>0..ColCount-1</b>, and cannot be a fixed column in the grid. The value in <var>FixedCols</var> is assigned to ACol if it is less than the value in FixedCols.<b> ColCount-1</b> is assigned to ACol when it is larger than the upper limit.
          </p>
          <p>
            <var>ARow</var> must contain a value in the range <b>0..RowCount-1</b>, and cannot be a fixed row in the grid. The value in <var>FixedRows</var> is assigned to ARow if it is less than the value in FixedRows. <b>RowCount-1</b> is assigned to ARow when it is larger than the upper limit.
          </p>
          <p>
            <var>CheckLimitsWithError</var> is used when an exception is required for invalid cell coordinates.
          </p>
          <p>
            CheckLimits is used in the implementation of methods like <var>MoveNextSelectable</var> and <var>TryMoveSelection</var>.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckLimits.aCol">
        <short>Column number examined in the method</short>
      </element>
      <element name="TCustomGrid.CheckLimits.aRow">
        <short>Row number examined in the method</short>
      </element>

      <element name="TCustomGrid.CheckLimitsWithError">
        <short>
          Checks limits for the specified cell, with error trapping
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckLimitsWithError.aCol">
        <short>Column number examined in the method</short>
      </element>
      <element name="TCustomGrid.CheckLimitsWithError.aRow">
        <short>Row number examined in the method</short>
      </element>

      <element name="TCustomGrid.CMMouseEnter">
        <short>Control message posted when the mouse enters a cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CMMouseEnter.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomGrid.CMMouseLeave">
        <short>Control Message posted when a mouse leaves a cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CMMouseLeave.Message">
        <short>Message handled in the method</short>
      </element>

      <element name="TCustomGrid.ColRowDeleted">
        <short>
          <var>ColRowDeleted</var> - method for dealing with deletion of either a column or a row (depending on value of <var>IsCol</var>)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColRowDeleted.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowDeleted.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.ColRowExchanged">
        <short>
          <var>ColRowExchanged</var> - method for exchanging the current Column or Row (depending on value of <var>IsCol</var>) with the indexed other column or row
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColRowExchanged.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowExchanged.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowExchanged.WithIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.ColRowInserted">
        <short>
          <var>ColRowInserted</var> - method for dealing with insertion of a column or row (depending on value of <var>IsCol</var>)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColRowInserted.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowInserted.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.ColRowMoved">
        <short>
          <var>ColRowMoved</var> - the column or row (determined by <var>IsColumn</var>) is moved from one index to another
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColRowMoved.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowMoved.FromIndex">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowMoved.ToIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.ColRowToOffset">
        <short>
          <var>ColRowToOffset</var> - method for moving column or row (depending on value of <var>IsCol</var>); if <var>Relative</var> is True, moves by the amount of <var>Index</var>, otherwise moves from <var>StartPos</var> to <var>EndPos</var>. Returns True if successful
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.IsCol">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Fisical">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Ini">
        <short></short>
      </element>
      <element name="TCustomGrid.ColRowToOffset.Fin">
        <short></short>
      </element>

      <element name="TCustomGrid.ColumnIndexFromGridColumn">
        <short>
          Gets the position of the specified column relative to the first column in the grid
        </short>
        <descr>
          <p>
            <var>ColumnIndexFromGridColumn</var> is an Integer function used to get the position of the specified column relative to the first column in the grid. The return value contains the difference between <var>Column</var> and <var>FirstGridColumn</var> when <var>Columns</var> have been enabled in the grid control. <var>RealIndex</var> is called to translate the position used in the return value. If <var>Columns</var> have not been enabled, the return value is <b>-1</b>.
          </p>
          <p>
            ColumnIndexFromGridColumn is used in the implementation of TCustomGrid methods like:
          </p>
          <ul>
            <li>ColumnFromGridColumn</li>
            <li>DoOPExchangeColRow</li>
            <li>DoOPInsertColRow</li>
            <li>DoOPMoveColRow</li>
            <li>DoOPDeleteColRow</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColumnFromGridColumn"/>
          <link id="TCustomGrid.DoOPExchangeColRow"/>
          <link id="TCustomGrid.DoOPInsertColRow"/>
          <link id="TCustomGrid.DoOPMoveColRow"/>
          <link id="TCustomGrid.DoOPDeleteColRow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Result">
        <short>Relative position for the specified column</short>
      </element>
      <element name="TCustomGrid.ColumnIndexFromGridColumn.Column">
        <short>Column number to locate in the grid</short>
      </element>

      <element name="TCustomGrid.ColumnFromGridColumn">
        <short>
          <var>ColumnFromGridColumn</var> - returns the actual grid column given its index
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ColumnFromGridColumn.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ColumnFromGridColumn.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.ColumnsChanged">
        <short>
          Performs actions needed when one or more columns in the grid are changed
        </short>
        <descr>
          <p>
            <var>ColumnsChanged</var> is procedure used to perform actions needed when one or more <var>Columns</var> in the grid are changed. <var>AColumn</var> contains the column affected by the change, or signals a change to multiple columns when its value is unassigned (contains <b>Nil</b>).
          </p>
          <p>
            When AColumn is Nil, the row or column count and/or fixed row or fixed column count has been changed. When AColumn contains a valid <var>TGridColumn</var> instance, the modified column is located in the Columns collection and the <var>VisualChange</var> method is called.
          </p>
          <p>
            ColumnsChanged is called from methods like: <var>SetFixedCols</var>, <var>SetRowCount</var>, and <var>OnTitleFontChanged</var>. It is also called when the <var>Update</var> method in Columns is called for the <var>TGridColumns</var> collection.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SetFixedCols"/>
          <link id="TCustomGrid.SetRowCount"/>
          <link id="TCustomGrid.OnTitleFontChanged"/>
          <link id="TGridColumns.Update"/>
          <link id="TGridColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColumnsChanged.aColumn">
        <short>Grid column instance for the notification, or Nil</short>
      </element>

      <element name="TCustomGrid.ColWidthsChanged">
        <short>
          <var>ColWidthsChanged</var> - method for dealing with changes in column width
        </short>
        <descr>
          <p>
            ColWidthsChanged has an empty implementation in TCustomGrid.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.CreateColumns">
        <short>
          Allocates and configures resources for a Columns collection
        </short>
        <descr>
          <p>
            <var>CreateColumns</var> is a <var>TGridColumns</var> function used create a new <var>TGridColumns</var> instance for the grid control. <var>TGridColumn</var> is the class type used for items stored in the collection.
          </p>
          <p>
            CreateColumns is called from the <var>Create</var> constructor, and the return value is assigned to the member used for the <var>Columns</var> property.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Create"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn"/>
        </seealso>
      </element>
      <element name="TCustomGrid.CreateColumns.Result">
        <short>TGridColumns instance created in the method</short>
      </element>

      <element name="TCustomGrid.CheckNewCachedSizes">
        <short>
          <var>CheckNewCachedSizes</var> - check the new values of cached sizes
        </short>
        <descr>
          <p>
            CheckNewCachedSizes has an empty implementation in TCustomGrid.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CheckNewCachedSizes.AGCache">
        <short></short>
      </element>

      <element name="TCustomGrid.CreateWnd">
        <short>Creates and configures the widgetset handle for the grid control</short>
        <descr>
          <p>
            <var>CreateWnd</var> is an overridden method in <var>TCustomGrid</var>. It calls the inherited method to allocate the <var>Handle</var> for the widgetset class.
          </p>
          <p>
            CreateWnd ensures that internal flags used for horizontal and vertical scrollbar visibility are updated to reflect the states for the control Handle. The <var>CheckPosition</var> method is called to determine the cell selection in the grid. <var>VisualChange</var> is called to refresh the visible area and scrollbars in the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CheckPosition"/>
          <link id="TCustomGrid.VisualChange"/>
          <link id="#lcl.controls.TWinControl.CreateWnd"/>
          <link id="#lcl.controls.TWinControl.Handle"/>
        </seealso>
      </element>

      <!-- WIP -->
      <element name="TCustomGrid.CreateParams" link="#lcl.controls.TWinControl.CreateParams"/>
      <element name="TCustomGrid.CreateParams.Params">
        <short>Creation parameters updated in the method</short>
      </element>

      <element name="TCustomGrid.Click">
        <short>Performs actions when a mouse click occurs in the grid control</short>
        <descr>
          <p>
            <var>Click</var> is an overridden method used to perform action needed when a mouse click occurs in the control. The grid control provides an internal flag to suppress mouse click handling when the event occurs in a "hot zone" (fixed header cells for columns or rows). Click checks the value in the internal flag, and calls the inherited method when the click occurs in the "normal" data cells for the grid.
          </p>
          <p>
            Click is called from methods like <var>SetCol</var>, <var>SetRow</var>, and <var>SetColRow</var> to emulate a mouse click when values are assigned to the <var>Col</var> and/or <var>Row</var> properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.ColRow"/>
          <link id="#lcl.controls.TControl.Click"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DblClick">
        <short>Performs actions needed to handle mouse double click events in the control</short>
        <descr>
          <p>
            <var>DblClick</var> is an overridden method used to perform actions needed when a mouse Double Click event occurs in the grid control.
          </p>
          <p>
            <var>SelectActive</var> is set to False to ignore an active cell or range selection in the control. The internal <var>TGridState</var> member for the control is set to <var>gsNormal</var> to reflect the new state for the control.
          </p>
          <p>
            DblClick uses values in the <var>Options</var> property to determine whether double click is enabled for column or row sizing operations in the control. Some of the Options values relevant to DblClick include:
          </p>
          <dl>
            <dt>goColSizing</dt>
            <dd>Column sizing in enabled for the control.</dd>
            <dt>goRowSizing</dt>
            <dd>Row sizing is enabled for the control.</dd>
            <dt>goDblClickAutoSize</dt>
            <dd>A mouse double click resizes the column automatically.</dd>
          </dl>
          <p>
            When the needed Options values are present, and match the current <var>CursorState</var> for the control, the corresponding action is performed. <var>AutoAdjustColumn</var> is called for a column resize action. <var>RestoreCursor</var> is called, and <var>HeaderSized</var> is called to signal completion of the column resize operation. Row resize actions for double click mouse events are not currently implemented.
          </p>
          <p>
            If the values in Options or CursorState do not meet the required conditions, the inherited method is called.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TControl.DblClick"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultColWidthIsStored">
        <short>Indicates if the DefaultColWidth is available in component streaming</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DefaultColWidthIsStored.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.DefaultRowHeightIsStored">
        <short>Indicates if the DefaultRowHeight is available in component streaming</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DefaultRowHeightIsStored.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.DefineProperties" link="#rtl.Classes.TComponent.DefineProperties"/>
      <element name="TCustomGrid.DefineProperties.Filer">
        <short></short>
      </element>

      <element name="TCustomGrid.DestroyHandle" link="#lcl.controls.TWinControl.DestroyHandle"/>

      <element name="TCustomGrid.DialogChar">
        <short>Applies an accelerator key for a column in the grid</short>
        <descr>
          <p>
            <var>DialogChar</var> is an overridden <var>Boolean</var> function used to apply Lazarus messages with accelerator keys for columns in the grid. Message contains the <var>TLMKey</var> instance with the message examined in the method. DialogChar examines each of the <var>Columns</var> defined for the grid to determine if the CharCode for the <var>Message</var> is an accelerator key appearing in the title for the column. When a match is found, the <var>HeaderClick</var> method is called to activate the column.
          </p>
          <p>
            The return value contains the result from the inherited <var>DialogChar</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.HeaderClick`"/>
          <link id="#lcl.controls.TWinControl.DialogChar"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DialogChar.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DialogChar.Message">
        <short>Lazarus messaged examined in the method</short>
      </element>

      <element name="TCustomGrid.DoCompareCells">
        <short>
          Performs a comparison between the specified cells in the grid control
        </short>
        <descr>
          <p>
            <var>DoCompareCells</var> signals the <var>OnCompareCells</var> event handler (when assigned) to perform the comparison. The return value contains the relative sort order for the compared cells, and uses the following values:
          </p>
          <dl>
            <dt>-1</dt>
            <dd>The cell at ACol and ARow occurs comes before the cell at BCol and BRow.</dd>
            <dt>0</dt>
            <dd>The specified cells have the same value.</dd>
            <dt>1</dt>
            <dd>The cell at ACol and ARow occurs comes after the cell at BCol and BRow.</dd>
          </dl>
          <p>
            When OnCompareCells is not assigned, the return value is always <b>0</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnCompareCells"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DoCompareCells.Result">
        <short>Relative sort order for the compared cells</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.Acol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.ARow">
        <short>Row number for the cell</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.Bcol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomGrid.DoCompareCells.BRow">
        <short>Row number for the cell</short>
      </element>

      <element name="TCustomGrid.DoCopyToClipboard">
        <short>
          <var>DoCopyToClipboard</var> - copy the selected data to the clipboard, leaving the original data in place</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoCutToClipboard">
        <short>
          <var>DoCutToClipboard</var> - cut the data from its current site and place it on the clipboard</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoEditButtonClick">
        <short>
          Performs actions needed when the button for editor control is clicked
        </short>
        <descr>
          <p>
            <var>DoEditButtonClick</var> is a procedure used to perform actions requires when the button for a cell editor or button column is clicked.
          </p>
          <p>
            <var>ACol</var> and <var>ARow</var> contain the Integer coordinates for the cell where the action occurred.
          </p>
          <p>
            DoEditButtonClick signals the <var>OnEditButtonClick</var> and <var>OnButtonClick</var> event handlers when they have been assigned for the grid control.
          </p>
          <p>
            DoEditButtonClick is used in the implementation of the <var>EditButtonClicked</var> method used in cell editor controls, and the <var>MouseUp</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnEditButtonClick"/>
          <link id="TCustomGrid.OnButtonClick"/>
          <link id="TCustomGrid.MouseUp"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DoEditButtonClick.ACol">
        <short>Column number for the affected cell</short>
      </element>
      <element name="TCustomGrid.DoEditButtonClick.ARow">
        <short>Row number for the affected cell</short>
      </element>

      <element name="TCustomGrid.DoEditorHide">
        <short>
          <var>DoEditorHide</var> - hide the data in the editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoEditorShow">
        <short>
          <var>DoEditorShow</var> - show the data in the editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoExit" link="#lcl.controls.TWinControl.DoExit"/>
      <element name="TCustomGrid.DoEnter" link="#lcl.controls.TWinControl.DoEnter"/>

      <element name="TCustomGrid.DoLoadColumn">
        <short>Signals the OnLoadColumn event handler for the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoLoadColumn.Sender">
        <short></short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aColIndex">
        <short></short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aCfg">
        <short></short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aVersion">
        <short></short>
      </element>
      <element name="TCustomGrid.DoLoadColumn.aPath">
        <short></short>
      </element>

      <element name="TCustomGrid.DoSaveColumn">
        <short>Signals the OnSaveColumn event handler for the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoSaveColumn.Sender">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aColIndex">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aCfg">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aVersion">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSaveColumn.aPath">
        <short></short>
      </element>

      <element name="TCustomGrid.DoMouseWheel">
        <short>Applies mouse wheel options and handles the mouse wheel operation</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoMouseWheel.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheel.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheel.WheelDelta">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheel.MousePos">
        <short></short>
      </element>

      <element name="TCustomGrid.DoMouseWheelDown" link="#lcl.controls.TControl.DoMouseWheelDown"/>
      <element name="TCustomGrid.DoMouseWheelDown.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelDown.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelDown.MousePos">
        <short></short>
      </element>

      <element name="TCustomGrid.DoMouseWheelUp" link="#lcl.controls.TControl.DoMouseWheelUp"/>
      <element name="TCustomGrid.DoMouseWheelUp.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelUp.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelUp.MousePos">
        <short></short>
      </element>

      <element name="TCustomGrid.DoMouseWheelLeft" link="#lcl.controls.TControl.DoMouseWheelLeft"/>
      <element name="TCustomGrid.DoMouseWheelLeft.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelLeft.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelLeft.MousePos">
        <short></short>
      </element>

      <element name="TCustomGrid.DoMouseWheelRight" link="#lcl.controls.TControl.DoMouseWheelRight"/>
      <element name="TCustomGrid.DoMouseWheelRight.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelRight.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.DoMouseWheelRight.MousePos">
        <short></short>
      </element>

      <element name="TCustomGrid.DoAutoAdjustLayout">
        <short>
          Performs actions to apply the auto-layout policy for columns using the specified scaling
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AMode">
        <short></short>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AXProportion">
        <short></short>
      </element>
      <element name="TCustomGrid.DoAutoAdjustLayout.AYProportion">
        <short></short>
      </element>

      <element name="TCustomGrid.DoOnChangeBounds" link="#lcl.controls.TControl.DoOnChangeBounds"/>

      <element name="TCustomGrid.DoOPDeleteColRow">
        <short>
          <var>DoOPDeleteColRow</var> performs the operation for deleting a column or row (depending on value of <var>IsCol</var>)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoOPDeleteColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPDeleteColRow.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.DoOPExchangeColRow">
        <short>
          <var>DoOPExchangeColRow</var> - perform the operation for exchanging either the current column or row (depending on value of <var>IsCol</var>) with the column or row specified by <var>WithIndex</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPExchangeColRow.WithIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.DoOPInsertColRow">
        <short>
          <var>DoOPInsertColRow</var> - perform the operation for inserting either a column or a row (depending on the value of <var>IsCol</var>) at the indexed position
        </short>
        <descr></descr>
       <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoOPInsertColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPInsertColRow.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.DoOPMoveColRow">
        <short>
          <var>DoOPMoveColRow</var> - performs the operation for moving either a column or a row (depending on the value of <var>IsCol</var>)  between <var>FromIndex</var> and <var>ToIndex</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.FromIndex">
        <short></short>
      </element>
      <element name="TCustomGrid.DoOPMoveColRow.ToIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.DoPasteFromClipboard">
        <short>
          <var>DoPasteFromClipboard</var> paste the data from the clipboard to the current location
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoPrepareCanvas">
        <short>
          <var>DoPrepareCanvas</var> - get the canvas ready for drawing
        </short>
        <descr>
          Signals the OnPrepareCanvas event handler (when assigned) to prepare the Canvas for the cell using the specified state.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DoPrepareCanvas.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DoOnResize">
        <short>Performs actions needed when the grid control is resized</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DoSetBounds" link="#lcl.controls.TControl.DoSetBounds"/>
      <element name="TCustomGrid.DoSetBounds.ALeft">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSetBounds.ATop">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSetBounds.AWidth">
        <short></short>
      </element>
      <element name="TCustomGrid.DoSetBounds.AHeight">
        <short></short>
      </element>

      <element name="TCustomGrid.DoUTF8KeyPress">
        <short>Applies a UTF-8-encoded character to the active cell editor in the control</short>
        <descr>
          <p>
            <var>DoUTF8KeyPress</var> is an overridden method used to apply the UTF-8-encoded character in <var>UTF8Key</var> to the active cell <var>Editor</var> for the control. The return value is <b>True</b> if the character is successfully handled.
          </p>
          <p>
            DoUTF8KeyPress calls the inherited method on entry to determine if the character is handled in the ancestor class. No additional actions are performed in the method when the character is handled in the ancestor.
          </p>
          <p>
            Otherwise, <var>EditingAllowed</var> is called to determine if a cell editor can be displayed for the column number in <var>Col</var>. When allowed, the <var>EditorShowChar</var> method is called to apply the value in UTF8Key to the cell Editor. The value in UTF8Key is set to an empty string (<b>''</b>), and the return is set to <b>True</b> on successful completion of the operation.
          </p>
        </descr>
        <seealso>
          <link id="#lcl.controls.TWinControl.DoUTF8KeyPress"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DoUTF8KeyPress.Result">
        <short>True if the character was successfully applied in the method</short>
      </element>
      <element name="TCustomGrid.DoUTF8KeyPress.UTF8Key">
        <short>UTF-8 character value handled in the method</short>
      </element>

      <element name="TCustomGrid.DrawBorder">
        <short>Draws the border for the grid control</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.InternalNeedBorder"/>
          <link id="TCustomGrid.BorderStyle"/>
          <link id="TCustomGrid.Flat"/>
          <link id="#lcl.controls.TControl.ClientHeight"/>
          <link id="#lcl.controls.TControl.ClientWidth"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DrawAllRows">
        <short>Draws all of the rows for the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DrawFillRect">
        <short></short>
        <descr>
          Use FillRect after calc the new rect depend on Right To Left.
        </descr>
        <notes><note>What?</note></notes>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawFillRect.aCanvas">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawFillRect.R">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawCell">
        <short>Draws a cell at the given grid location (Col, Row) or in the specified Rectangle</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawCell.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCell.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCell.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCell.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawCellGrid">
        <short>Draws a grid cell at the specified location with the given state</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawCellGrid.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellGrid.astate">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawTextInCell">
        <short>Draws the text for a non-fixed cell in the grid</short>
        <descr>
          <p>
            The implementation for <var>DrawTextInCell</var> is empty in TCustomGrid. It is overridden in descendent classes.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawTextInCell.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawThemedCell">
        <short>
          Draws a cell using the theme services for the specified grid drawing state
        </short>
        <descr>
          <p>
            <var>DrawThemedCell</var> is a procedure used to draw the cell at the specified coordinates using the theme services for the platform or widget set.
          </p>
          <p>
            <var>aCol</var> contains the column number for the affected cell.
          </p>
          <p>
            <var>aRow</var> contains the row number for the affected cell.
          </p>
          <p>
            <var>aRect</var> contains the screen coordinates for the cell rendered in the method.
          </p>
          <p>
            <var>aState</var> contains the grid drawing state applied to the cell. aState contains a value from the <var>TGridDrawState</var> enumeration that determines the theme service element details used for the drawing operation.
          </p>
          <table>
            <tr>
              <td><b>Grid Draw State</b></td>
              <td><b>Theme Element</b></td>
              <td><b>Description</b></td>
            </tr>
            <tr>
              <td>gdPushed</td>
              <td>thHeaderItemPressed</td>
              <td>Draws the cell using the Pressed state</td>
            </tr>
            <tr>
              <td>gdHot</td>
              <td>thHeaderItemHot</td>
              <td>Draws the cell using the Hotlighted state</td>
            </tr>
            <tr>
              <td>Other states</td>
              <td>thHeaderItemNormal</td>
              <td>Draws the cell using the normal drawing state</td>
            </tr>
          </table>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.DefaultDrawCell"/>
        </seealso>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aCol">
        <short>Column number for the affected cell</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aRow">
        <short>Row number for the affected cell</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aRect">
        <short>Screen coordinates for the cell</short>
      </element>
      <element name="TCustomGrid.DrawThemedCell.aState">
        <short>Grid drawing state for the cell</short>
      </element>

      <element name="TCustomGrid.DrawCellText">
        <short>
          <var>DrawCellText</var> - draws the given text string in the cell specified by Col, Row or by Rectangle
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawCellText.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellText.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellText.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellText.aState">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawCellText.aText">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawGridCheckboxBitmaps">
        <short>
          <var>DrawGridCheckboxBitmaps</var> - draws checkbox bitmaps in the nominated rectangle with the specified checkbox state
        </short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawGridCheckboxBitmaps.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawButtonCell">
        <short>Draws a cell using theme services for button styles</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawButtonCell.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawColRowMoving">
        <short>Draws a column or row when dragging is in effect</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DrawColumnText">
        <short>
          <var>DrawColumnText</var> - draw the text of the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawColumnText.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aRect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawColumnText.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawColumnTitleImage">
        <short>
          <var>DrawColumnTitleImage</var> - draw the title image of the specified column</short>
      </element>
      <element name="TCustomGrid.DrawColumnTitleImage.ARect">
        <short></short>
      </element>
      <element name="TCustomGrid.DrawColumnTitleImage.AColumnIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.DrawEdges">
        <short>Draws the edges for the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DrawFocusRect">
        <short>
          Draws the focus rectangle for the specified cell
        </short>
        <descr>
          <p>
            DrawFocusRect has an empty implementation in TCustomGrid.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawFocusRect.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomGrid.DrawFocusRect.aRow">
        <short>Row number for the cell</short>
      </element>
      <element name="TCustomGrid.DrawFocusRect.ARect">
        <short>TRect instance with the initial bounds for the cell</short>
      </element>

      <element name="TCustomGrid.DrawRow">
        <short>
          Draws the specified row in the grid control
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.DrawRow.aRow">
        <short></short>
      </element>

      <element name="TCustomGrid.EditButtonClicked">
        <short>
          <var>EditButtonClicked</var> - calls <var>OnEditButtonClick</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditButtonClicked.Sender">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorDoGetValue">
        <short>
          <var>EditordoGetValue</var> - method for getting a value in the Editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorDoResetValue">
        <short>Resets the value in the cell when the cell editor is cancelled or hidden</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorDoSetValue">
        <short>
          <var>EditordoSetValue</var> - method for specifying a value in the Editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorCanAcceptKey">
        <short>
          <var>EditorCanAcceptKey</var> - returns True if the Editor is able to accept the nominated (UTF8) key
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorCanAcceptKey.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorCanAcceptKey.ch">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorIsReadOnly">
        <short>
          <var>EditorIsReadOnly</var> - returns True if the Editor has Read Only status
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorIsReadOnly.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorHide">
        <short>Hides a visible cell editor in the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorLocked">
        <short>
          <var>EditorLocked</var> - returns True if the Editor is locked, i.e. unable to accept input or make changes
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorLocked.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.EditingAllowed">
        <short>Indicates if the specified column allows editing</short>
        <descr>
          Returns True if both the grid and the current column allow editing.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditingAllowed.Result">
        <short>Returns True if both the grid and the current column allow editing</short>
      </element>
      <element name="TCustomGrid.EditingAllowed.ACol">
        <short>Column number examined in the method</short>
      </element>

      <element name="TCustomGrid.EditorSelectAll">
        <short>Selects the entire content in the cell when a cell editor is active</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorShow">
        <short>Displays the editor for the selected cell</short>
        <descr>
          Displays and enables the cell editor for the selected cell, and optionally selects all content in the cell.
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorShow.SetAll">
        <short>
          Indicates if the entire content in the cell is selected in its cell editor
        </short>
      </element>

      <element name="TCustomGrid.EditorShowInCell">
        <short>
          <var>EditorShowInCell</var> - shows the Editor's content
          <i>in situ</i> in the Cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorShowInCell.aCol">
        <short>Column number where the editor is displayed</short>
      </element>
      <element name="TCustomGrid.EditorShowInCell.aRow">
        <short>Row number where the editor is displayed</short>
      </element>

      <element name="TCustomGrid.EditorWidthChanged">
        <short>
          <var>EditorWidthChanged</var> - method for dealing with a change in editor width
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorWidthChanged.aCol">
        <short>Column number for the affected editor</short>
      </element>
      <element name="TCustomGrid.EditorWidthChanged.aWidth">
        <short>New width for the cell with the editor control</short>
      </element>

      <element name="TCustomGrid.FirstGridColumn">
        <short>Gets the position of the first column after any fixed columns in the grid</short>
        <descr>
          <p>
            <var>FirstGridColumn</var> is an <var>Integer</var> function used to get the ordinal position of the first column appearing after any fixed column in the grid control. The return value contains the value in the <var>FixedCols</var> property.
          </p>
          <p>
            FirstGridColumn is used in the implementation of methods including:
          </p>
          <ul>
            <li>GetColWidths</li>
            <li>GetIsCellTitle</li>
            <li>ColumnIndexFromGridColumn</li>
            <li>GridColumnFromColumnIndex</li>
            <li>ColumnsChanged</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColWidths"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.GetIsCellTitle"/>
          <link id="TCustomGrid.ColumnIndexFromGridColumn"/>
          <link id="TCustomGrid.GridColumnFromColumnIndex"/>
          <link id="TCustomGrid.ColumnsChanged"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FirstGridColumn.Result">
        <short>Position of the first column after any fixed columns in the grid</short>
      </element>

      <element name="TCustomGrid.FixedGrid">
        <short>
          Determines if all columns or all rows in the grid are fixed
        </short>
        <descr>
          <p>
            <var>FixedGrid</var> is a <var>Boolean</var> function used to determine whether all columns in the grid are defined as fixed columns, or all rows are defined as fixed rows. The return value is <b>True</b> when <var>FixedCols</var> is equal to <var>ColCount</var> <b>OR</b> <var>FixedRows</var> is equal to <var>RowCount</var>.
          </p>
          <p>
            FixedGrid is used in the implementation of methods like: SetFixedCols, SetFixedRows, MouseToGridZone, MouseDown, MouseMove, MouseUp, TryMoveSelect, EditorAlwaysShown, and FixPosition.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FixedGrid.Result">
        <short>True when all of the row or all of the columns in the control are fixed</short>
      </element>

      <element name="TCustomGrid.FontChanged">
        <short>
          <var>FontChanged</var> - method to deal with a change in font
        </short>
        <descr>
          <p>
            <var>FontChanged</var> is an overridden method used to perform actions needed when the <var>Font</var> for the control has been changed.
          </p>
          <p>
            FontChanged ensures that the internal default heights for rows and columns are reset to <b>0</b> (<b>zero</b>). This forces the default column and row heights to be recalculated when the <var>DoAutoAdjustLayout</var> method is called.
          </p>
          <p>
            When <var>csCustomPaint</var> is included in <var>ControlState</var>, the Font is assigned to the <var>Canvas</var> for the control.
          </p>
          <p>
            Otherwise, the FontChanged method is called for the ancestor class and the <var>Columns</var> collection (when Enabled). If the default title font is used for the control, the Font is assigned to <var>TitleFont</var> property.
          </p>
          <p>
            FontChanged is assigned as the <var>OnChange</var> event handler for the <var>Font</var> property in the constructor for the class instance.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Column"/>
          <link id="TCustomGrid.TitleFont"/>
          <link id="TCustomGrid.TitleFontIsStored"/>
          <link id="#lcl.controls.TCustomControl.FontChanged"/>
          <link id="#lcl.controls.TControl.Font"/>
          <link id="#lcl.controls.TControl.ControlState"/>
          <link id="#lcl.graphics.TFont.OnChange"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FontChanged.Sender">
        <short>Object for the event notification</short>
      </element>

      <element name="TCustomGrid.GetAutoFillColumnInfo">
        <short>
          Gets auto-fill information for the specified column
        </short>
        <descr>
          <p>
            <var>GetAutoFillColumnInfo</var> is a method used to get sizing information for an auto-fill column specified in <var>Index</var>. <var>AMin</var>, <var>AMax</var>, and <var>APriority</var> are variable arguments updated with the values for the requested column.
          </p>
          <p>
            GetAutoFillColumnInfo calls <var>ColumnFromGridColumn</var> to get the <var>TGridColumn</var> instance in <var>Columns</var> with the requested values. If a column exists with the requested Index, its properties are stored in the variable parameters. When Index is a fixed column in the grid, the value in APriority is set to <b>0</b> (<b>zero</b>). If Columns has not been Enabled for the control, or the column index is not valid, APriority is set to <b>1</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColumnFromGridColumn"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TGridColumn.MinSize"/>
          <link id="TGridColumn.MaxSize"/>
          <link id="TGridColumn.SizePriority"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.Index">
        <short>Position for the grid column examined in the method</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMin">
        <short>Minimum size for the column</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aMax">
        <short>Maximum size for the column</short>
      </element>
      <element name="TCustomGrid.GetAutoFillColumnInfo.aPriority">
        <short>Sizing priority for the column</short>
      </element>

      <element name="TCustomGrid.GetCellHintText">
        <short>
          Gets the hint for the specified cell using the Options enabled in the grid control
        </short>
        <descr>
          <p>
            <var>GetCellHintText</var> signals the <var>OnGetCellHint</var> event handler (when assigned) to get the hint text for the cell at the position in <var>ACol</var> and <var>ARow</var>. The return value contains the hint text returned from the event handler, or an empty string (<b>''</b>) when the event handler has not been assigned.
          </p>
          <p>
            GetCellHintText is called from the <var>ShowCellHintWindow</var> method when <var>Options</var> contains the value <var>goCellHints</var> and <var>CellHintPriority</var> is <b>not</b> set to <var>chpTruncOnly</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnGetCellHint"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CellHintPriority"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetCellHintText.Result">
        <short>String with the hint text for the specified cell</short>
      </element>
      <element name="TCustomGrid.GetCellHintText.ACol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomGrid.GetCellHintText.ARow">
        <short>Row number for the cell</short>
      </element>

      <element name="TCustomGrid.GetCells">
        <short>Gets the cell content at the specified column and row  numbers</short>
        <descr>
          <p>
            Always returns an empty string ('') in TCustomGrid. Overridden in descendent classes.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetCells.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetCells.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetCells.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnAlignment">
        <short>
          <var>GetColumnAlignment</var> - returns the Alignment value for the nominated column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.Column">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnAlignment.ForTitle">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnColor">
        <short>
          <var>GetColumnColor</var> - returns the Color for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnColor.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnColor.Column">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnColor.ForTitle">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnFont">
        <short>
          <var>GetColumnFont</var> - returns the font for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnFont.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnFont.Column">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnFont.ForTitle">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnLayout">
        <short>
          <var>GetColumnLayout</var> - returns the Text Layout value for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnLayout.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnLayout.Column">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnLayout.ForTitle">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnReadonly">
        <short>
          <var>GetColumnReadonly</var> - returns True if the column is marked ReadOnly
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnReadonly.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnReadonly.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnTitle">
        <short>
          <var>GetColumnTitle</var> - returns the column title string
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnTitle.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnTitle.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetColumnWidth">
        <short>
          <var>GetColumnWidth</var> - returns the width of the column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetColumnWidth.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetColumnWidth.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDeltaMoveNext">
        <short>
          <var>GetDeltaMoveNext</var> return the relative cell coordinate of the next cell to which movement will occur
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.Inverse">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDeltaMoveNext.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnAlignment">
        <short>
          <var>GetDefaultColumnAlignment</var> - returns the default alignment for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnAlignment.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnAlignment.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnWidth">
        <short>
          <var>GetDefaultColumnWidth</var> - returns the default width for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnWidth.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnWidth.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnLayout">
        <short>
          <var>GetDefaultColumnLayout</var> - returns the default text layout for the nominated column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnLayout.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnLayout.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnReadOnly">
        <short>
          <var>GetDefaultColumnReadOnly</var> - returns the default setting of the ReadOnly flag for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnReadOnly.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultColumnTitle">
        <short>
          <var>GetDefaultColumnTitle</var> - returns the default title string for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultColumnTitle.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultColumnTitle.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultEditor">
        <short>
          <var>GetDefaultEditor</var> - returns the default cell editor for the specified column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultEditor.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetDefaultEditor.Column">
        <short></short>
      </element>

      <element name="TCustomGrid.GetDefaultRowHeight">
        <short>
          <var>GetDefaultRowHeight</var> - returns the default row height
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetDefaultRowHeight.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.GetGridDrawState">
        <short>
          Gets the grid drawing state for the cell with the specified column and row numbers
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetGridDrawState.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetGridDrawState.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetGridDrawState.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetImageForCheckBox">
        <short>
          Gets the bitmap used to draw Checkbox columns in the grid
        </short>
        <descr>
          <p>
            <var>GetImageForCheckBox</var> signals the <var>OnUserCheckboxBitmap</var> event handler (when assigned) to get a bitmap used for the checkbox state. If a valid <var>TBitmap</var> instance is not assigned in the event handler, the <var>OnUserCheckBoxImage</var> event handler is signalled (when assigned) to get the <var>TImageList</var>, <var>TBitmap</var>, and <var>ImageIndex</var> used for the purpose.
          </p>
          <p>
            GetImageForCheckBox is used in the implementation of the <var>DrawGridCheckboxBitmaps</var> and <var>DrawCellText</var> methods in <var>TCustomGrid</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnUserCheckboxBitmap"/>
          <link id="TCustomGrid.OnUserCheckboxImage"/>
          <link id="TCustomGrid.DrawGridCheckboxBitmaps"/>
          <link id="TCustomGrid.DrawCellText"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.aCol">
        <short>Column number for the Checkbox cell</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.aRow">
        <short>Row number for the Checkbox cell</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.CheckBoxView">
        <short>Checkbox state for the cell</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.ImageList">
        <short>Image list with images used for Checkbox drawing states</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.ImageIndex">
        <short>Ordinal position of the image used for the corresponding Checkbox state</short>
      </element>
      <element name="TCustomGrid.GetImageForCheckBox.Bitmap">
        <short>Bitmap with the image drawn for the Checkbox state</short>
      </element>

      <element name="TCustomGrid.GetScrollBarPosition">
        <short>
          <var>GetScrollBarPosition</var> - returns the position of the scroll bar specified by
          <var>Which</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetScrollBarPosition.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetScrollBarPosition.Which">
        <short></short>
      </element>

      <element name="TCustomGrid.GetSmoothScroll">
        <short>Checks for the smooth scroll setting in the Options for the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetSmoothScroll.Result">
        <short>True when Options contains the value goSmoothScroll</short>
      </element>
      <element name="TCustomGrid.GetSmoothScroll.Which">
        <short>
          Indicates the scrollbar checked in the method; not used in the current implementation
        </short>
      </element>

      <element name="TCustomGrid.GetSBVisibility">
        <short>
          <var>GetSBVisibility</var> - finds the values of the visibility flags for the scrollbars
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetSBVisibility.HsbVisible">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBVisibility.VsbVisible">
        <short></short>
      </element>

      <element name="TCustomGrid.GetSBRanges">
        <short>
          <var>GetSBRanges</var> - finds the range of values for the scrollbars when visible
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbVisible">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbVisible">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbRange">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbRange">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBRanges.HsbPage">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSBRanges.VsbPage">
        <short></short>
      </element>

      <element name="TCustomGrid.GetSelectedState">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetSelectedState.AState">
        <short></short>
      </element>
      <element name="TCustomGrid.GetSelectedState.IsSelected">
        <short></short>
      </element>

      <element name="TCustomGrid.GetEditMask">
        <short>
          <var>GetEditMask</var> - returns the edit mask string for the specified cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetEditMask.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetEditMask.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetEditMask.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetEditText">
        <short>
          <var>GetEditText</var> - returns the Edit text string for the specified cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetEditText.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetEditText.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetEditText.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetFixedColor">
        <short>
          <var>GetFixedcolor</var> - returns a value for the fixed color
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetFixedColor.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.GetFirstVisibleColumn">
        <short>Gets the position for the first visible non-fixed column in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetFirstVisibleColumn.Result">
        <short>Column number for the first visible column</short>
      </element>

      <element name="TCustomGrid.GetFirstVisibleRow">
        <short>Gets the position for the first visible non-fixed row in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetFirstVisibleRow.Result">
        <short>Row number for the first visible row</short>
      </element>

      <element name="TCustomGrid.GetLastVisibleColumn">
        <short>Gets the position for the last visible non-fixed column in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetLastVisibleColumn.Result">
        <short>Position for the last visible column in the grid</short>
      </element>

      <element name="TCustomGrid.GetLastVisibleRow">
        <short>Gets position for the last visible non-fixed row in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetLastVisibleRow.Result">
        <short>Row number for the last visible non-fixed row</short>
      </element>

      <element name="TCustomGrid.GetSelectedColor">
        <short>
          <var>GetSelectedColor</var> - returns the value for the color of items that have been selected
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetSelectedColor.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.GetTitleShowPrefix">
        <short>Gets the prefix option for titles in the specified column number</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetTitleShowPrefix.Result">
        <short>True when the TGridColumn is configured to use prefixes</short>
      </element>
      <element name="TCustomGrid.GetTitleShowPrefix.Column">
        <short>Column number examined in the method</short>
      </element>

      <element name="TCustomGrid.GetPxTopLeft">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetPxTopLeft.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.GetTruncCellHintText">
        <short>
          Gets the truncated version of a hint for the cell at the specified position
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetTruncCellHintText.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GridColumnFromColumnIndex">
        <short>
          <var>GridColumnFromColumnIndex</var> - returns the number of the column given its column index
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GridColumnFromColumnIndex.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GridColumnFromColumnIndex.ColumnIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.GridMouseWheel">
        <short>Performs actions needed when the mouse wheel is scrolled in the grid</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.MoveNextSelectable"/>
        </seealso>
      </element>
      <element name="TCustomGrid.GridMouseWheel.Shift">
        <short>Shift state modifier in effect for the action</short>
      </element>
      <element name="TCustomGrid.GridMouseWheel.Delta">
        <short>Relative change in the current position for the action</short>
      </element>

      <element name="TCustomGrid.HeaderClick">
        <short>
          <var>HeaderClick</var> - method to deal with a click on the column (if <var>IsColumn</var> is True) or row Header
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.HeaderClick.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.HeaderClick.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.HeaderSized">
        <short>
          <var>HeaderSized</var> - method to deal with re-sizing of a column (IsColumn True) or row header
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.HeaderSized.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.HeaderSized.Index">
        <short></short>
      </element>

      <element name="TCustomGrid.HeaderSizing">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.HeaderSizing.IsColumn">
        <short></short>
      </element>
      <element name="TCustomGrid.HeaderSizing.AIndex">
        <short></short>
      </element>
      <element name="TCustomGrid.HeaderSizing.ASize">
        <short></short>
      </element>

      <element name="TCustomGrid.HideCellHintWindow">
        <short>Cancels the current hint display and restores the saved hint for the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.InternalSetColCount">
        <short>
          <var>InternalSetColCount</var> - specify the column count
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InternalSetColCount.ACount">
        <short></short>
      </element>

      <element name="TCustomGrid.InvalidateGrid">
        <short>
          <var>InvalidateGrid</var> - render the whole grid non-valid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.InvalidateFocused">
        <short>
          <var>InvalidateFocused</var> - render the focused item non-valid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.IsColumnIndexValid">
        <short>
          Indicates if the specified index position is valid for the columns in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsColumnIndexValid.Result">
        <short>True when Index is in range for the column definitions in the grid</short>
      </element>
      <element name="TCustomGrid.IsColumnIndexValid.AIndex">
        <short>Index position examined in the method</short>
      </element>

      <element name="TCustomGrid.IsRowIndexValid">
        <short>
          Indicates if the specified index position is valid for the rows in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsRowIndexValid.Result">
        <short>True when Index is in range for the rows in the grid</short>
      </element>
      <element name="TCustomGrid.IsRowIndexValid.AIndex">
        <short>Index position examined in the method</short>
      </element>

      <element name="TCustomGrid.IsColumnIndexVariable">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsColumnIndexVariable.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.IsColumnIndexVariable.AIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.IsRowIndexVariable">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsRowIndexVariable.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.IsRowIndexVariable.AIndex">
        <short></short>
      </element>

      <element name="TCustomGrid.GetIsCellTitle">
        <short>
          Indicates if the cell at the specified position is a fixed header for a row or column
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetIsCellTitle.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.GetIsCellSelected">
        <short>
          <var>GetIsCellSelected</var> - returns True if the given cell is selected
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.GetIsCellSelected.aRow">
        <short></short>
      </element>

      <element name="TCustomGrid.IsEmptyRow">
        <short>Indicates if the row at the specified position contains empty cells</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.GetCells"/>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsEmptyRow.Result">
        <short>True when all cells in the specified row contain empty strings ('')</short>
      </element>
      <element name="TCustomGrid.IsEmptyRow.ARow">
        <short>Row number to examine in the method</short>
      </element>

      <element name="TCustomGrid.IsMouseOverCellButton">
        <short>
          Indicates if the specified mouse position is over a button in a cell editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.X">
        <short>Screen coordinates for the mouse pointer</short>
      </element>
      <element name="TCustomGrid.IsMouseOverCellButton.Y">
        <short>Screen coordinates for the mouse pointer</short>
      </element>

      <element name="TCustomGrid.KeyDown" link="#lcl.controls.TWinControl.KeyDown"/>
      <element name="TCustomGrid.KeyDown.Key">
        <short></short>
      </element>
      <element name="TCustomGrid.KeyDown.Shift">
        <short></short>
      </element>

      <element name="TCustomGrid.KeyUp" link="#lcl.controls.TWinControl.KeyUp"/>
      <element name="TCustomGrid.KeyUp.Key">
        <short></short>
      </element>
      <element name="TCustomGrid.KeyUp.Shift">
        <short></short>
      </element>

      <element name="TCustomGrid.KeyPress">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.KeyPress.Key">
        <short></short>
      </element>

      <element name="TCustomGrid.LoadContent">
        <short>
          <var>LoadContent</var> - method to load a configuration</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.LoadContent.cfg">
        <short></short>
      </element>
      <element name="TCustomGrid.LoadContent.Version">
        <short></short>
      </element>

      <element name="TCustomGrid.LoadGridOptions">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.LoadGridOptions.cfg">
        <short></short>
      </element>
      <element name="TCustomGrid.LoadGridOptions.Version">
        <short></short>
      </element>

      <element name="TCustomGrid.Loaded" link="#rtl.classes.TComponent.Loaded"/>

      <element name="TCustomGrid.LockEditor">
        <short>
          <var>LockEditor</var> - lock the editor so that it will not accept input or changes
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.MouseButtonAllowed">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MouseButtonAllowed.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseButtonAllowed.Button">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseDown" link="#lcl.controls.TControl.MouseDown"/>
      <element name="TCustomGrid.MouseDown.Button">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseDown.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseDown.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseDown.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseMove" link="#lcl.controls.TControl.MouseMove"/>
      <element name="TCustomGrid.MouseMove.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseMove.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseMove.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseUp" link="#lcl.controls.TControl.MouseUp"/>
      <element name="TCustomGrid.MouseUp.Button">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseUp.Shift">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseUp.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseUp.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.MoveExtend">
        <short>
          <var>MoveExtend</var> - move an extended selection; if <var>Relative</var> is true, use Delta column and row to find position; returns True if successful
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MoveExtend.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveExtend.Relative">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveExtend.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveExtend.DRow">
        <short></short>
      </element>

      <element name="TCustomGrid.MoveNextAuto">
        <short>
          <var>MoveNextAuto</var> - move to next cell in automatic sequence; if <var>Relative</var> is True, use delta col and row to find position; returns True if successful
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MoveNextAuto.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveNextAuto.Inverse">
        <short></short>
      </element>

      <element name="TCustomGrid.MoveNextSelectable">
        <short>
          <var>MoveNextSelectable</var> - move to next selectable cell; use delta col and row if
          <var>Relative</var> is True; returns True if successful
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.Relative">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.MoveNextSelectable.DRow">
        <short></short>
      </element>

      <element name="TCustomGrid.MoveSelection">
        <short>
          <var>MoveSelection</var> - moves the selected text, cell or group of cells
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OffsetToColRow">
        <short>
          <var>OffsetToColRow</var> - move by the value of <var>Offset</var> to another column or row (determined by the value of <var>IsCol</var>), returning True if successful
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.IsCol">
        <short></short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Fisical">
        <short></short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Offset">
        <short></short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.OffsetToColRow.Rest">
        <short></short>
      </element>

      <element name="TCustomGrid.Paint" link="#lcl.controls.TCustomControl.Paint"/>

      <element name="TCustomGrid.PickListItemSelected">
        <short>
          <var>PickListItemSelected</var> - indicates that an item was selected from the pick-list
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.PickListItemSelected.Sender">
        <short></short>
      </element>

      <element name="TCustomGrid.PrepareCanvas">
        <short>
          <var>PrepareCanvas</var> - method to get the canvas ready for drawing at the specified location
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.PrepareCanvas.aState">
        <short></short>
      </element>

      <element name="TCustomGrid.PrepareCellHints">
        <short></short>
        <descr></descr>
        <seealso></seealso>
        <notes>
          <note>Current implementation is empty.</note>
        </notes>
      </element>
      <element name="TCustomGrid.PrepareCellHints.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.PrepareCellHints.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.ResetDefaultColWidths">
        <short>Restores the default width for columns in the grid</short>
        <descr>
          <p>
            <var>ResetDefaultColWidths</var> updates an internal member with the list of column widths currently in use for the grid. ResetDefaultColWidths calls the <var>VisualChange</var> method after resetting the column widths to their default value. No actions are performed in the method when <var>AutoFillColumns</var> contains <b>True</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.VisualChange"/>
          <link id="TCustomGrid.AutoFillColumns"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ResetEditor">
        <short>
          <var>ResetEditor</var> - resets the current editor for the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ResetLastMove">
        <short>Resets the member used to track the last row or column movement</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ResetOffset">
        <short>
          <var>ResetOffset</var> - resets the offset, checking columns and rows if demanded
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ResetOffset.chkCol">
        <short></short>
      </element>
      <element name="TCustomGrid.ResetOffset.ChkRow">
        <short></short>
      </element>

      <element name="TCustomGrid.ResetSizes">
        <short>
          <var>ResetSizes</var> - resets the sizes
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ResizeColumn">
        <short>
          <var>ResizeColumn</var> - resizes the nominated column to the specified width
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ResizeColumn.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.ResizeColumn.aWidth">
        <short></short>
      </element>

      <element name="TCustomGrid.ResizeRow">
        <short>
          <var>ResizeRow</var> - resizes the nominated row to the specified height
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ResizeRow.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.ResizeRow.aHeight">
        <short></short>
      </element>

      <element name="TCustomGrid.RowHeightsChanged">
        <short>
          <var>RowHeightsChanged</var> - method invoked when row heights are changes
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.SaveContent">
        <short>
          <var>SaveContent</var> as specified in the XML configuration variable
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SaveContent.cfg">
        <short></short>
      </element>

      <element name="TCustomGrid.SaveGridOptions">
        <short>Saves grid options to the specified XML configuration file</short>
        <descr>
          <p>
            Stores <var>TGridOption</var> and <var>TGridOption2</var> enumeration values found in the <var>Options</var> and <var>Options2</var> properties to the XML configuration file specified in <var>cfg</var>. Used in the implementation of the <var>SaveContent</var> method.
          </p>
          <p>
            Use <var>LoadContent</var> to load option settings into the current grid class instance.
          </p>
        </descr>
        <seealso>
          <link id="TGridOption"/>
          <link id="TGridOption2"/>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.Options2"/>
          <link id="TCustomGrid.SaveContent"/>
          <link id="TCustomGrid.LoadContent"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveGridOptions.cfg">
        <short>XML configuration file where values are stored</short>
      </element>

      <element name="TCustomGrid.ScrollBarRange">
        <short>
          <var>ScrollBarRange</var> - specify the range of the scrollbar;
          <var>Which</var> determines whether it is horizontal or vertical
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBarRange.Which">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarRange.aRange">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarRange.aPage">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollBarPosition">
        <short>
          <var>ScrollBarPosition</var> - records the position (<var>Value</var>) of the scrollbar; <var>Which</var> determines horizontal or vertical
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBarPosition.Which">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarPosition.Value">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollBarIsVisible">
        <short>
          <var>ScrollBarIsVisible</var> - Returns True if visible;
          <var>Which</var> determines whether horizontal or vertical
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBarIsVisible.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarIsVisible.Which">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollBarPage">
        <short>
          <var>ScrollBarPage</var> - a Page movement of the scrollbar (specified by
          <var>Which</var>)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBarPage.Which">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarPage.aPage">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollBarShow">
        <short>ScrollBarShow method</short>
        <descr>
          <p>
            <var>ScrollBarShow</var> is a procedure used to control the visibility of scrollbars in the grid.
          </p>
          <p>
            <var>Which</var> is an <var>Integer</var> argument that specifies the scrollbar(s) affected in the method, and can include the following constant values:
          </p>
          <dl>
            <dt>SB_HORZ</dt>
            <dd>Horizontal scrollbar</dd>
            <dt>SB_VERT</dt>
            <dd>Vertical scrollbar</dd>
            <dt>SB_BOTH</dt>
            <dd>Both horizontal and vertical scrollbars</dd>
          </dl>
          <p>
            <var>aValue</var> is a <var>Boolean</var> argument that indicates if the specified scrollbar(s) are visible or hidden. When aValue contains <b>True</b>, the corresponding scrollbar(s) are displayed. Otherwise, they are hidden.
          </p>
          <p>
            No actions are performed in the method if a handle has not been allocated for the grid instance (<var>HandleAllocated</var> returns <b>False</b>). ScrollBarShow ensures that <var>gfUpdatingScrollbar</var> is included in the grid flags prior to calling the <var>ShowScrollBar</var> routine in the LCL interface. The flag value is removed immediately after updating the scrollbar display. Internal members used to track scrollbar visibility are set to the state requested in AValue.
          </p>
        </descr>
        <seealso>
          <link id="TGridFlags"/>
          <link id="TGridFlagsOption"/>
          <link id="#LCL.Controls.TWinControl.HandleAllocated"/>
          <link id="#LCL.LCLIntf.ShowScrollBar"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ScrollBarShow.Which">
        <short>Scrollbar(s) affected in the method</short>
      </element>
      <element name="TCustomGrid.ScrollBarShow.aValue">
        <short>True indicates the scrollbar(s) are visible</short>
      </element>

      <element name="TCustomGrid.ScrollBarAutomatic">
        <short></short>
        <descr>
          Check if scrollbars are shown automatically by the grid or not.
          'Which' can be any of : SB_BOTH, SB_VERT, SB_HORZ
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBarAutomatic.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBarAutomatic.Which">
        <short></short>
      </element>

      <element name="TCustomGrid.ScrollBy">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.ScrollBy.DeltaX">
        <short></short>
      </element>
      <element name="TCustomGrid.ScrollBy.DeltaY">
        <short></short>
      </element>

      <element name="TCustomGrid.SelectEditor">
        <short>
          <var>SelectEditor</var> - chooses the cell editor for the current cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.SelectCell">
        <short>Is called if a grid cell is highlighted</short>
        <descr>
          <p>
            The SelectCell  method is called if a grid cell will be highlighted.
          </p>
          <p>
            The <var>aCol</var> and <var>aRow</var> parameters contain the column and the row of the highlighted cell.
          </p>
          <p>
            Component developers may use the <var>SelectCell</var> method to react to focus changes. The <var>Result</var> is true if the cell can be selected. Application developers should use the <link id="TCustomDrawGrid.OnSelectCell">OnSelectCell</link> event instead.
          </p>
        </descr>
      </element>
      <element name="TCustomGrid.SelectCell.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.SelectCell.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.SelectCell.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.SetCanvasFont">
        <short>
          Sets the font for the canvas to the specified value
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetCanvasFont.aFont">
        <short>Font applied to the canvas for the grid</short>
      </element>

      <element name="TCustomGrid.SetColCount">
        <short>Sets the value in the ColCount property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColCount.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColor">
        <short>
          Sets the value in the Color property
        </short>
        <descr></descr>
        <seealso>
          <link id="#LCL.Controls.TControl.Color"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetColor.Value">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetColRow">
        <short>
          Makes the specified column and row the selected cell in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetColRow.ACol">
        <short>Column number for the selected cell</short>
      </element>
      <element name="TCustomGrid.SetColRow.ARow">
        <short>Row number for the selected cell</short>
      </element>

      <element name="TCustomGrid.SetCursor">
        <short>Changes the cursor shape in the grid to the specified value</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ColSizingCursor"/>
          <link id="TCustomGrid.RowSizingCursor"/>
          <link id="TCustomGrid.CursorState"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetCursor.AValue">
        <short>Cursor shape used for the mouse pointer in the grid</short>
      </element>

      <element name="TCustomGrid.SetEditText">
        <short>
          <var>SetEditText</var> - specifies the text-string to be placed in the Editor for processing
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetEditText.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.SetEditText.ARow">
        <short></short>
      </element>
      <element name="TCustomGrid.SetEditText.Value">
        <short></short>
      </element>

      <element name="TCustomGrid.SetBorderStyle">
        <short>
          <var>SetBorderStyle</var> - specifies a new border style
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetBorderStyle.NewStyle">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFixedColor">
        <short>
          <var>SetFixedcolor</var> - specifies color for fixed cells
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetFixedColor.AValue">
        <short></short>
      </element>

      <element name="TCustomGrid.SetFixedCols">
        <short>Sets the value for the FixedCols property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedCols.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetFixedRows">
        <short>Sets the value for the FixedRows property</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.FixedRows"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SetFixedRows.AValue">
        <short>New value for the property</short>
      </element>

      <element name="TCustomGrid.SetRawColWidths">
        <short>Sets column widths during LCL component streaming</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetRawColWidths.ACol">
        <short>Column number for the specified width</short>
      </element>
      <element name="TCustomGrid.SetRawColWidths.AValue">
        <short>Width in pixels for the specified column</short>
      </element>

      <element name="TCustomGrid.SetSelectedColor">
        <short>
          <var>SetSelectedColor</var> - specifies color for cells that have been selected
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SetSelectedColor.AValue">
        <short>New value used as the selected color</short>
      </element>

      <element name="TCustomGrid.ShowCellHintWindow">
        <short>Gets and displays the cell hint(s) for the current cell in the grid</short>
        <descr>
          <p>
            <var>ShowCellHintWindow</var> is a procedure used to gets the value(s) and display cell hint(s) for the cell located at the screen position in <var>APoint</var>. Values in the <var>Options</var> and <var>CellHintPriority</var> properties determine the text available for use as cell hints.
          </p>
          <p>
            <var>GetCellHintText</var> and <var>GetTruncCellHintText</var> are called to get the corresponding hint text for the options and hint priority. <var>AddToHint</var> is called to apply the derived text to the values displayed in the control using its <var>Hint</var> property. <var>Application.ActivateHint</var> is called to display the hint window.
          </p>
          <p>
            No actions are performed in the method when <var>ShowHints</var> contains <b>False</b>,  when the mouse pointer is not positioned over a grid cell, when <var>EditorMode</var> is <b>True</b>, or at design-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.CellHintPriority"/>
          <link id="TCustomGrid.GetCellHintText"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
          <link id="TCustomGrid.HideCellHintWindow"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ShowCellHintWindow.APoint">
        <short>Screen coordinates for the mouse pointer</short>
      </element>

      <element name="TCustomGrid.SizeChanged">
        <short>
          <var>SizeChanged</var> - specifies the old number of columns and rows
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.SizeChanged.OldColCount">
        <short></short>
      </element>
      <element name="TCustomGrid.SizeChanged.OldRowCount">
        <short></short>
      </element>

      <element name="TCustomGrid.Sort">
        <short>Sorts rows or columns in the grid</short>
        <descr>
          <p>
            <var>Sort</var> is a method used to sort items in the grid. When <var>ColSorting</var> is True, it sorts the items in a column. Otherwise, it  sorts a row. The three index values  specify the items to be sorted.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.Sort.ColSorting">
        <short>Indicates if the sort is performed for a column or a row</short>
      </element>
      <element name="TCustomGrid.Sort.Index">
        <short></short>
      </element>
      <element name="TCustomGrid.Sort.IndxFrom">
        <short></short>
      </element>
      <element name="TCustomGrid.Sort.IndxTo">
        <short></short>
      </element>

      <element name="TCustomGrid.StartPushCell">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TopLeftChanged">
        <short>
          <var>TopLeftChanged</var> - the top left cell has changed</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TryMoveSelection">
        <short>
          <var>TryMoveSelection</var> - attempts to move the selection by the specified offset; returns True if successful</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.TryMoveSelection.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.TryMoveSelection.Relative">
        <short></short>
      </element>
      <element name="TCustomGrid.TryMoveSelection.DCol">
        <short></short>
      </element>
      <element name="TCustomGrid.TryMoveSelection.DRow">
        <short></short>
      </element>

      <element name="TCustomGrid.UnLockEditor">
        <short>
          <var>UnLockEditor</var> - frees a previously locked Editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.UnprepareCellHints">
        <short></short>
        <descr></descr>
        <seealso></seealso>
        <notes>
          <note>Current implementation is empty in TCustomGrid.</note>
        </notes>
      </element>

      <element name="TCustomGrid.UpdateHorzScrollBar">
        <short>
          <var>UpdateHorzScrollBar</var> - updates the scrollbar in the given range by the given page, if it is visible</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.aVisible">
        <short></short>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.aRange">
        <short></short>
      </element>
      <element name="TCustomGrid.UpdateHorzScrollBar.aPage">
        <short></short>
      </element>

      <element name="TCustomGrid.UpdateSelectionRange">
        <short>
          Updates the selection range when the selection or other visual aspects of the grid are changed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.UpdateVertScrollbar">
        <short>
          <var>UpdateVertScrollbar</var> - updates the scrollbar in the given range by the given page, if it is visible</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.aVisible">
        <short></short>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.aRange">
        <short></short>
      </element>
      <element name="TCustomGrid.UpdateVertScrollbar.aPage">
        <short></short>
      </element>

      <element name="TCustomGrid.UpdateBorderStyle">
        <short>Updates the border style used for the control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ValidateEntry">
        <short>Validates the value for the specified cell</short>
        <descr>
          <p>
            <var>ValidateEntry</var> is a <var>Boolean</var> function used to a validate the value for the cell at the specified <var>Col</var> and <var>Row</var> position.
          </p>
          <p>
            ValidateEntry signals the <var>OnValidateEntry</var> event handler (when assigned) to perform validation for the cell. The return value is <b>True</b> when <var>OnValidateEntry</var> completes successfully, or when the event handler has not been assigned.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.OnValidateEntry"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ValidateEntry.Result">
        <short>True when validation completes successfully</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.ACol">
        <short>Column number for the operation</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.ARow">
        <short>Row number for the operation</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.OldValue">
        <short>Value on entry to the method</short>
      </element>
      <element name="TCustomGrid.ValidateEntry.NewValue">
        <short>Value on exit from the method</short>
      </element>

      <element name="TCustomGrid.VisualChange">
        <short>
          Updates the grid after changes to the visual properties in the control
        </short>
        <descr>
          <p>
            <var>VisualChange</var> is a procedure used to update the grid when visual aspects of the control have been changed. VisualChange calls <var>UpdateSizes</var> to refresh the size of cells in the grid, and calls <var>Invalidate</var> to force the control to be redrawn.
          </p>
          <p>
            No actions are performed in the method when <var>BeginUpdate</var> has been called to buffer updates to the grid. VisualChange will resume updates when <var>EndUpdate</var> has been called to disable update buffering.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Invalidate"/>
          <link id="TCustomGrid.BeginUpdate"/>
          <link id="TCustomGrid.EndUpdate"/>
        </seealso>
      </element>

      <element name="TCustomGrid.WMSize">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WMSize.Message">
        <short></short>
      </element>

      <element name="TCustomGrid.WMHScroll">
        <short>
          <var>WMHScroll</var> - system message for horizontal scrolling</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WMHScroll.message">
        <short></short>
      </element>

      <element name="TCustomGrid.WMVScroll">
        <short>
          <var>WMVScroll</var> - system message for vertical scrolling</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.WMVScroll.message">
        <short></short>
      </element>

      <element name="TCustomGrid.WMKillFocus" link="#lcl.controls.TWinControl.WMKillFocus"/>
      <element name="TCustomGrid.WMKillFocus.message">
        <short></short>
      </element>

      <element name="TCustomGrid.WMSetFocus" link="#lcl.controls.TWinControl.WMSetFocus"/>
      <element name="TCustomGrid.WMSetFocus.message">
        <short></short>
      </element>

      <element name="TCustomGrid.WndProc" link="#lcl.controls.TControl.WndProc"/>
      <element name="TCustomGrid.WndProc.TheMessage">
        <short></short>
      </element>

      <element name="TCustomGrid.AllowOutboundEvents">
        <short>
          <var>AllowOutboundEvents</var> - permits mouse click on an imaginary (out-of-bounds) cell; moves cursor to nearest valid cell
        </short>
        <descr>
          <p>
            Normally, when a user clicks on a point over the empty space after cells (for example if grid has three rows but user clicks on imaginary fourth row) the current focused cell will move to the nearest cell to clicked point. We call this an outbound event.
          </p>
          <p>
            The default value or the property is <b>True</b>, as this has been the grid's behavior since the beginning.
          </p>
          <p>
            This was added to mimic Delphi behavior where outbound events are not available; to enable Delphi compatibility set this to <b>False</b>.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.AlternateColor">
        <short>
          The color to be used for the background on alternate rows of the grid. Having alternate rows in different colors can make the grid easier to read
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.AutoAdvance">
        <short>
          Automatically advances the grid position on successive mouse clicks, and ENTER or TAB key presses
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.AutoEdit">
        <short>Indicates if Edit mode is automatically entered when a cell is selected</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.AutoFillColumns">
        <short>Automatically resizes columns so they fill all of the visible area in the grid</short>
        <descr>
          <p>
            When this option is turned on, the grid will resize all columns to fill the grid's client width. The resized columns are determined using the following conditions:
          </p>
          <ol>
            <li><var>Fixed Columns</var> are not resized.</li>
            <li>
              If the grid has <var>Custom Columns</var>, all columns with <var>SizePriority</var> set to 0 are not resized.
            </li>
          </ol>
          <p>
            Note that Custom Columns are initially created with SizePriority set to 1. For TDbGrid, which automatically adds <var>Custom Columns</var>, this means the user will not be able to resize these columns using the mouse.
          </p>
        </descr>
        <notes><note>Need to check whether column resizing is also restricted HERE.</note></notes>
      </element>

      <element name="TCustomGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle">
        <descr>
          <p>
            Only a restricted range of values is available in TCustomGrid: a single border or none.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.BorderColor">
        <short>The color of the border for this control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.CellHintPriority">
        <short>Identifies how text is combined to form the Hint property</short>
        <descr>
          <p>
            <var>CellHintPriority</var> is a <var>TCellHintPriority</var> that identifies how text is combined to form the Hint property. The default value for the is <var>chpAllNoDefault</var>. See <link id="TCellHintPriority"/> for a description of the enumeration values and their meanings.
          </p>
          <p>
            CellHintPriority is used in the implementation of the <var>ShowCellHintWindow</var>, <var>MouseMove</var>, and <var>GetTruncCellHintText</var> methods.
          </p>
        </descr>
        <seealso>
          <link id="TCellHintPriority"/>
          <link id="TCustomGrid.ShowCellHintWindow"/>
          <link id="TCustomGrid.MouseMove"/>
          <link id="TCustomGrid.GetTruncCellHintText"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Col">
        <short>Current column index for the selected grid cell</short>
        <descr>
          <p>
            <var>Col</var> is an Integer which holds the column index for the current cell or grid cursor. The current grid column can be changed programmatically by setting a new value in this property.
          </p>
          <p>
            Setting a new value for the property causes the limits for the column index to be checked when AllowOutboundEvents is set to False. An exception is raised in the CheckLimitsWithError method when the property value is not a valid column index for the grid control.
          </p>
          <p>
            MoveExtend is called to move the selection to the cell at the coordinates in Row and Col. The cell editor is also retrieved (when available) and is displayed.
          </p>
          <p>
            MoveExtend is called to move the selection to the cell at the coordinates in Row and Col. The cell editor is also retrieved (when available) and is displayed.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.ColCount">
        <short>Number of columns in the grid</short>
        <descr>
          <p>
            <var>ColCount</var> is an Integer that represents the number of columns in the grid, including fixed and normal columns. Changing the value in <var>ColCount</var> after <var>Columns</var> have been created causes an <var>EGridException</var> to be raised. Use the <var>Columns</var> collection to add or delete columns defined in the grid.
          </p>
          <p>
            Use <var>FixedCols</var> for the number of fixed columns in the grid.
          </p>
          <p>
            Use <var>VisibleColCount</var> for the number of non-fixed columns in the grid.
          </p>
          <p>
            Use <var>RowCount</var>, <var>FixedRows</var>, and <var>VisibleRowCount</var> to access the row-oriented equivalents.
          </p>
        </descr>
        <errors>
          Raises an <var>EGridException</var> when the value is changed and <var>Columns</var> already exist in the grid.
        </errors>
        <seealso>
          <link id="TCustomGrid.FixedCols"/>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.Columns"/>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.VisibleColCount"/>
          <link id="TCustomGrid.VisibleRowCount"/>
          <link id="TGridPropertyBackup"/>
          <link id="EGridException"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColRow">
        <short>
          Provides access to current column and row numbers as a TPoint instance
        </short>
        <descr>
          <p>
            <var>ColRow</var> is a <var>TPoint</var> property used to provide access to the current values at the position specified in Col and Row. The <var>X</var> member in TPoint is used for the value in the <var>Col</var> property. The <var>Y</var> member in TPoint is used for the value in the <var>Row</var> property.
          </p>
          <p>
            Setting the value for the causes the <var>CheckLimitsWithError</var> method to be called for the X and Y values when <var>AllowOutboundEvents</var> is <b>False</b>. The <var>SetColRow</var> method is called to update the values in the Col and Row properties.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.CheckLimitsWithError"/>
          <link id="TCustomGrid.SetColRow"/>
          <link id="TCustomGrid.AllowOutboundEvents"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColRowDraggingCursor">
        <short>Cursor shape displayed when a column is dragged or moved</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ColRowDragIndicatorColor">
        <short>
          Color used to render the indicator drawn when a column or row is dragged in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ColSizingCursor">
        <short>Cursor shape displayed when a column is resized</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ColumnClickSorts">
        <short>Indicates if clicking a column header changes its sort order</short>
        <descr>
          <p>
            <var>ColumnClickSorts</var> is a <var>Boolean</var> used to indicate if clicking a column header changes its sort order. The default value for the is <b>False</b>.
          </p>
          <p>
            ColumnClickSorts is used in the <var>HeaderClick</var> method to determine if the value in the <var>SortOrder</var> is toggled for a click in the header cell for SortColumn.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="TCustomGrid.SortColumn"/>
          <link id="TCustomGrid.SortOrder"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Columns">
        <short>The definitions for the columns in this grid</short>
        <descr>
          <p>
            <var>Columns</var> is a <var>TGridColumns</var> used to represent column definitions for the grid control. Columns contains the <var>TGridColumn</var> instances which define the attributes for the column such as its size, shape, color, etc.
          </p>
          <p>
            Columns should not be confused with the <i>COLUMNS</i> construct frequently used in <i>SQL</i> programming, which refer to <var>Fields</var> of data. The contents of Fields can be displayed as Columns in a Grid, but they must be seen as separate and distinct. It is irrelevant to refer to the color, font or width of a data field from a database, but these are all very relevant in specifying the appearance of a column in a grid.
          </p>
        </descr>
        <seealso>
          <link id="TGridColumns"/>
        </seealso>
      </element>

      <element name="TCustomGrid.ColWidths">
        <short>Column widths for the grid</short>
        <descr>
          <p>
            The column is specified with the <var>aCol</var> parameter. The <var>aCol</var> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.ColCount">ColCount</link>-1.
          </p>
          <p>
            The return value of the is the width of this column, measured in pixels.
          </p>
          <p>
            The initial width of a newly created column is specified with the <link id="TCustomGrid.DefaultColWidth">DefaultColWidth</link> property. After that the user may redefine this value.
          </p>
          <p>
            If the <link id="TCustomGrid.Options">Options</link> includes the appropriate option value, the column width may also be changed by the user at run-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ColCount"/>
          <link id="TCustomGrid.DefaultColWidth"/>
          <link id="TCustomGrid.RowHeights"/>
          <link id="TCustomGrid.Options"/>
          <link id="TGridOption"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ColWidths.aCol">
        <short></short>
      </element>

      <element name="TCustomGrid.DefaultColWidth">
        <short>Default value for the width of newly created grid columns</short>
        <descr>
          <p>
            If new columns of the grid are created by changing the <link id="TCustomGrid.ColCount">ColCount</link> property, the width of these new columns will be set to the value of the <i>DefaultColWidth</i> property.
          </p>
          <p>
            Use 0 for auto-sized width.
          </p>
          <p>
            Use GetRealDefaultColWidth for the real value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultRowHeight"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultRowHeight">
        <short>Default value for the height of newly created grid rows</short>
        <descr>
          <p>
            If new rows of the grid are created by changing the <link id="TCustomGrid.RowCount">RowCount</link> property, the height of these new rows will be set to the value of the <i>DefaultRowHeight</i>  property.
          </p>
          <p>
            Use 0 for auto-sized height.
          </p>
          <p>
            Use GetRealDefaultRowHeight for the real value.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.DefaultColWidth"/>
        </seealso>
      </element>

      <element name="TCustomGrid.DefaultDrawing">
        <short>Is the default drawing method to be used for this grid? Default is TRUE</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DefaultTextStyle">
        <short>Default style for displaying text - includes alignment, layout, single or multi-lines</short>
      </element>

      <element name="TCustomGrid.DisabledFontColor">
        <short>Color used to draw text in the grid when the Enabled is False</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.DragDx">
        <short>
          <var>DragDx</var> - the amount (DeltaX) by which an object should be dragged</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.Editor">
        <short>The editor to be used for modifying information in the cells of the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorBorderStyle">
        <short>The border style for the Editor used in this grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorMode">
        <short>Is grid ready to accept edits? (EditorMode True)</short>
      </element>

      <element name="TCustomGrid.EditorKey">
        <short>
          <var>EditorKey</var> - is the current key available to the editor?</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorOptions">
        <short>The set of options available for the grid's editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.EditorShowing">
        <short>Is the editor for the grid displayed?</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ExtendedColSizing">
        <short>
          <var>ExtendedColSizing</var> - the sizing to be used for extended columns</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ExtendedRowSizing">
        <short>
          <var>ExtendedRowSizing</var> - the sizing to be used for extended rows
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ExtendedSelect">
        <short>
          <var>ExtendedSelect</var> - the ability to select cells beyond the boundary of the visible part of the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.FastEditing">
        <short>Indicates if Fast Editing is enabled in the grid</short>
        <descr>
          <p>
            <var>FastEditing</var> is a <var>Boolean</var> property which indicates if cell editing initialized by a KeyDown message instead of a navigation key is used in the grid control. The value in FastEditing is used when a TPickListCellEditor handles KeyDown messages.
          </p>
          <p>
            The default value for the property is <b>True</b> as assigned in the <var>Create</var> constructor.
          </p>
        </descr>
        <seealso>
          <link id="TPickListCellEditor.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.AltColorStartNormal">
        <short>
          <var>AltColorStartNormal</var> - using a second color to display alternate rows, but starting the first row with the normal color</short>
        <descr>
          <p>
            <var>AltColorStartNormal</var> - using a second color to display alternate rows, but starting the first row with the normal color.
          </p>
          <p>
            Using a different color for the background of alternate rows often makes the data in a grid much easier to read.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.FixedCols">
        <short>
          Number of the fixed columns of the grid (i.e. the columns containing title or identifier material, that don't get scrolled when the rest of the grid moves)
        </short>
        <descr>
          <p>Contains the fixed column count of a grid. </p>
          <p>Fixed columns are normally used for headings.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.FixedRows"/>
          <link id="TCustomGrid.ColCount"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedRows">
        <short>
          Number of the fixed rows of the grid (i.e. the rows containing title or identifier material, that don't get scrolled when the rest of the grid moves)
        </short>
        <descr>
          <p>Contains the fixed row count of a grid. </p>
          <p>Fixed rows are normally used for headings.</p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.FixedCols"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedColor">
        <short>The color for the fixed cells of the grid</short>
        <descr>The color used by headings.</descr>
        <seealso>
          <link id="TCustomGrid.FixedColor"/>
          <link id="TCustomGrid.FixedRows"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedGridLineColor">
        <short>Color used to draw lines around fixed grid cells</short>
        <descr>
          <p>
            The default value for the is cl3DDKShadow as assigned in the constructor. Changing the value in FixedGridLineColor causes the grid to be redrawn. The color is not used when GridLineWidth contains the value 0 (zero).
          </p>
          <p>
            FixedGridLineColor is used in the implementation of the DrawCellGrid method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.GridLineWidth"/>
          <link id="TCustomGrid.DrawCellGrid"/>
        </seealso>
      </element>

      <element name="TCustomGrid.FixedHotColor">
        <short>
          <var>FixedHotColor</var> - the 'Hot' color for the active (selected, etc) fixed cells of the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.Flat">
        <short>
          Is the cell to be displayed <var>Flat</var>, i.e. with no texturing or raised/lowered effect
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.FocusColor">
        <short>The color to be used for the cell receiving focus</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.FocusRectVisible">
        <short>
          <var>FocusRectVisible</var> - is the rectangle receiving focus visible?</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.GCache">
        <short>
          <var>GCache</var> - the cache to be used for grid data</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.GridFlags">
        <short>
          <var>GridFlags</var> - the flags that are set for the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.GridHeight">
        <short>
          <var>GridHeight</var> - the height of the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.GridLineColor">
        <short>Color used for grid lines</short>
      </element>

      <element name="TCustomGrid.GridLineStyle">
        <short>Style used for grid lines</short>
      </element>

      <element name="TCustomGrid.GridLineWidth">
        <short>Width (thickness) for grid lines</short>
      </element>

      <element name="TCustomGrid.GridWidth">
        <short>Width for the entire Grid including non-visible columns</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.HeaderHotZones">
        <short>
          <var>HeaderHotZones</var> - the zones of the header that are under the cursor, so are capable of being selected or pushed (or not!)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.HeaderPushZones">
        <short>
          <var>HeaderPushZones</var> - the zones of the header that have been selected by the cursor, or pushed
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ImageIndexSortAsc">
        <short>Ordinal position for the image used to denote columns sorted in ascending order</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ImageIndexSortDesc">
        <short>Ordinal position for the image used to denote columns sorted in descending order</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TabAdvance">
        <short>Controls the behavior used for Tab navigation in the grid control</short>
        <descr>
          <p>
            TabAdvance is a TAutoAdvance used to determine the behavior for Tab navigation is used in the grid control. The default value for the is aaRightDown. See TAutoAdvance for the values and their usage.
          </p>
          <p>
            TabAdvance is used in the implementation of the KeyDown method in TCustomGrid.
          </p>
        </descr>
        <seealso>
          <link id="TAutoAdvance"/>
          <link id="TCustomGrid.KeyDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.TitleImageList">
        <short>The list with images displayed in column titles</short>
        <descr>
          <p>
            <var>TitleImageList</var> is a <var>TImageList</var> property which contains the images displayed in the title area for columns in the grid. It can include images used for the non-native column sort indicators.
          </p>
          <p>
            Setting a new value for the property causes the <var>VisualChange</var> method to be called to update the column sizes and redraw the control.
          </p>
          <p>
            TitleImageList is used to get an image resolution using the width specified in <var>TitleImageListWidth</var>. The images are used when rendering the <var>TGridColumn</var> instances in the <var>Columns</var> collection.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TitleImageListWidth">
        <short>
          Stores the default width for images used in the title area for fixed cells
        </short>
        <descr>
          <p>
            <var>TitleImageListWidth</var> is an <var>Integer</var> which stores the default width for images used in the title area for fixed cells. The default value for the is 0. Changing the value in TitleImageListWidth causes the <var>VisualChange</var> method to be called to update the grid control.
          </p>
          <p>
            The value in TitleImageListWidth is used in methods which draw fixed cells in the grid, such as:
          </p>
          <ul>
            <li>DrawColumnTitleImage</li>
            <li>AutoAdjustColumn</li>
            <li>GetSortTitleImageInfo</li>
          </ul>
        </descr>
        <seealso>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
          <link id="TCustomStringGrid.AutoAdjustColumn"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InplaceEditor">
        <short>
          <var>InplaceEditor</var> - the editor to be used in-place, i.e. in the cell itself instead of outside the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.IsCellSelected">
        <short>
          <var>IsCellSelected</var> - is the cell specified by <var>aCol, aRow</var> selected?
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsCellSelected.Result">
        <short>True when the cell at the specified column and row is selected</short>
      </element>
      <element name="TCustomGrid.IsCellSelected.aCol">
        <short>Column number for the cell examined in the method</short>
      </element>
      <element name="TCustomGrid.IsCellSelected.aRow">
        <short>Row number for the cell examined in the method</short>
     </element>

     <element name="TCustomGrid.LeftCol">
       <short>Column number for the first visible column in the grid</short>
       <descr></descr>
       <seealso></seealso>
     </element>

      <element name="TCustomGrid.MouseWheelOption">
        <short>Sets the mouse wheel behavior for the grid control</short>
        <descr>
          <p>
            <var>MouseWheelOption</var> is a <var>TMouseWheelOption</var> used to set the mouse wheel behavior for the grid control. The default value for the is <var>mwCursor</var>, and indicates that mouse wheel movements change the cursor position on the screen. Use <var>mwGrid</var> to cause mouse wheel movements to change the active selection  in the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TMouseWheelOption"/>
          <link id="TCustomGrid.DoMouseWheel"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Options">
        <short>
          Contains the set of optional features and/or behaviors enabled for the grid
        </short>
        <descr>
          <p>
            <var>Options</var> is a <var>TGridOptions</var> used to store the options enabled for the grid control. Values from the <var>TGridOptions</var> enumeration are included in the set type to enable the features or behaviors. For a list of available options and their usage, see<link id="TGridOptions"/>.
          </p>
          <p>
            The default value for the Options is the <var>DefaultGridOptions</var> set.
          </p>
          <p>
            Use <var>Options2</var> to set scrolling behaviors enabled for the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TGridOptions"/>
          <link id="DefaultGridOptions"/>
          <link id="TCustomGrid.Options2"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Options2">
        <short>Contains additional options enabled for the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.RangeSelectMode">
        <short>Controls the range selection mode used for the grid</short>
        <descr>
          <p>
            <var>RangeSelectMode</var> is a <var>TRangeSelectMode</var> that controls the range selection mode used for the grid. The default value for the is <var>rsmSingle</var>, and allows selection of a single cell in a range. Use <var>rsmMulti</var> to select multiple cells in a range selection.
          </p>
          <p>
            Changing the value in RangeSelectMode causes the <var>ClearSelections</var> method be called to remove existing selection(s) in the grid control.
          </p>
          <p>
            RangeSelectMode is used in the implementation of methods like:
          </p>
          <ul>
            <li>AddSelectedRange</li>
            <li>GetIsCellSelected</li>
            <li>MouseDown</li>
            <li>InvalidateCell</li>
          </ul>
        </descr>
        <seealso>
          <link id="TRangeSelectMode"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.GetIsCellSelected"/>
          <link id="TCustomGrid.MouseDown"/>
          <link id="TCustomGrid.InvalidateCell"/>
        </seealso>
      </element>

      <element name="TCustomGrid.Row">
        <short>The current <var>Row </var>(record) within the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.RowCount">
        <short>Number of rows in the grid</short>
        <descr>
          <p>
            This is the number of rows in the grid, including fixed and normal rows.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Row"/>
          <link id="TCustomGrid.RowHeights"/>
          <link id="TCustomGrid.RowCount"/>
        </seealso>
      </element>

      <element name="TCustomGrid.RowSizingCursor">
        <short>Cursor shape displayed when the row height is changed</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.RowHeights">
        <short>The row heights for the grid</short>
        <descr>
          <p>
            The row is specified with the <var>aRow</var> parameter. The <var>aRow</var> parameter must fall within the valid index range of 0 to <link id="TCustomGrid.RowCount">RowCount</link>-1.
          </p>
          <p>
            The return value of the is the height of this row, measured in pixels.
          </p>
          <p>
            The initial height of a newly created row is specified with the <link id="TCustomGrid.DefaultRowHeight">DefaultRowHeight</link> property. After that the user may redefine this value. If the <link id="TCustomGrid.Options">Options</link> includes the appropriate value, the row height may also be changed by the user at run-time.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RowCount"/>
          <link id="TCustomGrid.DefaultRowHeight"/>
          <link id="TCustomGrid.Options"/>
        </seealso>
      </element>
      <element name="TCustomGrid.RowHeights.aRow">
        <short>Row number affected in the method</short>
      </element>

      <element name="TCustomGrid.SaveOptions">
        <short>
          The set of options for saving information from the grid (design, attributes, content or position)
        </short>
        <descr>
          These options are used when saving grid information, but also when loading grid information.
        </descr>
        <seealso>
          <link id="TCustomGrid.LoadFromFile"/>
          <link id="TCustomGrid.SaveToFile"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectActive">
        <short>
          <var>SelectActive</var> - if True, the current active cell is selected</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.SelectedColor">
        <short>Color to be used for selected cells</short>
      </element>

      <element name="TCustomGrid.SelectedColumn">
        <short>The column (field) currently selected</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.Selection">
        <short>The current selection (rows and columns) in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ScrollBars">
        <short>The <var>ScrollBars</var> to be used with this grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.StrictSort">
        <short>
          <var>StrictSort</var> - is strict sorting to be used?
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TitleFont">
        <short>The font to be used in the grid's title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TitleStyle">
        <short>The style to be used for the grid's title</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.TopRow">
        <short>The first row (record) in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.UseXORFeatures">
        <short>
          <var>UseXORFeatures</var>: When True, the dotted focus rectangle is painted using the XOR raster operation
        </short>
        <descr>
          <p>
            This controls how the dotted focus rectangle appears in the grid. When <b>True</b>, the rectangle is painted using an XOR raster operation. This allows the focus rectangle to be seen regardless of the cell background color. When <b>False</b>, the user can control the color of the dotted focus rectangle using the <var>FocusColor</var> property.
          </p>
          <p>
            It also controls the look of column/row resizing operations. When <b>True</b>, a line shows visually the size that the the column or row will have if the user ends the operation. When <b>False</b>, the column or row resizing takes effect  as the user drags the mouse.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ValidateOnSetSelection">
        <short>
          Controls whether validation is performed when the text for the selected cell is changed
        </short>
        <descr>
          <p>
            <var>ValidateOnSetSelection</var> is a <var>Boolean</var> property used to control validation performed when the text for the selected cell is changed in the grid. The default value for ValidateOnSetSelection is <b>False</b>, as assigned in the constructor for the class.
          </p>
          <p>
            ValidateOnSetSelection is used in the <var>SelectionSetText</var> method to determine if the <var>ValidateEntry</var> method is called to validate the content in the cell.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ValidateEntry"/>
          <link id="TCustomGrid.OnValidateEntry"/>
        </seealso>
      </element>

      <element name="TCustomGrid.VisibleColCount">
        <short>The number of visible columns</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.VisibleRowCount">
        <short>The number of visible rows</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnAfterSelection">
        <short>Event handler signalled after a new cell has been selected in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnBeforeSelection">
        <short>
          <var>OnBeforeSelection</var> - event handler for use before a selection is made
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnCheckboxToggled">
        <short>Event handler signalled when the value for a Checkbox cell is toggled</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnCompareCells">
        <short>Event handler for comparing the contents of grid cells</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnPrepareCanvas">
        <short>Event handler to prepare the <var>Canvas</var> for drawing</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnDrawCell">
        <short>Event handler for drawing a cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnEditButtonClick">
        <short>Event handler for when the Edit button is clicked</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnButtonClick">
        <short>Event handler signalled when a button for a column is clicked in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnPickListSelect">
        <short>Event handler for selecting an item from a picklist (e.g. drop-down list in <var>TComboBox</var>)</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnSelection">
        <short>
          Event handler for when an area of a grid (one or a group of cells) is selected
        </short>
        <descr>
          <p>
            The <var>Col</var> and <var>Row</var> parameters contain the column and the row of the highlighted cell.
          </p>
          <p>
            Application developers can use the <var>OnSelection</var> and <var>OnBeforeSelection</var> events to react to focus changes. Component developers should use the ??? method instead.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.OnSelectEditor">
        <short>Event handler signalled to select a cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnTopLeftChanged">
        <short>
          Event handler signalled when the top left cell is changed (i.e. the grid has been scrolled so that a different cell occupies top left)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnUserCheckboxBitmap">
        <short>
          <var>OnUserCheckboxBitmap</var> - event handler for a user accessing a checkbox bitmap
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnUserCheckboxImage">
        <short>
          Event handler signalled to get an image from an image list used for Checkbox cells
        </short>
        <descr>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.OnValidateEntry">
        <short>Event handler used to perform validation for cells</short>
        <descr>
          <p>
            <var>OnValidateEntry</var> is a <var>TValidateEntryEvent</var> which implements the event handler signalled to perform validation for cells in the <var>ValidateEntry</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ValidateEntry"/>
        </seealso>
      </element>

     <element name="TCustomGrid.FlipRect">
       <short>Flips coordinates in the rectangle when BiDi or RTL alignment is used</short>
       <descr></descr>
       <seealso></seealso>
     </element>
     <element name="TCustomGrid.FlipRect.Result">
       <short></short>
     </element>
     <element name="TCustomGrid.FlipRect.ARect">
       <short></short>
     </element>

     <element name="TCustomGrid.FlipPoint">
       <short>Flips coordinates in the point when BiDi or RTL alignment is used</short>
       <descr></descr>
       <seealso></seealso>
     </element>
     <element name="TCustomGrid.FlipPoint.Result">
       <short></short>
     </element>
     <element name="TCustomGrid.FlipPoint.P">
       <short></short>
     </element>

     <element name="TCustomGrid.FlipX">
       <short>
         Flips the horizontal position in the client rectangle when BiDi or RTL alignment is used
       </short>
       <descr></descr>
       <seealso></seealso>
     </element>
     <element name="TCustomGrid.FlipX.Result">
       <short></short>
     </element>
     <element name="TCustomGrid.FlipX.X">
       <short></short>
     </element>

     <element name="TCustomGrid.OnGetCellHint">
       <short>Gets the individual hint for each cell</short>
       <descr>
         <var>OnGetCellHint</var> is a <var>TGetCellHintEvent</var> with the event handler signalled to get the hint for cells in the grid control. OnGetCellHint is signalled when the <link id="TGridOption.goCellHints"/> enumeration value is included in the <link id="TCustomGrid.Options"/> property.
       </descr>
       <seealso>
         <link id="TGridOption.goCellHints"/>
         <link id="TCustomGrid.Options"/>
       </seealso>
     </element>

     <element name="TCustomGrid.OnSaveColumn">
       <short>Event handler signalled when a column is saved</short>
       <descr></descr>
       <seealso>
         <link id="TCustomGrid.DoSaveColumn"/>
       </seealso>
     </element>

     <element name="TCustomGrid.OnLoadColumn">
       <short>Event handler signalled when a column is loaded</short>
       <descr></descr>
       <seealso></seealso>
     </element>

      <element name="TCustomGrid.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          <p>
            <var>Create</var> is the constructor for <var>TCustomGrid</var>. Create calls the inherited <var>Create</var> method, allocates the lists with columns and rows, initializes many visual properties and options, creates the various cell editors, and loads any bitmaps required for the display.
          </p>
          <remark>
            The inherited method calls SetBounds and VisualChange, so the grid needs to be fully instantiated before it is called.
          </remark>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Create">TCustomControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomGrid.Create.AOwner">
        <short></short>
      </element>

      <element name="TCustomGrid.Destroy">
        <short>
          Destructor for the class instance
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TCustomGrid</var>. Destroy frees various resources including editors, columns, rows, and fonts. It calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomGrid.Invalidate" link="#lcl.controls.TControl.Invalidate"/>
      <element name="TCustomGrid.EditingDone" link="#lcl.controls.TControl.EditingDone"/>

      <element name="TCustomGrid.AdjustInnerCellRect">
        <short>
          Adjusts the cell rectangle to account for lines drawn around a cell
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.AdjustInnerCellRect.ARect">
        <short>Cell rectangle adjusted in the method</short>
      </element>

      <element name="TCustomGrid.AutoAdjustColumns">
        <short>
          <var>AutoAdjustColumns</var> - automatically adjust the columns according to the size of their contents
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.BeginUpdate">
        <short>Begins an update to the grid</short>
        <descr>
          <p>
            <var>BeginUpdate</var> is a procedure used to start an update to the layout or content in a grid control. BeginUpdate increments an internal member used to prevent nested calls to the method. The protection remains in effect until the <var>EndUpdate</var> method is called. BeginUpdate is used in the implementation of methods that alter the physical appearance of the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.EndUpdate"/>
          <link id="TCustomGrid.VisualChange"/>
        </seealso>
      </element>

      <element name="TCustomGrid.CellRect">
        <short>
          The coordinates for the current cell (column, row) expressed as a standard rectangle (TRect)
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CellRect.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.CellRect.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.CellRect.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.CellToGridZone">
        <short>Convert the coordinates of the current cell (col, row) to a grid zone</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.CellToGridZone.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.CellToGridZone.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.CellToGridZone.aRow">
        <short></short>
      </element>

      <element name="TCustomGrid.CheckPosition">
        <short>Check the position of the cursor</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.ClearCols">
        <short>Clears the cached fixed columns and column count in the grid control</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Clear"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ClearCols.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.ClearRows">
        <short>Clears the cached fixed rows and row count in the grid control</short>
        <short></short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.Clear"/>
        </seealso>
      </element>
      <element name="TCustomGrid.ClearRows.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.Clear">
        <short>Clear all cells from the grid</short>
        <descr>
          <p>
            Resets Column and Row counts to 0. Grid is completely emptied.
          </p>
          <p>
            Compatibility: This applies to Lazarus grids only; under Delphi/Kylix a grid can't be completely emptied.
          </p>
        </descr>
      </element>

      <element name="TCustomGrid.ClearSelections">
        <short>
          Clears the current range selection(s) and invalidates the grid control
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.MouseDown"/>
        </seealso>
      </element>

      <element name="TCustomGrid.EditorByStyle">
        <short>Select a cell editor control with the specified style</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorByStyle.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorByStyle.Style">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorKeyDown">
        <short>Emulate the <var>OnKeyDown</var> event handler in the cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Sender">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Key">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorKeyDown.Shift">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorKeyPress">
        <short>Emulate the <var>OnKeyPress</var> event handler in the cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorKeyPress.Sender">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorKeyPress.Key">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorKeyUp">
        <short>Implements the <var>OnKeyUp</var> event handler in the cell editor</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EditorKeyUp.Sender">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorKeyUp.key">
        <short></short>
      </element>
      <element name="TCustomGrid.EditorKeyUp.shift">
        <short></short>
      </element>

      <element name="TCustomGrid.EditorTextChanged">
        <short>Updates the grid control when the value in a cell editor is changed</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.SetEditText"/>
          <link id="TStringCellEditor.Change"/>
          <link id="TPickListCellEditor.Select"/>
          <link id="TPickListCellEditor.Change"/>
        </seealso>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aCol">
        <short>Column number for the modified cell</short>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aRow">
        <short>Row number for the modified cell</short>
      </element>
      <element name="TCustomGrid.EditorTextChanged.aText">
        <short>New value for the cell</short>
      </element>

      <element name="TCustomGrid.EndUpdate">
        <short>
          <var>EndUpdate</var> - Finish updating the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EndUpdate.UO">
        <short></short>
      </element>
      <element name="TCustomGrid.EndUpdate.aRefresh">
        <short></short>
      </element>

      <element name="TCustomGrid.EraseBackground">
        <short>Clear the background for the grid control</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.EraseBackground.DC">
        <short>Device context for the drawing operation</short>
      </element>

      <element name="TCustomGrid.FixDesignFontsPPI">
        <short>Adjusts fonts in the control to the specified design-time PixelsPerInch</short>
        <descr>
          <p>
            <var>FixDesignFontsPPI</var> is an overridden  procedure used to adjust the assigned font size for grid columns and their titles to the specified design-time Pixels Per Inch (PPI). This is needed because the display density (PPI) used for fonts is not stored in Form resource (.LFM) files. When the design-time PPI is different than the run-time setting, font scaling issues can occur.
          </p>
          <p>
            FixDesignFontsPPI restores the design-time font PPI so it can be used in the LCL Scaling mechanism. FixDesignFontsPPI calls the inherited method on entry, and sets the value for the <var>PixelsPerInch</var> property in <var>TitleFont</var> when needed. Column definitions stored in the <var>Columns</var> property are also adjusted (when needed) by calling the FixDesignFontsPPI method for each of the <var>TGridColumn</var> instances in the container.
          </p>
          <p>
            FixDesignFontsPPI is called when scaling is enabled, and the Form which hosts the control calls its <var>Loaded</var> method during LCL streaming.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.ScaleFontsPPI"/>
          <link id="TStringGrid.Columns"/>
          <link id="TGridColumns"/>
          <link id="TGridColumn.FixDesignFontsPPI"/>
          <link id="TControl.FixDesignFontsPPI"/>
        </seealso>
      </element>
      <element name="TCustomGrid.FixDesignFontsPPI.ADesignTime">
        <short>Design-time PixelsPerInch needed for fonts in the control</short>
      </element>

      <element name="TCustomGrid.Focused">
        <short>
          Indicates if the grid is focused or has an active focused cell editor
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.Focused.Result">
        <short></short>
      </element>

      <element name="TCustomGrid.HasMultiSelection">
        <short>
          Indicates if multi-select range selection mode is enabled and in use for the grid
        </short>
        <descr>
          <p>
            <var>HasMultiSelection</var> is a <var>Boolean</var> function used to determine if multi-select range selection mode is enabled and in use for the grid. The return value is <b>True</b> when <var>Options</var> includes the value <var>goRangeSelect</var>, <var>RangeSelectMode</var> contains <var>rsmMulti</var>, and <var>Selections</var> contains selection cell rectangles.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Options"/>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TGridOption.goRangeSelect"/>
          <link id="TRangeSelectMode.rsmMulti"/>
        </seealso>
      </element>
      <element name="TCustomGrid.HasMultiSelection.Result">
        <short>
          True when multi-select range selection mode is enabled and in use for the grid
        </short>
      </element>

      <element name="TCustomGrid.HideSortArrow">
        <short>Hide the arrow drawn for the column sort indicator</short>
        <descr>
          <p>
            <var>HideSortArrow</var> is a procedure used to hide the arrow drawn for the sort indicator defined in <var>SortColumn</var>. HideSortArrow sets the value in SortColumn to <b>-1</b> to indicate that the sort column is not defined, and calls <var>InvalidateGrid</var> to redraw the contents in the grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SortColumn"/>
          <link id="TCustomGrid.InvalidateGrid"/>
          <link id="TCustomGrid.Sort"/>
        </seealso>
      </element>

      <element name="TCustomGrid.InvalidateCell">
        <short>
          <var>InvalidateCell</var> - renders a cell invalid, and redraws if required</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InvalidateCell.aCol">
        <short></short>
      </element>
      <element name="TCustomGrid.InvalidateCell.aRow">
        <short></short>
      </element>
      <element name="TCustomGrid.InvalidateCell.Redraw">
        <short></short>
      </element>

      <element name="TCustomGrid.InvalidateCol">
        <short>
          <var>InvalidateFromCol</var> - renders the grid invalid from the specified column onward
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InvalidateCol.ACol">
        <short></short>
      </element>

      <element name="TCustomGrid.InvalidateRange">
        <short>
          <var>InvalidateRange</var> - renders a range of the grid invalid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InvalidateRange.aRange">
        <short></short>
      </element>

      <element name="TCustomGrid.InvalidateRow">
        <short>Invalidates the drawing rectangle for the specified row number</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.InvalidateRow.ARow">
        <short>Row number affected in the method</short>
      </element>

      <element name="TCustomGrid.IsCellVisible">
        <short>Determines whether the specified cell is visible</short>
        <descr>
          <p>
            <var>IsCellVisible</var> is a <var>Boolean</var> function which indicates whether the cell specified by <var>ACol</var> and <var>ARow</var> is in the visible area for the grid control. IsCellVisible uses the internal cached grid information to determine if the cell is within the cached visible coordinates for the control.
          </p>
          <p>
            IsCellVisible is used in methods like <var>DrawRow</var>, <var>DoEnter</var>, and <var>InvalidateCell</var>.
          </p>
          <p>
            Use <var>IsFixedCellVisible</var> to determine whether a specific fixed cell is within the visible area for the control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.IsFixedCellVisible"/>
          <link id="TCustomGrid.DrawRow"/>
          <link id="TCustomGrid.InvalidateCell"/>
          <link id="TGridDataCache"/>
        </seealso>
      </element>
      <element name="TCustomGrid.IsCellVisible.Result">
        <short>True if the cell is in the visible area for the grid control</short>
      </element>
      <element name="TCustomGrid.IsCellVisible.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomGrid.IsCellVisible.aRow">
        <short>Row number for the cell</short>
      </element>

      <element name="TCustomGrid.IsFixedCellVisible">
        <short>Determines if the specified cell is a visible fixed cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.IsFixedCellVisible.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.LoadFromFile">
        <short>Load the grid data from a file with the specified name</short>
        <descr>
          Please note that the SaveOptions determine the information available to be loaded.
        </descr>
        <seealso>
          <link id="TCustomGrid.SaveToFile"/>
          <link id="TCustomGrid.SaveOptions"/>
        </seealso>
      </element>
      <element name="TCustomGrid.LoadFromFile.FileName">
        <short>File name with the content loaded in the method</short>
      </element>

      <element name="TCustomGrid.LoadFromStream">
        <short>Loads the content for the grid from the specified stream</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.LoadFromStream.AStream">
        <short>TStream instance with values loaded in the method</short>
      </element>

      <element name="TCustomGrid.MouseCoord">
        <short>Find the mouse coordinates relative to the grid origin</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MouseCoord.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseCoord.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseCoord.Y">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseToCell">
        <short>Convert mouse coordinates to the position of a cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MouseToCell.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToCell.Mouse">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToCell.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToCell.Y">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToCell.ACol">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToCell.ARow">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseToLogcell">
        <short>Convert mouse coordinates to the position of a logical cell in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MouseToLogcell.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToLogcell.Mouse">
        <short></short>
      </element>

      <element name="TCustomGrid.MouseToGridZone">
        <short>
          <var>MouseToGridZone</var> - convert mouse coordinates to a grid zone</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.MouseToGridZone.Result">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToGridZone.X">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToGridZone.Y">
        <short></short>
      </element>
      <element name="TCustomGrid.MouseToGridZone.CellCoords">
        <short></short>
      </element>

      <element name="TCustomGrid.SaveToFile">
        <short>Save the data in the grid to a file with specified name</short>
        <descr>
          Please note that the SaveOptions determine the information saved in the method.
        </descr>
        <seealso>
          <link id="TCustomGrid.LoadFromFile"/>
          <link id="TCustomGrid.SaveOptions"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveToFile.FileName">
        <short></short>
      </element>

      <element name="TCustomGrid.SaveToStream">
        <short>Saves information for the grid to the specified stream</short>
        <descr>
          <p>
            <var>SaveToStream</var> is a virtual procedure used to store information for the grid control in the <var>TStream</var> instance specified in <var>AStream</var>. SaveToStream creates a <var>TXMLConfig</var> class instance that is used to capture the layout, cell display settings, grid options, and range selections for the control.
          </p>
          <p>
            SaveToStream calls the <var>SaveContent</var> method to generate the XML content for the grid control. The XML content is written to <var>AStream</var> using the <var>WriteToStream</var> method in <var>TXMLConfig</var>.
          </p>
          <p>
            Use <var>LoadFromStream</var> to read the grid information stored in the stream.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.SaveContent"/>
          <link id="TCustomGrid.doSaveColumn"/>
          <link id="TCustomGrid.OnSaveColumn"/>
          <link id="TCustomGrid.SaveGridOptions"/>
          <link id="TCustomGrid.LoadFromStream"/>
          <link id="#LazUtils.Laz2_XMLCfg.TXMLConfig"/>
          <link id="#LazUtils.Laz2_XMLCfg.TXMLConfig.WriteToStream"/>
        </seealso>
      </element>
      <element name="TCustomGrid.SaveToStream.AStream">
        <short>TStream instance where grid information is stored</short>
      </element>

      <element name="TCustomGrid.ScaleFontsPPI">
        <short></short>
        <descr>
          <p>
            <var>ScaleFontsPPI</var> is an overridden procedure used to...
          </p>
        </descr>
        <seealso></seealso>
        <notes><note>TODO</note></notes>
      </element>
      <element name="TCustomGrid.ScaleFontsPPI.AToPPI">
        <short></short>
      </element>
      <element name="TCustomGrid.ScaleFontsPPI.AProportion">
        <short></short>
      </element>

      <element name="TCustomGrid.SetFocus">
        <short>Sets focus to the grid control</short>
        <descr>
          <p>
            <var>SetFocus</var> is an overridden procedure used to make the grid control the currently focused control. SetFocus ensures that pending <b>Tab</b> key navigation for an active cell editor is handled properly. If an Editor is both available and visible, it calls its SetFocus method. Otherwise, the grid control becomes the focused control.
         </p>
        </descr>
        <seealso></seealso>
      </element>

      <element name="TCustomGrid.CursorState">
        <short>Current cursor state for the grid control</short>
        <descr>
          <p>
            <var>CursorState</var> is a read-only <var>TGridCursorState</var> property which contains the current cursor state or shape for the grid control. The value in CursorState is updated when methods are called which perform resizing or moving/dragging for columns and rows.
          </p>
          <p>
            Use the <var>ColRowDraggingCursor</var>, <var>ColSizingCursor</var>, or  <var>RowSizingCursor</var> properties to read or write the cursor shapes used for the corresponding actions.
          </p>
          <p>
            Use <var>RestoreCursor</var> to set the cursor to its default value.
          </p>
        </descr>
        <seealso>
          <link id="TGridCursorState"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectedRange">
        <short>
          Provides indexed access to TGridRect values in the currently selected range
        </short>
        <descr>
          <p>
            <var>SelectedRange</var> is a read-only indexed <var>TGridRect</var> property used to get the cell rectangles in <var>Selections</var> for the grid control. SelectedRange is applicable when multi-select range mode has been enabled in the <var>RangeSelectMode</var> property. Otherwise, the current cell selection at <var>Col</var> and <var>Row</var> is returned as the selected range value.
          </p>
          <p>
            Use <var>SelectedRangeCount</var> to get the number <var>TGridRect</var> instances in <var>SelectedRange</var>.
          </p>
          <p>
            Use <var>AddSelectedRange</var> to add the current cell selection to the multi-select range in <var>Selections</var>.
          </p>
          <p>
            Use <var>ClearSelections</var> to remove the cell rectangles stored in <var>Selections</var>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TCustomGrid.Col"/>
          <link id="TCustomGrid.Row"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SelectedRangeCount">
        <short>Number of cell rectangles in the current selected range for the grid</short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TCustomGrid.SelectedRange"/>
          <link id="TCustomGrid.RangeSelectMode"/>
          <link id="TCustomGrid.AddSelectedRange"/>
          <link id="TCustomGrid.ClearSelections"/>
          <link id="TGridRectArray"/>
          <link id="TRangeSelectMode"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SortOrder">
        <short>Controls the order used for the sort column (ascending or descending)</short>
        <descr>
          <p>
            <var>SortOrder</var> is a <var>TSortOrder</var> property which indicates the sort order used for the column specified in <var>SortColumn</var>. It is used in the <var>DoCompareCells</var> method to determine the order for values during the comparison.
          </p>
          <p>
            SortOrder is used in the <var>HeaderClick</var> method to set or invert the ordering when column header for is clicked. It is also used to determine the image displayed in the column heading for the sort column.
          </p>
          <p>
            The default value for the property is <var>soAscending</var>.
          </p>
        </descr>
        <seealso>
          <link id="TSortOrder"/>
        </seealso>
      </element>

      <element name="TCustomGrid.SortColumn">
        <short>Column position used to sort the rows in the grid</short>
        <descr>
          <p>
            <var>SortColumn</var> is a read-only <var>Integer</var> that contains the column position used to sort content rows in the grid. SortColumn is used in the <var>HeaderClick</var> method to determine if the click occurred on the fixed header cell represented by the property. It is also used in the <var>DrawColumnTitleImage</var> method if the header cell needs to render an image representing the current sort order.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.HeaderClick"/>
          <link id="TCustomGrid.DrawColumnTitleImage"/>
        </seealso>
      </element>

      <element name="TCustomGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>

      <element name="TCustomGrid.IMEStartComposition">
        <short>Handles IME Composition start messages</short>
        <descr>Defined for Windows platforms only.</descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IMEStartComposition.Message">
        <short></short>
      </element>

      <element name="TCustomGrid.IMEComposition">
        <short>Handles IME Composition messages</short>
        <descr>Defined for Windows platforms only.</descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IMEComposition.Msg">
        <short></short>
      </element>

      <element name="TCustomGrid.IMEEndComposition">
        <short>Handles the WM_IME_ENDCOMPOSITION message</short>
        <descr>
          <p>
            Handles the Input Method Editor API WM_IME_ENDCOMPOSITION message.
          </p>
          <p>
            Dispatches the message specified in <var>Msg</var> in the current visible and active <var>Editor</var> for the control. Defined for the Windows platform only.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomGrid.IMEEndComposition.Msg">
        <short>Message handled in the method</short>
      </element>

      <element name="TGetEditEvent">
        <short>Specifies an event handler used to get edit values or masks in a grid</short>
        <descr>
          <var>TGetEditEvent</var> is an object procedure type used for event handlers which  get edit values or masks in a grid control. TGetEditEvent is the type used for the <var>OnGetEditMask</var> and <var>OnGetEditText</var> event handlers in <var>TCustomDrawGrid</var>.
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnGetEditMask"/>
          <link id="TCustomDrawGrid.OnGetEditText"/>
        </seealso>
      </element>
      <element name="TGetEditEvent.Sender">
        <short>Object for the event notification</short>
      </element>
      <element name="TGetEditEvent.ACol">
        <short>Column number for the notification</short>
      </element>
      <element name="TGetEditEvent.ARow">
        <short>Row number for the notification</short>
      </element>
      <element name="TGetEditEvent.Value">
        <short>Value returned from the event handler</short>
      </element>

      <element name="TSetEditEvent">
        <short>Specifies an event handler used to set the value for edit text in a grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TSetEditEvent.Sender">
        <short>Object for the event notification</short>
      </element>
      <element name="TSetEditEvent.ACol">
        <short>Column number for the notification</short>
      </element>
      <element name="TSetEditEvent.ARow">
        <short>Row number for the notification</short>
      </element>
      <element name="TSetEditEvent.Value">
        <short>Value applied to the specified cell in the event handler</short>
      </element>

      <element name="TGetCheckboxStateEvent">
        <short>
          Specifies an event handler signalled to get the state for a Checkbox cell in a grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TGetCheckboxStateEvent.Sender">
        <short></short>
      </element>
      <element name="TGetCheckboxStateEvent.ACol">
        <short></short>
      </element>
      <element name="TGetCheckboxStateEvent.ARow">
        <short></short>
      </element>
      <element name="TGetCheckboxStateEvent.Value">
        <short></short>
      </element>

      <element name="TSetCheckboxStateEvent">
        <short>
          Specifies an event handler signalled to set the state for a Checkbox cell in a grid
        </short>
        <descr>
          <p>
            <var>TSetCheckboxStateEvent</var> is an object procedure type which specifies an event handler signalled to set the state for a Checkbox cell in a grid control. TSetCheckboxStateEvent is the type used to implement the <var>OnSetCheckboxState</var> property in <var>TCustomDrawGrid</var>.
          </p>
          <p>
            See <var>TGetCheckboxStateEvent</var> for the event handler signalled to get the value for a checkbox cell in a grid control.
          </p>
        </descr>
        <seealso>
          <link id="TCustomDrawGrid.OnSetCheckboxState"/>
          <link id="TGetCheckboxStateEvent"/>
        </seealso>
      </element>
      <element name="TSetCheckboxStateEvent.Sender">
        <short>Object for the event notification</short>
      </element>
      <element name="TSetCheckboxStateEvent.ACol">
        <short>Column number for the modified cell</short>
      </element>
      <element name="TSetCheckboxStateEvent.ARow">
        <short>Row number for the modified cell</short>
      </element>
      <element name="TSetCheckboxStateEvent.Value">
        <short>New checkbox state value for the cell</short>
      </element>

      <element name="TCustomDrawGrid">
        <short>
          The base class for a custom-drawn grid control
        </short>
        <descr>
          <p>
            <var>TCustomDrawGrid</var> is a <var>TCustomGrid</var> descendant used as the base class for custom-drawn grids including <var>TDrawGrid</var> and <var>TStringGrid</var>. Applications should not create instance of TCustomDrawGrid; use one of the descendent classes like <var>TDrawGrid</var> or <var>TStringGrid</var>.
          </p>
          <p>
            TCustomDrawGrid provides overridden methods needed to work with cells using the TVirtualGrid class instance in the Grid property.
          </p>
          <!-- TODO: Make consistent with TDrawGrid -->
        </descr>
        <seealso>
          <link id="HowToUseGrids"/>
          <link id="TCustomGrid"/>
          <link id="TDrawGrid"/>
          <link id="TStringGrid"/>
          <link id="TOnDrawCell"/>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.FOnColRowDeleted"/>
      <element name="TCustomDrawGrid.FOnColRowExchanged"/>
      <element name="TCustomDrawGrid.FOnColRowInserted"/>
      <element name="TCustomDrawGrid.FOnColRowMoved"/>
      <element name="TCustomDrawGrid.FOnGetEditMask"/>
      <element name="TCustomDrawGrid.FOnGetEditText"/>
      <element name="TCustomDrawGrid.FOnHeaderClick"/>
      <element name="TCustomDrawGrid.FOnHeaderSized"/>
      <element name="TCustomDrawGrid.FOnSelectCell"/>
      <element name="TCustomDrawGrid.FOnSetEditText"/>

      <element name="TCustomDrawGrid.FGrid">
        <short>
          <var>FGrid</var> - local variable holding a virtual grid on which to work
        </short>
      </element>

      <element name="TCustomDrawGrid.CalcCellExtent">
        <short>
          <var>CalcCellExtent</var> - calculate the dimensions required for the cell specified by the <var>aCol</var> and <var>aRow</var> arguments
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.CalcCellExtent.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.CalcCellExtent.aRow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.CalcCellExtent.aRect">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.ColRowDeleted" link="#lcl.grids.TCustomGrid.ColRowDeleted"/>
      <element name="TCustomDrawGrid.ColRowDeleted.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowDeleted.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.ColRowExchanged" link="#lcl.grids.TCustomGrid.ColRowExchanged"/>
      <element name="TCustomDrawGrid.ColRowExchanged.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowExchanged.Index">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowExchanged.WithIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.ColRowInserted" link="#lcl.grids.TCustomGrid.ColRowInserted"/>
      <element name="TCustomDrawGrid.ColRowInserted.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowInserted.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.ColRowMoved" link="#lcl.grids.TCustomGrid.ColRowMoved"/>
      <element name="TCustomDrawGrid.ColRowMoved.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowMoved.FromIndex">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ColRowMoved.ToIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.CreateVirtualGrid">
        <short>
          <var>CreateVirtualGrid</var> - returns the created virtual grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.CreateVirtualGrid.Result">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.DrawCell" link="#lcl.grids.TCustomGrid.DrawCell"/>
      <element name="TCustomDrawGrid.DrawCell.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aRow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aRect">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCell.aState">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.DrawCellAutonumbering">
        <short>
          <var>DrawCellAutonumbering</var> - draws a cell using auto numbering</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aRow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aRect">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawCellAutonumbering.aValue">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.DrawFocusRect">
        <short>
          <var>DrawFocusRect</var> - draws the rectangle currently receiving focus</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.aRow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DrawFocusRect.ARect">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.GetEditMask" link="#lcl.grids.TCustomGrid.GetEditMask"/>
      <element name="TCustomDrawGrid.GetEditMask.Result">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.GetEditMask.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.GetEditMask.aRow">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.GetEditText" link="#lcl.grids.TCustomGrid.GetEditText"/>
      <element name="TCustomDrawGrid.GetEditText.Result">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.GetEditText.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.GetEditText.aRow">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.HeaderClick" link="#lcl.grids.TCustomGrid.HeaderClick"/>
      <element name="TCustomDrawGrid.HeaderClick.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.HeaderClick.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.HeaderSized" link="#lcl.grids.TCustomGrid.HeaderSized"/>
      <element name="TCustomDrawGrid.HeaderSized.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.HeaderSized.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.NotifyColRowChange">
        <short>
          <var>NotifyColRowChange</var> tells the system that a column or row has been changed (determined by <var>IsColumn</var>) and whether this was an Insert
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.WasInsert">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.FromIndex">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.NotifyColRowChange.ToIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.SelectCell" link="#lcl.grids.TCustomGrid.SelectCell"/>
      <element name="TCustomDrawGrid.SelectCell.Result">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SelectCell.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SelectCell.aRow">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.SetColor" link="#lcl.grids.TCustomGrid.SetColor"/>
      <element name="TCustomDrawGrid.SetColor.Value">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.SetEditText" link="#lcl.grids.TCustomGrid.SetEditText"/>
      <element name="TCustomDrawGrid.SetEditText.ACol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SetEditText.ARow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SetEditText.Value">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.SizeChanged" link="#lcl.grids.TCustomGrid.SizeChanged"/>
      <element name="TCustomDrawGrid.SizeChanged.OldColCount">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SizeChanged.OldRowCount">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomDrawGrid</var>. Attaches a virtual grid then calls inherited <var>Create</var>
        </short>
        <descr></descr>
        <seealso>
          <link id="#LCL.Grids.TCustomGrid.Create">TCustomGrid.Create</link>
        </seealso>
      </element>
      <element name="TCustomDrawGrid.Create.AOwner">
        <short>Owner of the grid control</short>
      </element>

      <element name="TCustomDrawGrid.Destroy">
        <short>
          <var>Destroy</var> - destructor for <var>TCustomDrawGrid</var>. Frees the grid then calls inherited  <var>Destroy</var>
        </short>
        <descr></descr>
        <seealso>
          <link id="#LCL.Grids.TCustomGrid.Destroy">TCustomGrid.Destroy</link>
        </seealso>
      </element>

      <element name="TCustomDrawGrid.DeleteColRow">
        <short>
          Delete either a column or a row (specified by index), depending on the value of the Boolean <var>IsColumn</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.DeleteColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DeleteColRow.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.ExchangeColRow">
        <short>
          Exchange either a column or a row, specified by <var>index</var>, with the col or row specified by <var>WithIndex</var>; Boolean <var>IsColumn</var> determines whether rows or columns are to be exchanged
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.Index">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.ExchangeColRow.WithIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.InsertColRow">
        <short>
          <var>InsertColRow</var> inserts a column or row (specified by
          <var>Iscolumn</var>) at the stated index location
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.InsertColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.InsertColRow.Index">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.MoveColRow">
        <short>
          Move column or row from <var>FromIndex</var> to <var>ToIndex</var>; Boolean <var>IsColumn</var> specifies whether col or row is to be moved
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.FromIndex">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.MoveColRow.ToIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.SortColRow">
        <short>
          Sort column or row specified by <var>index</var> and optionally by <var>FromIndex</var> and <var>ToIndex</var>; <var>IsColumn</var> specifies whether col or row is to be sorted
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.SortColRow.IsColumn">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.Index">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.FromIndex">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.SortColRow.ToIndex">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.DefaultDrawCell">
        <short>Use the default method for drawing a cell specified by <var>aCol</var>, <var>aRow</var>, at location <var>aRect</var> with state <var>aState</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.aCol">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.aRow">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.aRect">
        <short></short>
      </element>
      <element name="TCustomDrawGrid.DefaultDrawCell.aState">
        <short></short>
      </element>

      <element name="TCustomDrawGrid.AllowOutboundEvents" link="#lcl.grids.TCustomGrid.AllowOutboundEvents"/>
      <element name="TCustomDrawGrid.BorderColor" link="#lcl.grids.TCustomGrid.BorderColor"/>
      <element name="TCustomDrawGrid.Canvas" link="#lcl.controls.TCustomControl.Canvas"/>
      <element name="TCustomDrawGrid.Col" link="#lcl.grids.TCustomGrid.Col"/>
      <element name="TCustomDrawGrid.ColWidths" link="#lcl.grids.TCustomGrid.ColWidths"/>
      <element name="TCustomDrawGrid.Editor" link="#lcl.grids.TCustomGrid.Editor"/>
      <element name="TCustomDrawGrid.EditorBorderStyle" link="#lcl.grids.TCustomGrid.EditorBorderStyle"/>
      <element name="TCustomDrawGrid.EditorMode" link="#lcl.grids.TCustomGrid.EditorMode"/>
      <element name="TCustomDrawGrid.ExtendedColSizing" link="#lcl.grids.TCustomGrid.ExtendedColSizing"/>
      <element name="TCustomDrawGrid.AltColorStartNormal" link="#lcl.grids.TCustomGrid.AltColorStartNormal"/>
      <element name="TCustomDrawGrid.FastEditing" link="#lcl.grids.TCustomGrid.FastEditing"/>
      <element name="TCustomDrawGrid.FocusColor" link="#lcl.grids.TCustomGrid.FocusColor"/>
      <element name="TCustomDrawGrid.FocusRectVisible" link="#lcl.grids.TCustomGrid.FocusRectVisible"/>
      <element name="TCustomDrawGrid.GridHeight" link="#lcl.grids.TCustomGrid.GridHeight"/>
      <element name="TCustomDrawGrid.GridLineColor" link="#lcl.grids.TCustomGrid.GridLineColor"/>
      <element name="TCustomDrawGrid.GridLineStyle" link="#lcl.grids.TCustomGrid.GridLineStyle"/>
      <element name="TCustomDrawGrid.GridWidth" link="#lcl.grids.TCustomGrid.GridWidth"/>
      <element name="TCustomDrawGrid.IsCellSelected" link="#lcl.grids.TCustomGrid.IsCellSelected"/>
      <element name="TCustomDrawGrid.LeftCol" link="#lcl.grids.TCustomGrid.LeftCol"/>
      <element name="TCustomDrawGrid.Row" link="#lcl.grids.TCustomGrid.Row"/>
      <element name="TCustomDrawGrid.RowHeights" link="#lcl.grids.TCustomGrid.RowHeights"/>
      <element name="TCustomDrawGrid.SaveOptions" link="#lcl.grids.TCustomGrid.SaveOptions"/>
      <element name="TCustomDrawGrid.SelectedColor" link="#lcl.grids.TCustomGrid.SelectedColor"/>
      <element name="TCustomDrawGrid.SelectedColumn" link="#lcl.grids.TCustomGrid.SelectedColumn"/>
      <element name="TCustomDrawGrid.Selection" link="#lcl.grids.TCustomGrid.Selection"/>
      <element name="TCustomDrawGrid.StrictSort" link="#lcl.grids.TCustomGrid.StrictSort"/>
      <element name="TCustomDrawGrid.TopRow" link="#lcl.grids.TCustomGrid.TopRow"/>
      <element name="TCustomDrawGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TCustomDrawGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TCustomDrawGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TCustomDrawGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance" />
      <element name="TCustomDrawGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TCustomDrawGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TCustomDrawGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TCustomDrawGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TCustomDrawGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount" />
      <element name="TCustomDrawGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TCustomDrawGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TCustomDrawGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TCustomDrawGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TCustomDrawGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TCustomDrawGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TCustomDrawGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TCustomDrawGrid.FixedHotColor" link="#lcl.grids.TCustomGrid.FixedHotColor"/>
      <element name="TCustomDrawGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TCustomDrawGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TCustomDrawGrid.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TCustomDrawGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth" />
      <element name="TCustomDrawGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TCustomDrawGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TCustomDrawGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TCustomDrawGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TCustomDrawGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TCustomDrawGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TCustomDrawGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TCustomDrawGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TCustomDrawGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TCustomDrawGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TCustomDrawGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TCustomDrawGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection" />
      <element name="TCustomDrawGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>

      <element name="TCustomDrawGrid.OnColRowDeleted">
        <short>Event handler signalled when a grid column or row is deleted</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnColRowExchanged">
        <short>
          Event handler signalled when a grid column or row has its position exchanged with another
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnColRowInserted">
        <short>Event handler signalled when a column or row is inserted into the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnColRowMoved">
        <short>Event handler signalled when a grid column or row is moved</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnCompareCells">
        <short>Event handler signalled to compare the contents of cells</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TCustomDrawGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>
      <element name="TCustomDrawGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick"/>
      <element name="TCustomDrawGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TCustomDrawGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>

      <element name="TCustomDrawGrid.OnGetEditMask">
        <short>Event handler signalled to get the edit mask while editing a grid cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnGetEditText">
        <short>Event handler signalled to get the text to be edited in a grid cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnHeaderClick">
        <short>Event handler signalled when a column or row header is clicked</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnHeaderSized">
        <short>Event handler signalled when a column or row header is re-sized</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TCustomDrawGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TCustomDrawGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TCustomDrawGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TCustomDrawGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TCustomDrawGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TCustomDrawGrid.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TCustomDrawGrid.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TCustomDrawGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TCustomDrawGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TCustomDrawGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TCustomDrawGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>

      <element name="TCustomDrawGrid.OnSelectCell">
        <short>Event handler signalled when a grid cell is selected</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnSetEditText">
        <short>Event handler signalled to store the text that has been edited in a cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnTopleftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.OnValidateEntry">
        <short>Event handler signalled to validate the content in a cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomDrawGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TCustomDrawGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TCustomDrawGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TCustomDrawGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TCustomDrawGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TCustomDrawGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TCustomDrawGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TCustomDrawGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TCustomDrawGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

      <element name="TCustomDrawGrid.GetCheckBoxState">
        <short>
          <var>GetCheckBoxState</var> - returns the state of the checkbox at the specified position
        </short>
      </element>

      <element name="TCustomDrawGrid.SetCheckboxState">
        <short>
          <var>
            SetCheckboxState</var> - specifies the state of the checkbox in the nominated cell
        </short>
      </element>

      <element name="TCustomDrawGrid.ToggleCheckbox">
        <short>
          <var>ToggleCheckbox</var> - toggles checkbox state between checked and unchecked
        </short>
      </element>

      <element name="TCustomDrawGrid.OnGetCheckboxState">
        <short>
          <var>OnGetCheckboxState</var> - event handler for finding checkbox state
        </short>
      </element>

      <element name="TCustomDrawGrid.OnSetCheckboxState">
        <short>
          <var>OnSetCheckboxState</var> - event handler for specifying checkbox state
        </short>
      </element>

      <element name="TDrawGrid">
        <short>
          Implements a custom-drawn grid control
        </short>
        <descr>
          <p>
            <var>TDrawGrid</var> is a <var>TCustomDrawGrid</var> descendant which implements a custom-drawn grid control. The control represents it information as a matrix of rows and columns, but is oriented towards rendering graphical information as opposed to textual content.
          </p>
          <p>
            The OnDrawCell event handler is used to render the cell content in the grid, and can be used to render images or directly access the Canvas for the control. Default cell drawing logic is also implemented using the properties and methods from the ancestor class, and may be called from within the OnDrawCell event handler.
          </p>
          <p>
            TDrawGrid sets the visibility for properties introduced in the TCustomDrawGrid ancestor, and does not provide any new functionality.
          </p>
          <!-- TODO: Make consistent with TCustomDrawGrid -->
        </descr>
        <seealso>
          <link id="HowToUseGrids"/>
          <link id="TCustomGrid"/>
          <link id="TCustomDrawGrid"/>
          <link id="TOnDrawCell"/>
        </seealso>
      </element>

      <element name="TDrawGrid.InplaceEditor" link="#lcl.grids.TCustomGrid.InplaceEditor"/>
      <element name="TDrawGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TDrawGrid.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
      <element name="TDrawGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TDrawGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance"/>
      <element name="TDrawGrid.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
      <element name="TDrawGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TDrawGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TDrawGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TDrawGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TDrawGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount"/>
      <element name="TDrawGrid.ColRowDraggingCursor" link="#lcl.grids.TCustomGrid.ColRowDraggingCursor"/>

      <element name="TDrawGrid.ColRowDragIndicatorColor" link="#lcl.grids.TCustomGrid.ColRowDragIndicatorColor"/>

      <element name="TDrawGrid.ColSizingCursor" link="#lcl.grids.TCustomGrid.ColSizingCursor"/>
      <element name="TDrawGrid.ColumnClickSorts" link="#lcl.grids.TCustomGrid.ColumnClickSorts"/>
      <element name="TDrawGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TDrawGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TDrawGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TDrawGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TDrawGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TDrawGrid.DoubleBuffered" link="#lcl.controls.TControl.DoubleBuffered"/>
      <element name="TDrawGrid.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TDrawGrid.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TDrawGrid.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TDrawGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TDrawGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>
      <element name="TDrawGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TDrawGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TDrawGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TDrawGrid.Flat" link="#lcl.controls.TControl.Flat"/>
      <element name="TDrawGrid.Font" link="#lcl.controls.TControl.Font"/>
      <element name="TDrawGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth"/>
      <element name="TDrawGrid.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
      <element name="TDrawGrid.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
      <element name="TDrawGrid.ImageIndexSortAsc" link="#lcl.grids.TCustomGrid.ImageIndexSortAsc"/>
      <element name="TDrawGrid.ImageIndexSortDesc" link="#lcl.grids.TCustomGrid.ImageIndexSortDesc"/>
      <element name="TDrawGrid.MouseWheelOption" link="#lcl.grids.TCustomGrid.MouseWheelOption"/>
      <element name="TDrawGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TDrawGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>
      <element name="TDrawGrid.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TDrawGrid.ParentDoubleBuffered" link="#lcl.controls.TControl.ParentDoubleBuffered"/>
      <element name="TDrawGrid.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TDrawGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TDrawGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TDrawGrid.RangeSelectMode" link="#lcl.grids.TCustomGrid.RangeSelectMode"/>
      <element name="TDrawGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TDrawGrid.RowSizingCursor" link="#lcl.grids.TCustomGrid.RowSizingCursor"/>
      <element name="TDrawGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TDrawGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TDrawGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
      <element name="TDrawGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TDrawGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TDrawGrid.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
      <element name="TDrawGrid.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
      <element name="TDrawGrid.TitleImageListWidth" link="#lcl.grids.TCustomGrid.TitleImageListWidth"/>
      <element name="TDrawGrid.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
      <element name="TDrawGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TDrawGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TDrawGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TDrawGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TDrawGrid.OnAfterSelection" link="#lcl.grids.TCustomGrid.OnAfterSelection"/>
      <element name="TDrawGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection"/>
      <element name="TDrawGrid.OnCheckboxToggled" link="#lcl.grids.TCustomGrid.OnCheckboxToggled"/>
      <element name="TDrawGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TDrawGrid.OnColRowDeleted" link="#lcl.grids.TCustomGrid.OnColRowDeleted"/>
      <element name="TDrawGrid.OnColRowExchanged" link="#lcl.grids.TCustomGrid.OnColRowExchanged"/>
      <element name="TDrawGrid.OnColRowInserted" link="#lcl.grids.TCustomGrid.OnColRowInserted"/>
      <element name="TDrawGrid.OnColRowMoved" link="#lcl.grids.TCustomGrid.OnColRowMoved"/>
      <element name="TDrawGrid.OnCompareCells" link="#lcl.grids.TCustomGrid.OnCompareCells"/>
      <element name="TDrawGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TDrawGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TDrawGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TDrawGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TDrawGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>
      <element name="TDrawGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick"/>
      <element name="TDrawGrid.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TDrawGrid.OnEditingDone" link="#lcl.grids.TCustomGrid.OnEditingDone"/>
      <element name="TDrawGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TDrawGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TDrawGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TDrawGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TDrawGrid.OnGetCellHint" link="#lcl.grids.TCustomGrid.OnGetCellHint"/>
      <element name="TDrawGrid.OnGetCheckboxState" link="#lcl.grids.TCustomGrid.OnGetCheckboxState"/>
      <element name="TDrawGrid.OnGetEditMask" link="#lcl.grids.TCustomGrid.OnGetEditMask"/>
      <element name="TDrawGrid.OnGetEditText" link="#lcl.grids.TCustomGrid.OnGetEditText"/>
      <element name="TDrawGrid.OnHeaderClick" link="#lcl.grids.TCustomGrid.OnHeaderClick"/>
      <element name="TDrawGrid.OnHeaderSized" link="#lcl.grids.TCustomGrid.OnHeaderSized"/>
      <element name="TDrawGrid.OnHeaderSizing" link="#lcl.grids.TCustomGrid.OnHeaderSizing"/>
      <element name="TDrawGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TDrawGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TDrawGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TDrawGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TDrawGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TDrawGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TDrawGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TDrawGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TDrawGrid.OnMouseWheel" link="#lcl.grids.TCustomGrid.OnMouseWheel"/>
      <element name="TDrawGrid.OnMouseWheelDown" link="#lcl.grids.TCustomGrid.OnMouseWheelDown"/>
      <element name="TDrawGrid.OnMouseWheelUp" link="#lcl.grids.TCustomGrid.OnMouseWheelUp"/>
      <element name="TDrawGrid.OnMouseWheelHorz" link="#lcl.grids.TCustomGrid.OnMouseWheelHorz"/>
      <element name="TDrawGrid.OnMouseWheelLeft" link="#lcl.grids.TCustomGrid.OnMouseWheelLeft"/>
      <element name="TDrawGrid.OnMouseWheelRight" link="#lcl.grids.TCustomGrid.OnMouseWheelRight"/>
      <element name="TDrawGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TDrawGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TDrawGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TDrawGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>
      <element name="TDrawGrid.OnSelectCell" link="#lcl.grids.TCustomDrawGrid.OnSelectCell"/>
      <element name="TDrawGrid.OnSetCheckboxState" link="#lcl.grids.TCustomGrid.OnSetCheckboxState"/>
      <element name="TDrawGrid.OnSetEditText" link="#lcl.grids.TCustomGrid.OnSetEditText"/>
      <element name="TDrawGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TDrawGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TDrawGrid.OnTopleftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TDrawGrid.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
      <element name="TDrawGrid.OnUserCheckboxImage" link="#lcl.grids.TCustomGrid.OnUserCheckBoxImage"/>
      <element name="TDrawGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TDrawGrid.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="TStringGridStrings">
        <short>
          Represents strings used as the cell values in TStringGrid
        </short>
        <descr>
          <var>TStringGridStrings</var> is a TStrings descendant that represents the strings used to populate the cells of a <var>TStringGrid</var>.
        </descr>
        <seealso></seealso>
      </element>

      <element name="TStringGridStrings.FAddedCount"/>
      <element name="TStringGridStrings.FGrid"/>
      <element name="TStringGridStrings.FIsCol"/>
      <element name="TStringGridStrings.FIndex"/>
      <element name="TStringGridStrings.FOwner"/>

      <element name="TStringGridStrings.ConvertIndexLineCol">
        <short>
          Converts an index position to line and column numbers for Cells in the grid
        </short>
        <descr></descr>
        <seealso>
          <link id="TStringGridStrings.Add"/>
          <link id="TStringGridStrings.Get"/>
          <link id="TStringGridStrings.GetObject"/>
          <link id="TStringGridStrings.Put"/>
          <link id="TStringGridStrings.PutObject"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Result">
        <short></short>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Index">
        <short></short>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Line">
        <short></short>
      </element>
      <element name="TStringGridStrings.ConvertIndexLineCol.Col">
        <short></short>
      </element>

      <element name="TStringGridStrings.Get">
        <short>Gets the string at the specified index position</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringGridStrings.Get.Result">
        <short></short>
      </element>
      <element name="TStringGridStrings.Get.Index">
        <short></short>
      </element>

      <element name="TStringGridStrings.GetCount">
        <short>Gets the number of strings in the class instance</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.classes.TStringList.Count"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.GetCount.Result">
        <short></short>
      </element>

      <element name="TStringGridStrings.GetObject">
        <short>Gets the object stored at the specified index position</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Objects"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.GetObject.Result">
        <short></short>
      </element>
      <element name="TStringGridStrings.GetObject.Index">
        <short></short>
      </element>

      <element name="TStringGridStrings.Put">
        <short>Stores a string at the specified index position</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TStringGridStrings.Put.Index">
        <short></short>
      </element>
      <element name="TStringGridStrings.Put.S">
        <short></short>
      </element>

      <element name="TStringGridStrings.PutObject">
        <short>Stores an Object at the specified index position</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.classes.TStrings.Objects"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.PutObject.Index">
        <short></short>
      </element>
      <element name="TStringGridStrings.PutObject.aObject">
        <short></short>
      </element>

      <element name="TStringGridStrings.Create">
        <short>
          <var>Create</var> - constructor for <var>TStringGridStrings</var>: calls inherited <var>Create</var> and initializes some local variables
        </short>
        <descr></descr>
        <seealso>
          <link id="#rtl.System.TObject.Create">TObject.Create</link>
        </seealso>
      </element>
      <element name="TStringGridStrings.Create.aGrid">
        <short>Grid for the string values</short>
      </element>
      <element name="TStringGridStrings.Create.OwnerMap">
        <short></short>
      </element>
      <element name="TStringGridStrings.Create.aIsCol">
        <short></short>
      </element>
      <element name="TStringGridStrings.Create.aIndex">
        <short></short>
      </element>

      <element name="TStringGridStrings.Destroy">
        <short>Destructor for the class instance</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Destroy"/>
        </seealso>
      </element>

      <element name="TStringGridStrings.Add">
        <short>Adds the specified string to the class instance</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Add"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.Add.Result">
        <short></short>
      </element>
      <element name="TStringGridStrings.Add.S">
        <short></short>
      </element>

      <element name="TStringGridStrings.Assign">
        <short>Stores values from Source in the current class instance</short>
        <descr></descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Assign"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.Assign.Source">
        <short></short>
      </element>

      <element name="TStringGridStrings.Clear">
        <short>
          Removes all values for the column or row represented by he class instance
        </short>
        <descr></descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Clear"/>
        </seealso>
      </element>

      <element name="TStringGridStrings.Delete">
        <short>Deletes a value stored in the class instance</short>
        <descr>
          Raises an <var>EGridException</var> exception with the message <b>'Cannot delete value.'</b>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Delete"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.Delete.Index">
        <short></short>
      </element>

      <element name="TStringGridStrings.Insert">
        <short>Inserts a value in the class instance</short>
        <descr>
          Raises an <var>EGridException</var> exception with the message <b>'Cannot insert  value.'</b>
        </descr>
        <seealso>
          <link id="#rtl.Classes.TStrings.Insert"/>
        </seealso>
      </element>
      <element name="TStringGridStrings.Insert.Index">
        <short></short>
      </element>
      <element name="TStringGridStrings.Insert.S">
        <short></short>
      </element>

      <element name="TCustomStringGrid">
        <short>
          <var>TCustomStringGrid</var> - base class for <var>TStringGrid</var>
        </short>
        <descr></descr>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.FModified"/>
      <element name="TCustomStringGrid.FColsMap"/>
      <element name="TCustomStringGrid.FRowsMap"/>
      <element name="TCustomStringGrid.FOnCellProcess"/>

      <element name="TCustomStringGrid.GetCols">
        <short>
          Gets the values in the specified column number as a TStrings instance
        </short>
        <descr>
          GetCols is the read access specifier for the indexed Cols property.
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Cols"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.GetCols.Result">
        <short>TStrings with row values for the specified column number</short>
      </element>
      <element name="TCustomStringGrid.GetCols.Index">
        <short>Column number retrieved in the method</short>
      </element>

      <element name="TCustomStringGrid.GetObjects">
        <short>Gets the value for the indexed Objects property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.GetObjects.Result">
        <short>Value for the property</short>
      </element>
      <element name="TCustomStringGrid.GetObjects.ACol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomStringGrid.GetObjects.ARow">
        <short>Row number for the cell</short>
      </element>

      <element name="TCustomStringGrid.GetRows">
        <short>Gets the value for the indexed Rows property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.GetRows.Result">
        <short>Value for the property</short>
      </element>
      <element name="TCustomStringGrid.GetRows.Index">
        <short>Ordinal position for the requested row</short>
      </element>

      <element name="TCustomStringGrid.MapFree">
        <short>Frees the TStringGridStrings instances in the specified Map</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.MapFree.aMap">
        <short>TMap instance examined and updated in the method</short>
      </element>

      <element name="TCustomStringGrid.MapGetColsRows">
        <short>Gets the column or row at the specified index in the map instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.Result">
        <short></short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.IsCols">
        <short></short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.Index">
        <short></short>
      </element>
      <element name="TCustomStringGrid.MapGetColsRows.AMap">
        <short></short>
      </element>

      <element name="TCustomStringGrid.ReadCells">
        <short>Reads string values for the Cells property using a TReader instance</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.ReadCells.Reader">
        <short>TReader instance used to read values during LCL streaming</short>
      </element>

      <element name="TCustomStringGrid.SetCols">
        <short>Sets the value for the indexed Cols property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetCols.Index">
        <short>Ordinal position for the affected column </short>
      </element>
      <element name="TCustomStringGrid.SetCols.AValue">
        <short>New value for the indexed property</short>
      </element>

      <element name="TCustomStringGrid.SetObjects">
        <short>Sets the value for the indexed Objects property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetObjects.ACol">
        <short>Ordinal position for the column</short>
      </element>
      <element name="TCustomStringGrid.SetObjects.ARow">
        <short>Ordinal position for the row</short>
      </element>
      <element name="TCustomStringGrid.SetObjects.AValue">
        <short>New value for the indexed property</short>
      </element>

      <element name="TCustomStringGrid.SetRows">
        <short>Sets the value for the indexed Rows property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetRows.Index">
        <short>Ordinal position for the row affected</short>
      </element>
      <element name="TCustomStringGrid.SetRows.AValue">
        <short>New value for the indexed property</short>
      </element>

      <element name="TCustomStringGrid.WriteCells">
        <short>
          Writes string values in the Cells property using the specified TWriter instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.WriteCells.Writer">
        <short></short>
      </element>

      <element name="TCustomStringGrid.CopyCellRectToClipboard">
        <short>
          Copies the content from cell(s) in the specified selection rectangle to the clipboard
        </short>
        <descr>
          <remark>
            Only visible cells in the selection rectangle are included in the copied values. Others are quietly discarded. The HTML TABLE syntax is used to represent the copied cell values. Line End and HTML reserved characters are translated into HTML-safe tags or character entities.
          </remark>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.CopyCellRectToClipboard.R">
        <short>Cell selection rectangle with values copied in the method</short>
      </element>

      <element name="TCustomStringGrid.AssignTo">
        <short>
          Assigns values from the current class instance, including Cells, to the target class instance
        </short>
        <descr></descr>
        <seealso>
          <link id="TCustomGrid.AssignTo"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AssignTo.Dest" link="#lcl.grids.TCustomGrid.AssignTo.Dest"/>

      <element name="TCustomStringGrid.AutoAdjustColumn">
        <short>Adjusts and renders the font, text and images for the specified column</short>
        <descr></descr>
        <seealso>
          <link id="#LCL.Grids.TCustomGrid.AutoAdjustColumn"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AutoAdjustColumn.aCol">
        <short></short>
      </element>

      <element name="TCustomStringGrid.CalcCellExtent" link="#lcl.grids.TCustomDrawGrid.CalcCellExtent"/>
      <element name="TCustomStringGrid.CalcCellExtent.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.CalcCellExtent.aRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.CalcCellExtent.aRect">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DefineProperties" link="#rtl.Classes.TComponent.DefineProperties"/>
      <element name="TCustomStringGrid.DefineProperties.Filer">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DefineCellsProperty">
        <short>
          Defines the Cells property for the TFiler instance used in LCL streaming
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.DefineCellsProperty.Filer">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DoCompareCells" link="#lcl.grids.TCustomGrid.DoCompareCells"/>
      <element name="TCustomStringGrid.DoCompareCells.Result">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.Acol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.ARow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.Bcol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCompareCells.BRow">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DoCopyToClipboard" link="#lcl.grids.TCustomGrid.DoCopyToClipboard"/>
      <element name="TCustomStringGrid.DoCutToClipboard" link="#lcl.grids.TCustomGrid.DoCutToClipboard"/>
      <element name="TCustomStringGrid.DoPasteFromClipboard" link="#lcl.grids.TCustomGrid.DoPasteFromClipboard"/>

      <element name="TCustomStringGrid.DoCellProcess">
        <short>Signals the OnCellProcess event handler when assigned</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.aRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.processType">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DoCellProcess.aValue">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DrawColumnText">
        <short>Draws the title image and cell content for the specified column and row</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.aRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.aRect">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawColumnText.aState">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DrawTextInCell">
        <short>Calls DrawCellText using the specified arguments</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.aRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.aRect">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawTextInCell.aState">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DrawCellAutonumbering">
        <short>Performs auto-numbering for non-empty cells in the grid</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aRect">
        <short></short>
      </element>
      <element name="TCustomStringGrid.DrawCellAutonumbering.aValue">
        <short></short>
      </element>

      <element name="TCustomStringGrid.GetCells">
        <short>Gets the value for the indexed Cells property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.GetCells.Result">
        <short>Value for the indexed property</short>
      </element>
      <element name="TCustomStringGrid.GetCells.ACol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomStringGrid.GetCells.ARow">
        <short>Row number for the cell</short>
      </element>

      <element name="TCustomStringGrid.GetCheckBoxState">
        <short>Gets the state for a cell displayed as a Checkbox</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aRow">
        <short>Row number for the cell</short>
      </element>
      <element name="TCustomStringGrid.GetCheckBoxState.aState">
        <short>Checkbox state derived for the specified cell</short>
      </element>

      <element name="TCustomStringGrid.GetEditText" link="#lcl.grids.TCustomGrid.GetEditText"/>
      <element name="TCustomStringGrid.GetEditText.Result">
        <short></short>
      </element>
      <element name="TCustomStringGrid.GetEditText.aCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.GetEditText.aRow">
        <short></short>
      </element>

      <element name="TCustomStringGrid.LoadContent" link="#lcl.grids.TCustomGrid.LoadContent"/>
      <element name="TCustomStringGrid.LoadContent.cfg">
        <short></short>
      </element>
      <element name="TCustomStringGrid.LoadContent.Version">
        <short></short>
      </element>

      <element name="TCustomStringGrid.Loaded" link="#rtl.classes.TComponent.Loaded" />
      <element name="TCustomStringGrid.SaveContent" link="#lcl.grids.TCustomGrid.SaveContent"/>
      <element name="TCustomStringGrid.SaveContent.cfg" link="#lcl.grids.TCustomGrid.SaveContent.cfg"/>

      <element name="TCustomStringGrid.SelectionSetText">
        <short>
          <var>SelectionSetText</var> - stores the text in the selection</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SelectionSetText.TheText">
        <short></short>
      </element>

      <element name="TCustomStringGrid.SelectionSetHTML">
        <short>Sets the value for the current Selection to the specified HTML content</short>
        <descr>
          <p>
            Extracts text for rows and columns in the grid from the tagged content in TheHTML. Recognizes and converts the following HTML tags:
          </p>
          <ul>
            <li>BR</li>
            <li>TR</li>
            <li>TD</li>
          </ul>
          <p>
            Converts HTML numeric character entities to their UTF-8-encoded equivalent. Unrecognized entities are converted to a Question Mark character (?).
          </p>
          <p>
            Calls DoCellProcess to paste the values extracted from the HTML content. The value in TheText is used when TheHTML does not contain valid HTML that can be handled in the method. Cells and Rows affected in the method are assigned as the current Selection in the grid control prior to exit.
          </p>
          <p>
            Used in the DoPasteFromClipboard method when the clipboard supports the HTML format.
          </p>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SelectionSetHTML.TheHTML">
        <short>HTML stored in the current selection</short>
      </element>
      <element name="TCustomStringGrid.SelectionSetHTML.TheText">
        <short>Textual representation for the HTML content</short>
      </element>

      <element name="TCustomStringGrid.SetCells">
        <short>Sets the value for the indexed Cells property</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetCells.ACol">
        <short>Column number for the affected cell</short>
      </element>
      <element name="TCustomStringGrid.SetCells.ARow">
        <short>Row number for the affected cell</short>
      </element>
      <element name="TCustomStringGrid.SetCells.AValue">
        <short>New value for the indexed property</short>
      </element>

      <element name="TCustomStringGrid.SetCheckboxState">
        <short>Sets the checked state for a Checkbox in the specified cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aCol">
        <short>Column number for the cell</short>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aRow">
        <short>Row number for the cell</short>
      </element>
      <element name="TCustomStringGrid.SetCheckboxState.aState">
        <short>Checked state for the cell</short>
      </element>

      <element name="TCustomStringGrid.SetEditText">
        <short>
          Locks, updates, and unlocks the editor and text for the cell at the specified coordinates
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SetEditText.aCol">
        <short>Column number for the modified cell</short>
      </element>
      <element name="TCustomStringGrid.SetEditText.aRow">
        <short>Row number or the modified cell</short>
      </element>
      <element name="TCustomStringGrid.SetEditText.aValue">
        <short>New value for the modified cell</short>
      </element>

      <element name="TCustomStringGrid.Modified">
        <short>
          Indicates if the content in the grid cells has been changed
        </short>
        <descr>
          <p>
            The value in <var>Modified</var> is set to <b>False</b> when Loaded using the LCL streaming mechanism. The value in Modified is changed to <b>True</b> when the <var>Cells</var> property is updated in the <var>SetCells</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Cells"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.OnCellProcess">
        <short>
          Event handler signalled when copying or pasting content for Cells in the grid
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TCustomStringGrid.Create">
        <short>
          Constructor for the class instance
        </short>
        <descr>
          <p>
            <var>Create</var> -is the constructor for <var>TCustomStringGrid</var>. It calls the inherited <var>Create</var> method, and sets default styles, layout and alignment used in the class instance.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Grids.TCustomDrawGrid.Create"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.Create.AOwner">
        <short>Owner of the class instance</short>
      </element>

      <element name="TCustomStringGrid.Destroy">
        <short>
          Destructor for the class instance
        </short>
        <descr>
          <p>
            <var>Destroy</var> is the destructor for <var>TCustomStringGrid</var>. It frees maps of columns and rows, and calls the inherited <var>Destroy</var> method.
          </p>
        </descr>
        <seealso>
          <link id="#LCL.Grids.TCustomDrawGrid.Destroy"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.AutoSizeColumn">
        <short>
          <var>AutoSizeColumn</var> - automatically adjust width of column to accommodate widest text
        </short>
        <descr>
          <p>
            AutoSizeColumn sets the column width to the length of the widest text found in the column specified by <var>aCol.</var>
          </p>
          <p>
            Tip: Use <var>goDblClickAutoSize</var> in Options to allow columns to be automatically resized when doubleClicking the column border.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.AutoSizeColumns"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.AutoSizeColumn.aCol">
        <short>Column number resized in the method</short>
      </element>

      <element name="TCustomStringGrid.AutoSizeColumns">
        <short>
          Resizes all columns to fit in the longest text in each
        </short>
        <descr>
          <p>
            Automatically resizes all columns by adjusting them to fit in the longest text in each column. This is a quick way to perform the <var>AutoSizeColumn</var> method for every column in the grid.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.AutoSizeColumn"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.Clean">
        <short>
          Removes cell content using the specified options
        </short>
        <descr>
          <p>
            Cleans all cells in the grid subject to the given <var>CleanOptions</var>, optionally specifying a range of cells or a rectangular region. See <link id="TGridZoneSet"/> for more information.
          </p>
          <p>
            The cleaning operation does not change the number of rows and columns. It replaces the content for the affected cells with empty strings.
          </p>
          <p>
            Some examples:
          </p>
          <ul>
            <li>Clean all cells: grid.Clean([]); (the same as grid.clean)</li>
            <li>Clean all non-fixed cells: grid.Clean([gzNormal]);</li>
            <li>Clean all cells except grid column headers: Grid.Clean([gzNormal, gzFixedRows]);</li>
          </ul>
        </descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.Clean.CleanOptions">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Clean.aRect">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Clean.StartCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Clean.StartRow">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Clean.EndCol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Clean.EndRow">
        <short></short>
      </element>

      <element name="TCustomStringGrid.CopyToClipboard">
        <short>
          <var>CopyToClipboard</var> - copy a range of cells to clipboard
        </short>
        <descr>
          <p>
            <var>CopyToClipboard</var> will copy a range of cells into the clipboard; the cells values are TAB separated. The range is defined based on optional <var>AUseSelection</var> parameter (which is <b>False</b> by default) and indicates the range is set to the whole grid, including fixed cols/rows. If <var>AUseSelection</var> is <b>True</b>, the range of cells is set to the current <link id="TCustomGrid.Selection"/>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomGrid.Selection"/>
        </seealso>
      </element>

      <element name="TCustomStringGrid.InsertRowWithValues">
        <short>
          Inserts a row at the specified position with the specified cell values
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.InsertRowWithValues.Index">
        <short></short>
      </element>
      <element name="TCustomStringGrid.InsertRowWithValues.Values">
        <short></short>
      </element>

      <element name="TCustomStringGrid.LoadFromCSVStream">
        <short>Loads the content in the grid from the comma-separated values in AStream</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.AStream">
        <short>Stream with the content loaded in the method</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.ADelimiter">
        <short>Delimiter between cell data in the stream; default is Comma (',')</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.UseTitles">
        <short>Indicates if Column captions are loaded from values in the stream</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.FromLine">
        <short>Initial line number in the stream included in the grid content; default is 0</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVStream.SkipEmptyLines">
        <short>Indicates if empty lines in the stream are ignored in the method</short>
      </element>

      <element name="TCustomStringGrid.LoadFromCSVFile">
        <short>Loads the grid from a file using comma-separated value format</short>
        <descr>
          <p>
            Creates a temporary <var>TFileStreamUTF8</var> instance that is used to load values from the file in <var>AFilename</var> by calling the <var>LoadFromCSVStream</var> method.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.LoadFromCSVStream"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.AFilename">
        <short>File name with the content loaded in the method</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.ADelimiter">
        <short>Delimiter between cell values in the file; default is Comma (',')</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.UseTitles">
        <short>Indicates if column captions are loaded from values in the file</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.FromLine">
        <short>Initial line number from the file loaded in the method</short>
      </element>
      <element name="TCustomStringGrid.LoadFromCSVFile.SkipEmptyLines">
        <short>Indicates if empty lines in the file are ignored in the method</short>
      </element>

      <element name="TCustomStringGrid.SaveToCSVStream">
        <short>
          Saves content in the grid as comma-separated values to the specified stream instance
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.AStream">
        <short>Stream where grid content is stored</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.ADelimiter">
        <short>Delimiter between cell values; default is Comma (',')</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.WriteTitles">
        <short>Indicates that column captions are stored as the first row of CSV data</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVStream.VisibleColumnsOnly">
        <short>
          Indicates if only visible columns are included in the CSV output
        </short>
      </element>

      <element name="TCustomStringGrid.SaveToCSVFile">
        <short>
          Saves grid content as comma-separated values to the specified file name
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.AFileName">
        <short>File name (with optional path) where CSV data is stored</short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.ADelimiter">
        <short>
          Delimiter used between cell values in CSV output; default is Comma (',')
        </short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.WriteTitles">
        <short>
          Indicates if column captions are written as the first row of CSV data in the file
        </short>
      </element>
      <element name="TCustomStringGrid.SaveToCSVFile.VisibleColumnsOnly">
        <short>Indicates if only visible columns are included in the CSV output</short>
      </element>

      <element name="TCustomStringGrid.Cells">
        <short>Provides indexed access to a cell value by its column and row number</short>
        <descr>
          <p>
            <var>Cells</var> is an indexed <var>String</var> property used to read or write the content for a cell in the grid. The ACol and ARow indexes are used the access a value stored at the requested column and row position.
          </p>
          <p>
            Reading the value causes the pointer to the cell in <var>Celda</var> to return its Text value.
          </p>
          <p>
            Setting the value causes the pointer to the cell in Celda to be updated at the specified coordinates. An active cell editor will be cancelled if it is not locked, and the value in <var>Modified</var> is reset to <b>False</b>.
          </p>
        </descr>
        <seealso>
          <link id="TCustomStringGrid.Modified"/>
          <link id="TVirtualGrid.Celda"/>
        </seealso>
      </element>
      <element name="TCustomStringGrid.Cells.ACol">
        <short>Column number for the cell value</short>
      </element>
      <element name="TCustomStringGrid.Cells.ARow">
        <short>Row number for the cell value</short>
      </element>

      <element name="TCustomStringGrid.Cols">
        <short>
          <var>Cols</var> - get or set a list of strings for column names as specified by the
          <var>index</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.Cols.Index">
        <short></short>
      </element>

      <element name="TCustomStringGrid.DefaultTextStyle" link="#lcl.grids.TCustomGrid.DefaultTextStyle"/>
      <element name="TCustomStringGrid.EditorMode" link="#lcl.grids.TCustomGrid.EditorMode"/>
      <element name="TCustomStringGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>

      <element name="TCustomStringGrid.Objects">
        <short>The <var>Objects</var> present in the specified cell</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.Objects.ACol">
        <short></short>
      </element>
      <element name="TCustomStringGrid.Objects.ARow">
        <short></short>
      </element>

      <element name="TCustomStringGrid.Rows">
        <short>
          <var>Rows</var> - gets or sets a list of strings for row names as specified by <var>index</var>
        </short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="TCustomStringGrid.Rows.Index">
        <short></short>
      </element>

      <element name="TCustomStringGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>

      <element name="TCustomStringGrid.ValidateOnSetSelection">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TStringGrid">
        <short>
          <var>TStringGrid</var> - a specialized grid for displaying strings (textual content) in a matrix of columns and rows
        </short>
        <descr></descr>
        <seealso>
          <link id="HowToUseGrids"/>
        </seealso>
      </element>

      <element name="TStringGrid.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <element name="TStringGrid.Modified" link="#lcl.grids.TCustomStringGrid.Modified"/>
      <element name="TStringGrid.InplaceEditor" link="#lcl.grids.TCustomGrid.InplaceEditor"/>
      <element name="TStringGrid.Align" link="#lcl.controls.TControl.Align"/>
      <element name="TStringGrid.AlternateColor" link="#lcl.grids.TCustomGrid.AlternateColor"/>
      <element name="TStringGrid.Anchors" link="#lcl.controls.TControl.Anchors"/>
      <element name="TStringGrid.AutoAdvance" link="#lcl.grids.TCustomGrid.AutoAdvance"/>
      <element name="TStringGrid.AutoEdit" link="#lcl.grids.TCustomGrid.AutoEdit"/>
      <element name="TStringGrid.AutoFillColumns" link="#lcl.grids.TCustomGrid.AutoFillColumns"/>
      <element name="TStringGrid.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
      <element name="TStringGrid.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
      <element name="TStringGrid.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
      <element name="TStringGrid.CellHintPriority" link="#lcl.grids.TCustomGrid.CellHintPriority"/>
      <element name="TStringGrid.Color" link="#lcl.controls.TControl.Color"/>
      <element name="TStringGrid.ColCount" link="#lcl.grids.TCustomGrid.ColCount"/>

      <element name="TStringGrid.ColRowDraggingCursor">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TStringGrid.ColRowDragIndicatorColor">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TStringGrid.ColSizingCursor">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TStringGrid.ColumnClickSorts">
        <short></short>
        <descr></descr>
        <seealso></seealso>
      </element>

      <element name="TStringGrid.Columns" link="#lcl.grids.TCustomGrid.Columns"/>
      <element name="TStringGrid.Constraints" link="#lcl.controls.TControl.Constraints"/>
      <element name="TStringGrid.DefaultColWidth" link="#lcl.grids.TCustomGrid.DefaultColWidth"/>
      <element name="TStringGrid.DefaultDrawing" link="#lcl.grids.TCustomGrid.DefaultDrawing"/>
      <element name="TStringGrid.DefaultRowHeight" link="#lcl.grids.TCustomGrid.DefaultRowHeight"/>
      <element name="TStringGrid.DoubleBuffered" link="#lcl.controls.TControl.DoubleBuffered"/>
      <element name="TStringGrid.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
      <element name="TStringGrid.DragKind" link="#lcl.controls.TControl.DragKind"/>
      <element name="TStringGrid.DragMode" link="#lcl.controls.TControl.DragMode"/>
      <element name="TStringGrid.Enabled" link="#lcl.controls.TControl.Enabled"/>
      <element name="TStringGrid.ExtendedSelect" link="#lcl.grids.TCustomGrid.ExtendedSelect"/>
      <element name="TStringGrid.FixedColor" link="#lcl.grids.TCustomGrid.FixedColor"/>
      <element name="TStringGrid.FixedCols" link="#lcl.grids.TCustomGrid.FixedCols"/>
      <element name="TStringGrid.FixedRows" link="#lcl.grids.TCustomGrid.FixedRows"/>
      <element name="TStringGrid.Flat" link="#lcl.grids.TCustomGrid.Flat"/>
      <element name="TStringGrid.Font" link="LCL.Controls.TControl.Font"/>
      <element name="TStringGrid.GridLineWidth" link="#lcl.grids.TCustomGrid.GridLineWidth"/>
      <element name="TStringGrid.HeaderHotZones" link="#lcl.grids.TCustomGrid.HeaderHotZones"/>
      <element name="TStringGrid.HeaderPushZones" link="#lcl.grids.TCustomGrid.HeaderPushZones"/>
      <element name="TStringGrid.ImageIndexSortAsc" link="#lcl.grids.TCustomGrid.ImageIndexSortAsc"/>
      <element name="TStringGrid.ImageIndexSortDesc" link="#lcl.grids.TCustomGrid.ImageIndexSortDesc"/>
      <element name="TStringGrid.MouseWheelOption" link="#lcl.grids.TCustomGrid.MouseWheelOption"/>
      <element name="TStringGrid.Options" link="#lcl.grids.TCustomGrid.Options"/>
      <element name="TStringGrid.Options2" link="#lcl.grids.TCustomGrid.Options2"/>
      <element name="TStringGrid.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
      <element name="TStringGrid.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
      <element name="TStringGrid.ParentDoubleBuffered" link="#lcl.controls.TControl.ParentDoubleBuffered"/>
      <element name="TStringGrid.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
      <element name="TStringGrid.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
      <element name="TStringGrid.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
      <element name="TStringGrid.RangeSelectMode" link="#lcl.grids.TCustomGrid.RangeSelectMode"/>
      <element name="TStringGrid.RowCount" link="#lcl.grids.TCustomGrid.RowCount"/>
      <element name="TStringGrid.RowSizingCursor" link="#lcl.grids.TCustomGrid.RowSizingCursor"/>
      <element name="TStringGrid.ScrollBars" link="#lcl.grids.TCustomGrid.ScrollBars"/>
      <element name="TStringGrid.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
      <element name="TStringGrid.TabAdvance" link="#lcl.grids.TCustomGrid.TabAdvance"/>
      <element name="TStringGrid.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
      <element name="TStringGrid.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
      <element name="TStringGrid.TitleFont" link="#lcl.grids.TCustomGrid.TitleFont"/>
      <element name="TStringGrid.TitleImageList" link="#lcl.grids.TCustomGrid.TitleImageList"/>
      <element name="TStringGrid.TitleStyle" link="#lcl.grids.TCustomGrid.TitleStyle"/>
      <element name="TStringGrid.UseXORFeatures" link="#lcl.grids.TCustomGrid.UseXORFeatures"/>
      <element name="TStringGrid.Visible" link="#lcl.controls.TControl.Visible"/>
      <element name="TStringGrid.VisibleColCount" link="#lcl.grids.TCustomGrid.VisibleColCount"/>
      <element name="TStringGrid.VisibleRowCount" link="#lcl.grids.TCustomGrid.VisibleRowCount"/>
      <element name="TStringGrid.OnAfterSelection" link="#lcl.grids.TCustomGrid.OnAfterSelection"/>
      <element name="TStringGrid.OnBeforeSelection" link="#lcl.grids.TCustomGrid.OnBeforeSelection"/>
      <element name="TStringGrid.OnCellProcess" link="#lcl.grids.TCustomGrid.OnCellProcess"/>
      <element name="TStringGrid.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
      <element name="TStringGrid.OnCheckboxToggled" link="#lcl.grids.TCustomGrid.OnCheckboxToggled"/>
      <element name="TStringGrid.OnClick" link="#lcl.controls.TControl.OnClick"/>
      <element name="TStringGrid.OnColRowDeleted" link="#lcl.grids.TCustomDrawGrid.OnColRowDeleted"/>
      <element name="TStringGrid.OnColRowExchanged" link="#lcl.grids.TCustomDrawGrid.OnColRowExchanged"/>
      <element name="TStringGrid.OnColRowInserted" link="#lcl.grids.TCustomDrawGrid.OnColRowInserted"/>
      <element name="TStringGrid.OnColRowMoved" link="#lcl.grids.TCustomDrawGrid.OnColRowMoved"/>
      <element name="TStringGrid.OnCompareCells" link="#lcl.grids.TCustomDrawGrid.OnCompareCells"/>
      <element name="TStringGrid.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
      <element name="TStringGrid.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
      <element name="TStringGrid.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
      <element name="TStringGrid.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
      <element name="TStringGrid.OnDrawCell" link="#lcl.grids.TCustomGrid.OnDrawCell"/>

      <element name="TStringGrid.OnEditButtonClick" link="#lcl.grids.TCustomGrid.OnEditButtonClick">
        <short>Deprecated</short>
      </element>

      <element name="TStringGrid.OnButtonClick" link="#lcl.grids.TCustomGrid.OnButtonClick"/>
      <element name="TStringGrid.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
      <element name="TStringGrid.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
      <element name="TStringGrid.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
      <element name="TStringGrid.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
      <element name="TStringGrid.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
      <element name="TStringGrid.OnGetCellHint" link="#lcl.grids.TCustomGrid.OnGetCellHint"/>
      <element name="TStringGrid.OnGetCheckboxState" link="#lcl.grids.TCustomGrid.OnGetCheckboxState"/>
      <element name="TStringGrid.OnGetEditMask" link="#lcl.grids.TCustomDrawGrid.OnGetEditMask"/>
      <element name="TStringGrid.OnGetEditText" link="#lcl.grids.TCustomDrawGrid.OnGetEditText"/>
      <element name="TStringGrid.OnHeaderClick" link="#lcl.grids.TCustomDrawGrid.OnHeaderClick"/>
      <element name="TStringGrid.OnHeaderSized" link="#lcl.grids.TCustomDrawGrid.OnHeaderSized"/>
      <element name="TStringGrid.OnHeaderSizing" link="#lcl.grids.TCustomGrid.OnHeaderSizing"/>
      <element name="TStringGrid.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
      <element name="TStringGrid.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
      <element name="TStringGrid.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
      <element name="TStringGrid.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
      <element name="TStringGrid.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
      <element name="TStringGrid.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
      <element name="TStringGrid.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
      <element name="TStringGrid.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
      <element name="TStringGrid.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
      <element name="TStringGrid.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
      <element name="TStringGrid.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
      <element name="TStringGrid.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
      <element name="TStringGrid.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
      <element name="TStringGrid.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
      <element name="TStringGrid.OnPickListSelect" link="#lcl.grids.TCustomGrid.OnPickListSelect"/>
      <element name="TStringGrid.OnPrepareCanvas" link="#lcl.grids.TCustomGrid.OnPrepareCanvas"/>
      <element name="TStringGrid.OnResize" link="#lcl.controls.TControl.OnResize"/>
      <element name="TStringGrid.OnSelectEditor" link="#lcl.grids.TCustomGrid.OnSelectEditor"/>
      <element name="TStringGrid.OnSelection" link="#lcl.grids.TCustomGrid.OnSelection"/>
      <element name="TStringGrid.OnSelectCell" link="#lcl.grids.TCustomDrawGrid.OnSelectCell"/>
      <element name="TStringGrid.OnSetCheckboxState" link="#lcl.grids.TCustomDrawGrid.OnSetCheckboxState"/>
      <element name="TStringGrid.OnSetEditText" link="#lcl.grids.TCustomDrawGrid.OnSetEditText"/>
      <element name="TStringGrid.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
      <element name="TStringGrid.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
      <element name="TStringGrid.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
      <element name="TStringGrid.OnTopLeftChanged" link="#lcl.grids.TCustomGrid.OnTopLeftChanged"/>
      <element name="TStringGrid.OnUserCheckboxBitmap" link="#lcl.grids.TCustomGrid.OnUserCheckboxBitmap"/>
      <element name="TStringGrid.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TStringGrid.OnValidateEntry" link="#lcl.grids.TCustomGrid.OnValidateEntry"/>

      <element name="DrawRubberRect">
        <short>Draws a rubber banding rectangle</short>
        <descr>
          <p>
            Draws a dotted rubber banding rectangle around the provided cell rectangle.
          </p>
          <p>
            <var>DrawBits</var> contains a <var>Byte</var> value that indicates the rectangle sides drawn in the routine. By default, all sides for the rectangle are drawn. Use the following byte values or-ed together in <var>DrawBits</var> to specify the sides drawn:
          </p>
          <dl>
            <dt>BF_LEFT</dt>
            <dd>Draws the left side of the rectangle.</dd>
            <dt>BF_RIGHT</dt>
            <dd>Draws the right side of the rectangle.</dd>
            <dt>BF_TOP</dt>
            <dd>Draws the top of the rectangle.</dd>
            <dt>BF_BOTTOM</dt>
            <dd>Draws the bottom of the rectangle.</dd>
          </dl>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="DrawRubberRect.Canvas">
        <short>Canvas where the rubber band rectangle is drawn</short>
      </element>
      <element name="DrawRubberRect.aRect">
        <short>Coordinates for the rubber band rectangle</short>
      </element>
      <element name="DrawRubberRect.Color">
        <short>Color for the rubber band rectangle</short>
      </element>
      <element name="DrawRubberRect.DrawBits">
        <short>Sides drawn for the rubber band rectangle</short>
      </element>

      <element name="GetWorkingCanvas">
        <short>Ensures that a valid handle for a device context exists for the canvas</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="GetWorkingCanvas.Result">
        <short>The canvas instance with a valid handle</short>
      </element>
      <element name="GetWorkingCanvas.Canvas">
        <short>Canvas examined in the routine</short>
      </element>

      <element name="FreeWorkingCanvas">
        <short>Ensures a canvas handle for a device context is freed</short>
        <descr></descr>
        <seealso></seealso>
      </element>
      <element name="FreeWorkingCanvas.canvas">
        <short>Canvas examined in the routine</short>
      </element>

      <element name="Register">
        <short>Registers components in the Lazarus IDE</short>
        <descr>
          <p>
            <var>Register</var> is the procedure used to register components for use in the Lazarus IDE. Register calls the <var>RegisterComponents</var> routine to add the <var>TStringGrid</var> and <var>TDrawGrid</var> controls to the <b>Additional</b> tab in the Lazarus IDE.
          </p>
        </descr>
        <seealso></seealso>
      </element>

      <topic name="HowToUseGrids">
        <short>
          How to use  <var>Grids</var> including  <var>StringGrids</var>,  <var>DrawGrids</var> and  <var>DbGrids</var>
        </short>
        <descr>
          <p>
            <b>Customizing Grids</b>
          </p>
          <p>
            Grids are components derived from the <var>TCustomControl</var> class and do not  have a native widget associated with them. So they are not restricted by the look of the current interface theme. This can be both an advantage and a disadvantage: usually programmers want to create a uniform-look application. Lazarus grids are flexible enough to allow programmers to make them look similar to other native controls; alternatively they can customize the grid to obtain almost the same look in any platform or widget interface (with the exception of scrollbars, whose look is still determined by the current theme).
          </p>
          <p>
            Some properties can affect the way the grid looks by acting when the cell is about to be painted in <var>PrepareCanvas/OnPrepareCanvas</var> by changing default canvas properties like brush color or font. Following is a list of such properties:
          </p>
          <table>
            <caption>Properties and Events for Customizing Grids</caption>
            <th>
              <td>Property</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>AlternateColor</td>
              <td>The user can change the background color that appears on alternate rows. This is to allow easy reading of grid rows data.</td>
            </tr>
            <tr>
              <td>Color</td>
              <td>Sets the primary color used to draw non fixed cells' background.</td>
            </tr>
            <tr>
              <td>FixedColor</td>
              <td>The color used to draw fixed cells' background.</td>
            </tr>
            <tr>
              <td>Flat</td>
              <td>Eliminates the 3d look of fixed cells.</td>
            </tr>
            <tr>
              <td>TitleFont</td>
              <td>Font used to draw the text in fixed cells.</td>
            </tr>
            <tr>
              <td>TitleStyle</td>
              <td>
                <p>Changes the 3D look of fixed cells. There are 3 settings:</p>
                <dl>
                  <dt>tsLazarus</dt>
                  <dd>The default look</dd>
                  <dt>tsNative</dt>
                  <dd>Tries to use an appearance that is in concordance with the current widgetset theme</dd>
                  <dt>tsStandard</dt>
                  <dd>A more contrasted look, like Delphi grids</dd>
                </dl>
              </td>
            </tr>
            <tr>
              <td>AltColorStartNormal</td>
              <td>
                If true, alternate color is always in the second row after fixed rows; the first row after fixed rows will always be the default color. If false, default color is set to the first row as if there were no fixed rows.
              </td>
            </tr>
            <tr>
              <td>BorderColor</td>
              <td>
                Sets the grid's border color used when <var>Flat</var>=True and <var>BorderStyle</var>=bsSingle;
              </td>
            </tr>
            <tr>
              <td>EditorBorderStyle</td>
              <td>
                If set to <var>bsNone</var> under Windows the cell editors will not have the border, like in Delphi; set to <var>bsSingle</var> by default because the border can be theme specific in some widgetsets and to allow a uniform look.
            </td>
            </tr>
            <tr>
              <td>FocusColor</td>
              <td>The color used to draw the current focused cell if <var>UseXORFeatures</var> is not set; by default this is <var>clRed</var>.</td>
            </tr>
            <tr>
              <td>FocusRectVisible</td>
              <td>Turns on/off the drawing of focused cell.</td>
            </tr>
            <tr>
              <td>GridLineColor</td>
              <td>Color of grid lines in non fixed area.</td>
            </tr>
            <tr>
              <td>GridLineStyle</td>
              <td>
                Pen style used to draw lines in non fixed area, possible choices are: <var>psSolid</var>, <var>psDash</var>, <var>psDot</var>, <var>psDashDot</var>, <var>psDashDotDot</var>, <var>psinsideFrame</var>, <var>psPattern</var>, <var>psClear</var>; default is <var>psSolid</var>.
              </td>
            </tr>
            <tr>
              <td>SelectedColor</td>
              <td>Color used to draw cell background on selected cells.</td>
            </tr>
            <tr>
              <td>UseXORFeatures</td>
              <td>If set, focus rect is drawn using XOR mode so it should make visible the focus rect in combination with any cell color background. It also affects the way that moving columns look.</td>
            </tr>
            <tr>
              <td>DefaultDrawing</td>
              <td>
                Normally the grid prepares its grid canvas using properties according to the kind of cell that is being painted. If the user has written an <var>OnDrawCell</var> event handler, <var>DefaultDrawing</var> (if set) also paints the cell background; if the user is taking full responsibility for drawing the cell it is better to turn off this so painting is not duplicated. In a StringGrid, if DefaultDrawing is set it draws the text in each cell.
            </td>
            </tr>
            <tr>
              <td>AutoAdvance</td>
              <td>Where the cell cursor will go when pressing enter or tab/shift tab, or after editing.</td>
            </tr>
            <tr>
              <td>ExtendedColSizing</td>
              <td>If true, the  user can resize columns, not just at the headers, but anywhere along the column's height.</td>
            </tr>
          </table>
          <p>
            <b>Other Properties that Affect Grid Appearance:</b>
          </p>
          <p>
            <var>Options</var>
          </p>
          <p>
            This is a set of zero or more choices, with some elements that enable diverse functionality but others that are related directly with grid's look. Options can be set at design-time or run-time.
          </p>
          <dl>
            <dt>
              <var>goFixedVertLine, goFixedHorzLine</var>
            </dt>
            <dd>
              Draws a vertical or horizontal line respectively, delimiting cells or columns in the fixed area; active by default.
            </dd>
            <dt>
              <var>goVertLine, goHorzLine</var>
            </dt>
            <dd>
              The same as previous, but for the normal browseable area. A grid can be made to simulate a listbox by unsetting both of these options.
            </dd>
            <dt>
              <var>goDrawFocusSelected</var>
            </dt>
            <dd>
              If this option is enabled, a selection background is painted in the focused cell in addition to the focused dotted rectangle. Please note:  this doesn't work when the <var>goRowSelect</var> option is set; in such case the row is always painted as if <var>goDrawFocusSelected</var> is set.
            </dd>
            <dt>
              <var>goRowSelect</var>
            </dt>
            <dd>
              Selects the full row instead of individual cells.
            </dd>
            <dt>
              <var>goFixedRowNumbering</var>
            </dt>
            <dd>
              If set, grid will do numbering of rows in first fixed column.
            </dd>
            <dt>
              <var>goHeaderHotTracking</var>
            </dt>
            <dd>
              If set, the grid will try to show a different look when the mouse cursor is over any fixed cell. In order for this to work, desired cell zone needs to be enabled with the <var>HeaderHotZones</var>. Try combining this option with <var>TitleStyle</var>= <var>tsNative</var> to get themed hot tracking look.
            </dd>
            <dt>
              <var>goHeaderPushedLook</var>
            </dt>
            <dd>
              If set, this option enables a pushed look when clicking any fixed cell. The zone of "pushable" cells is enabled using <var>HeaderPushedZones</var> property.
            </dd>
          </dl>
          <p>
            <b>Description of the Grid Drawing Process</b>
          </p>
          <p>
            Like other custom controls, the grid is drawn using the paint method. In general terms the grid is drawn by painting all rows, and each row by painting its individual cells. The process is as follows:
          </p>
          <ul>
            <li>First, the visible cells area is determined: each row is tested to see if it intersects the canvas clipping region; if it's OK, then the visible area is painted by drawing columns of each row.
            </li>
            <li>
              The column and row values are used to identify the cell that is about to be painted and again each column is tested for intersection with the clipping region; if everything is OK, some additional properties like the cell's rectangular extent and visual state are passed as arguments to the DrawCell method.
            </li>
            <li>
              <p>
                As the drawing process is running, the visual state of each cell is adjusted according to grid options and position within grid. The visual state is retained in a variable of type <var>TGridDrawState</var> which is a set with following elements:
              </p>
              <table>
                <tr>
                  <td>gdSelected</td>
                  <td>The cell will have a selected look.</td>
                </tr>
                <tr>
                  <td>gdFocused</td>
                  <td>The cell will have a focused look.</td>
                </tr>
                <tr>
                  <td>gdFixed</td>
                  <td>Cell have to be painted with fixed cell look.</td>
                </tr>
                <tr>
                  <td>gdHot</td>
                  <td>the mouse is over this cell, so paint it with hot tracking look</td>
                </tr>
                <tr>
                  <td>gdPushed</td>
                  <td>the cell is being clicked, paint it with pushed look </td>
                </tr>
              </table>
            </li>
            <li>
              <p>
                <var>DrawCell</var> - The DrawCell method is virtual and may be overridden in descendent grids to do custom drawing. The information passed to <var>DrawCell</var> helps to identify which particular cell is being painted, the physical area occupied on the screen and its visible status. See <link id="TCustomGrid.DrawCell">DrawCell</link> reference for details. For each cell the following occurs:
              </p>
              <ul>
                <li>
                  <b>PrepareCanvas</b>  - If the DefaultDrawing is set, the grid canvas is setup with default properties for brush and font based on current visual state. For several design and run-time properties, the text alignment is set to match programmer selection in custom columns if they exists.  If DefaultDrawing is false, brush color is set to clWindow and Font color to clWindowText, the text alignment is set with grids defaultTextStyle value.
                </li>
                <li>
                  <b>OnPrepareCanvas</b> -  If the programmer wrote an event handler for the
                  <var>OnPrepareCanvas</var> event, it is called at this point. This event can be used for doing simple customization like changing a cell's background color, font's properties like color, font face and style, Text layout like different combinations of left, center, top, bottom, right alignment, etc. Any change made to the canvas for a particular cell in this event would be lost, because the next cell drawing will reset canvas again to a default state. So it's safe doing changes only for a particular cell or cells and forget about it for the rest. Using this event sometimes helps to avoid using the <var>OnDrawCell</var> grid event, where users would be forced to duplicate the grid's drawing code.
                </li>
                <li>
                  <b>OnDrawCell</b> - Next, if no handler for the <var>OnDrawCell</var> event was specified, the grid calls the <var>DefaultDrawCell</var> method which simply paints the cell background using the current canvas brush color and style. If the <var>OnDrawCell</var> handler exists, the grid first paints the cell background, but only if the <var>DefaultDrawing</var> was set; then it calls the <var>OnDrawCell</var> event to do custom cell painting. Usually programmers want to do custom drawing only for particular cells, but standard drawing for others: in this case, they can restrict custom operation to certain cell or cells by looking into <var>ACol, ARow</var> and <var>AState</var> arguments, and for other cells simply call the <var>DefaultDrawCell</var> method and let the grid to take care of it.
                </li>
                <li>
                  <b>Text</b> - At this point, if the <var>DefaultDrawing</var> is true, the cell's text content is painted (only for <var>TStringGrid</var>).
                </li>
                <li>
                  <b>Grid lines</b> - The last step for each cell is to paint the grid lines: if grid options <var>goVertLine, goHorzLine, goFixedVertLine</var> and
                  <var>goFixedHorzLine</var> are specified the cell grid is drawn at this point. Grids with only rows or only cols can be obtained by changing these options. If the programmer elected to have a "themed" look it is done at this point also (see TitleStyle).
                </li>
                <li>
                  <b>FocusRect</b> - When all columns of the current row have been painted it is time to draw the focus rectangle for the current selected cell or for the whole row if the <var>goRowSelect</var> option is set.
                </li>
              </ul>
            </li>
          </ul>
          <p>
            <b>Grid Cell Selection</b>
          </p>
          <p>
            The location of a grid's current (focused) cell (or row) can be changed using keyboard, mouse or through code. In order to change cell focus successfully to another position, we must test  the target position to see if it is allowed to receive cell focus. When using the keyboard, <var>AutoAdvance</var> performs part of the process by finding what should be the next focused cell. When using mouse clicks or moving by code, focus will not move from the current cell unless the target cell is permitted to receive focus.
          </p>
          <p>
            The grid calls <var>SelectCell</var> to see if a cell is focusable: if this function returns true, then the target cell identified with arguments <var>aCol</var> and <var>aRow</var> is focusable (the current implementation of <var>TCustomGrid</var> simply returns true). <var>TCustomDrawGrid</var> and hence <var>TDrawGrid</var> and <var>TStringGrid</var> override this method and check first if  a cell is any wider than 0; normally you don't want a 0 width cell selected so a cell with this characteristics is skipped automatically in the process of finding a suitable cell. The overridden method <var>SelectCell</var> also calls the user configurable event <var>OnSelectCell</var>: this event receives the cell coordinates as arguments and always returns a default result of True.
          </p>
          <p>
            Once a cell is known to be focusable and we are sure a movement will take place, the method <var>BeforeMoveSelection</var> is called; this in turns triggers the <var>OnBeforeSelection</var> event. This method's arguments are the coordinates for the new focused cell; at this point any visible editor is hidden too. The "before" word means that selection is not yet changed and current focused coordinates can be accessed with <var>grid.Col</var> and <var>grid.Row</var> properties.
          </p>
          <p>
            After that, the internal focused cell coordinates are changed and <var>MoveSelection</var> is called; this method's purpose (if set) is to trigger the <var>OnSelection</var> event (this is a notification that the focused cell has changed and the new cell coordinates are available through grid.row and grid.col properties).
          </p>
          <p>
            Note that is not good to use the <var>OnSelectCell</var> event to detect cell focus changes, as this event will be triggered several times even for the same cell in the process of finding a suitable cell. Is better to use <var>OnBeforeSelection</var> or <var>OnSelection</var> events for this purpose.
          </p>
          <p>
            <b>Using Cell Editors</b>
          </p>
          <p>
            Users can specify what editor will be used for a cell using one of two methods.
          </p>
          <ol>
            <li>
              <b>Using a custom column and selecting the ButtonStyle of the column.</b> In this method the user can select the style of the editor that will be shown. Available values are: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>.
            </li>
            <li>
              <p>
                <b>Using the OnSelectEditor Grid Event</b>
              </p>
              <p>
                Here the user specifies in the <var>Editor</var> parameter which editor to use for a cell identified by <var>aCol</var>, <var>ARow</var> in a <var>TCustomDrawGrid</var> derived grid or <var>TColumn</var> in <var>TCustomDBGrid</var>. The public <var>EditorByStyle()</var> function takes as parameter one of the following values: <var>cbsAuto, cbsEllipsis, cbsNone, cbsPickList, cbsCheckboxColumn</var>.
              </p>
              <p>
                This method takes precedence over the first one using custom columns. A Custom cell editor can be specified here, with values specific to the cell, row or column.
              </p>
            </li>
          </ol>
          <p>
            <b>Description of Editor Styles</b>
          </p>
          <p>
            The following is a description of the editor styles. They are enumerated values of type <var>TColumnButtonStyle</var> and so they are prefixed by 'cbs'. This type was used to remain compatible with Delphi's <var>DBGrid</var>.
          </p>
          <ul>
            <li>
              <b>cbsAuto</b> - This is the default editor style for TCustomGrid derived grids. The TStringCellEditor derived from TCustomMaskEdit is specialized to edit single line strings and is used by default in TStringGrid and TDrawGrid. When using Custom Columns, if the programmer filled the Column's PickList property, this behaves as if cbsPickList editor style was set. For a TCustomDBGrid that has a field of type Boolean, it behaves as if cbsCheckBoxColumn editor style was specified. This is the recommended value for custom cell editors.
                <!-- TODO: related OnEditingDone -->
            </li>
            <li>
              <p>
                <b>cbsEllipsis</b> - This editor style is the most generic one. A button with ellipsis (...) appears in the editing cell and the programmer can use the OnEditButtonClick grid event to take any programmed action  when the user presses the button. For example a calendar dialog could pop up to allow the user to select a specific date,  a file open dialog could appear to find files, or a calculator could appear so the user could enter the numeric result of calculations, etc.
              </p>
              <ul>
                <li>
                  OnEditButtonClick is just a notification, to find out in which cell a button has been clicked by taking  a look at the grid.Row and grid.Col properties.
                </li>
                <li>
                  A DBGrid has specific properties to retrieve the active column or field and because this event occurs in the active record, it could update the information in the active field.
                </li>
                <li>
                  This editor style is implemented using TButtonCellEditor, a direct descendant of TButton.
                </li>
              </ul>
            </li>
            <li>
              <b>cbsNone</b> - This editor style instructs the grid not to use any editor for a specific cell or column; it behaves then, as if the grid were read-only for such a cell or column.
            </li>
            <li>
              <p>
                <b>cbsPickList</b> - Used to present the user with a list of values that can be entered. This editor style is implemented using TPickListCellEditor, a component derived from TCustomComboBox. The list of values that are shown is filled in one of two ways depending on the method used to select the editor style.
               </p>
               <p>
                 When using custom columns, programmers can enter a list of values using the PickList property for the column.
                 <!-- TODO: Example of editing the list -->
               </p>
            </li>
            <li>
              <p>
                <b>cbsCheckboxColumn</b> - This editor style is at the moment only available in TDBGrid. If a field's contents associated with the column are restricted to a pair of values, for example, yes-no, true-false, on-off, 1-0, etc then cbsCheckboxColumn is used to modify the appearance of a column by using a checkbox representation that the user can toggle by using a mouse click or pressing the SPACE key.
              </p>
              <ul>
                <li>
                  If a ButtonStyle for a column is set to cbsAuto and DBGrid detects that the field associated with the column is a Boolean field, then the grid uses this editor style automatically. This automatic selection can be disabled or enabled using DBGrid's OptionsExtra property; setting dgeCheckboxColumn element to false disables this feature.
                </li>
                <li>
                  The values that are used to recognize the checked or unchecked states are set in a column's properties ValueChecked and ValueUnchecked.
                </li>
                <li>
                  At any moment, the field value can be in one to three states: Unchecked, Checked or Grayed.
                </li>
              </ul>
            </li>
          </ul>
        </descr>
        <notes>
          <note>ToDo: samples of what can be made and what to leave for OnDrawCell?</note>
        </notes>
      </topic>

    </module>
    <!-- Grids -->
  </package>
</fpdoc-descriptions>
